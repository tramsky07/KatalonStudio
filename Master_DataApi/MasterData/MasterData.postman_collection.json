{
	"info": {
		"_postman_id": "d9c75e6d-0d9c-48f8-b639-65385fb28c41",
		"name": "MasterData",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Master_Data_Final",
			"item": [
				{
					"name": "POR-212",
					"item": [
						{
							"name": "Business_Scenario",
							"item": [
								{
									"name": "POR-223: Retrieve Airport record: GET: Airport is not assigned to any Sales Area, Parameter = countryCode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e21bcaaf-0b8f-434e-8dd7-bdb13e07fadd",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlAirport\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "9a13dd7a-6730-4972-9bb6-de951e49f710",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonBody = pm.response.json();",
													"var len = jsonBody._embedded.airports.length;",
													"",
													"var countryCodeParameter = pm.request.url.query.reference.countryCode.value;",
													"",
													"function getCountryCodes(rspBody){",
													"    ",
													"    var arrCountryCodes = [];",
													"    var len = rspBody._embedded.airports.length;",
													"    ",
													"    for(var base = 0; base < len; base++){",
													"        ",
													"        var countryCodes = rspBody._embedded.airports[base].countryCode;",
													"        arrCountryCodes.push(countryCodes);",
													"        ",
													"    }",
													"    return arrCountryCodes;",
													"}",
													"",
													"function testProper(rspBody){",
													"    ",
													"    var len = getCountryCodes(rspBody).length;",
													"    ",
													"    pm.test(\"Check that the Country of the Airport codes in response is equal Country code used in parameter\", function(){",
													"        ",
													"        for(var baseLen = 0; baseLen < len; baseLen++){",
													"            ",
													"            var countryCode = getCountryCodes(rspBody)[baseLen];",
													"            ",
													"            pm.expect(countryCodeParameter).to.eql(countryCode);",
													"            ",
													"        }",
													"    });",
													"    ",
													"}",
													"",
													"testProper(jsonBody);",
													"",
													"function sendToNextPage(nextPage){",
													"    ",
													"            pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"               console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"               var jsonData = res.json();",
													"               testProper(jsonData); ",
													"               ",
													"            }",
													"            ",
													"        });",
													"        ",
													"}",
													"",
													"var totPages = jsonBody.page.totalPages;",
													"",
													"function sendToAllPages(){",
													"    ",
													"    if(totPages > 1){",
													"    ",
													"        for(var base = 1; base < totPages; base++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + base;",
													"            ",
													"            let nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"           setTimeout(function(){sendToNextPage(nextPage)}, 5000*base);",
													"        }",
													"    ",
													"    }",
													"    ",
													"}",
													"",
													"sendToAllPages();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?countryCode=JP",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "countryCode",
													"value": "JP"
												}
											]
										},
										"description": "Airport not assigned to any sales area, request parameter is countryCode"
									},
									"response": []
								},
								{
									"name": "POR-225: Retrieve Airport record: GET: Airport assigned to sales area using CSP, Parameter = countryCode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e21bcaaf-0b8f-434e-8dd7-bdb13e07fadd",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlAirport\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f03c41f4-58eb-4767-ac0b-97dd4de9e5f8",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonBody = pm.response.json();",
													"var len = jsonBody._embedded.airports.length;",
													"",
													"var countryCodeParameter = pm.request.url.query.reference.countryCode.value;",
													"",
													"function getCountryCodes(rspBody){",
													"    ",
													"    var arrCountryCodes = [];",
													"    var len = rspBody._embedded.airports.length;",
													"    ",
													"    for(var base = 0; base < len; base++){",
													"        ",
													"        var countryCodes = rspBody._embedded.airports[base].countryCode;",
													"        arrCountryCodes.push(countryCodes);",
													"        ",
													"    }",
													"    return arrCountryCodes;",
													"}",
													"",
													"function testProper(rspBody){",
													"    ",
													"    var len = getCountryCodes(rspBody).length;",
													"    ",
													"    pm.test(\"Check that the Country of the Airport codes in response is equal Country code used in parameter\", function(){",
													"        ",
													"        for(var baseLen = 0; baseLen < len; baseLen++){",
													"            ",
													"            var countryCode = getCountryCodes(rspBody)[baseLen];",
													"            ",
													"            pm.expect(countryCodeParameter).to.eql(countryCode);",
													"            ",
													"        }",
													"    });",
													"    ",
													"}",
													"",
													"testProper(jsonBody);",
													"",
													"function sendToNextPage(nextPage){",
													"    ",
													"            pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"               console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"               var jsonData = res.json();",
													"               testProper(jsonData); ",
													"               ",
													"            }",
													"            ",
													"        });",
													"        ",
													"}",
													"",
													"var totPages = jsonBody.page.totalPages;",
													"",
													"function sendToAllPages(){",
													"    ",
													"    if(totPages > 1){",
													"    ",
													"        for(var base = 1; base < totPages; base++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + base;",
													"            ",
													"            let nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            setTimeout(function(){sendToNextPage(nextPage)}, 5000*base);",
													"        }",
													"    ",
													"    }",
													"    ",
													"}",
													"sendToAllPages();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?countryCode=JP",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "countryCode",
													"value": "JP"
												}
											]
										},
										"description": "Airport assigned to a sales area, request parameter is countryCode"
									},
									"response": []
								},
								{
									"name": "POR-228: Retrieve Airport record: GET: Airport assigned to sales area using CSP, Parameter = salesAreaCode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e21bcaaf-0b8f-434e-8dd7-bdb13e07fadd",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlAirport\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5af0ff5b-b8a5-4186-bbaf-ea0fb385448b",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonBody = pm.response.json();",
													"var lenOfAirports = jsonBody._embedded.airports.length;",
													"",
													"function getAirportCodes(){",
													"    ",
													"    var arrAirports = [];",
													"    for(var baseLen = 0; baseLen < lenOfAirports; baseLen++){",
													"        ",
													"        var airportCode = jsonBody._embedded.airports[baseLen].code;",
													"        arrAirports.push(airportCode);",
													"",
													"    }",
													"    ",
													"   return arrAirports.sort();",
													"   ",
													"}",
													"",
													"pm.test(\"Checking the expected Airport codes against the actual codes in the response.\", function(){",
													"    ",
													"    var expectedAirportCodes = [\"ASJ\", \"FUK\", \"TRM\"];",
													"    var lenOfExpectedAirportCodes = expectedAirportCodes.length;",
													"    ",
													"    for(baseExpectedAirport = 0; baseExpectedAirport < lenOfExpectedAirportCodes; baseExpectedAirport++){",
													"        ",
													"        pm.expect(expectedAirportCodes[baseExpectedAirport]).to.eql(getAirportCodes()[baseExpectedAirport]);",
													"    }",
													"    ",
													"});",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?salesAreaCode=FKS",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "salesAreaCode",
													"value": "FKS"
												}
											]
										},
										"description": "Airport assigned to a sales area, request parameter is salesAreaCode"
									},
									"response": []
								},
								{
									"name": "POR-229: Retrieve Airport record: GET: Airport unassigned to a sales area using CSP, Parameter = salesAreaCode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e21bcaaf-0b8f-434e-8dd7-bdb13e07fadd",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlAirport\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ac0e461b-d4f2-4984-ab9f-e1337dfd694e",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonBody = pm.response.json();",
													"var lenOfAirports = jsonBody._embedded.airports.length;",
													"",
													"function getAirportCodes(){",
													"    ",
													"    var arrAirports = [];",
													"    for(var baseLen = 0; baseLen < lenOfAirports; baseLen++){",
													"        ",
													"        var airportCode = jsonBody._embedded.airports[baseLen].code;",
													"        arrAirports.push(airportCode);",
													"",
													"    }",
													"    ",
													"   return arrAirports.sort();",
													"   ",
													"}",
													"",
													"pm.test(\"Checking the expected Airport codes against the actual codes in the response.\", function(){",
													"    ",
													"    var expectedAirportCodes = [\"ASJ\", \"FUK\", \"TRM\"];",
													"    var lenOfExpectedAirportCodes = expectedAirportCodes.length;",
													"    ",
													"    for(baseExpectedAirport = 0; baseExpectedAirport < lenOfExpectedAirportCodes; baseExpectedAirport++){",
													"        ",
													"        pm.expect(expectedAirportCodes[baseExpectedAirport]).to.eql(getAirportCodes()[baseExpectedAirport]);",
													"    }",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?salesAreaCode=FKS",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "salesAreaCode",
													"value": "FKS"
												}
											]
										},
										"description": "Airport unassigned to a sales area, request parameter is salesAreaCode"
									},
									"response": []
								},
								{
									"name": "POR-230: Retrieve Airport record: GET: Airport unassigned to a sales area using CSP, Parameter = countryCode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e21bcaaf-0b8f-434e-8dd7-bdb13e07fadd",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlAirport\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b7298928-a949-4b91-adb2-bb111e668559",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonBody = pm.response.json();",
													"var len = jsonBody._embedded.airports.length;",
													"",
													"var countryCodeParameter = pm.request.url.query.reference.countryCode.value;",
													"",
													"function getCountryCodes(rspBody){",
													"    ",
													"    var arrCountryCodes = [];",
													"    var len = rspBody._embedded.airports.length;",
													"    ",
													"    for(var base = 0; base < len; base++){",
													"        ",
													"        var countryCodes = rspBody._embedded.airports[base].countryCode;",
													"        arrCountryCodes.push(countryCodes);",
													"        ",
													"    }",
													"    return arrCountryCodes;",
													"}",
													"",
													"function testProper(rspBody){",
													"    ",
													"    var len = getCountryCodes(rspBody).length;",
													"    ",
													"    pm.test(\"Check that the Country of the Airport codes in response is equal Country code used in parameter\", function(){",
													"        ",
													"        for(var baseLen = 0; baseLen < len; baseLen++){",
													"            ",
													"            var countryCode = getCountryCodes(rspBody)[baseLen];",
													"            ",
													"            pm.expect(countryCodeParameter).to.eql(countryCode);",
													"            ",
													"        }",
													"    });",
													"    ",
													"}",
													"",
													"testProper(jsonBody);",
													"",
													"function sendToNextPage(nextPage){",
													"    ",
													"            pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"               console.log(err);",
													"                ",
													"            }else{",
													"               ",
													"               let stat = res.code;",
													"               pm.test(\"Check succeeding status codes.\", function(){",
													"                   pm.expect(stat).to.eql(200);",
													"               });    ",
													"               var jsonData = res.json();",
													"               testProper(jsonData); ",
													"               ",
													"            }",
													"            ",
													"        });",
													"        ",
													"}",
													"",
													"var totPages = jsonBody.page.totalPages;",
													"",
													"function sendToAllPages(){",
													"    ",
													"    if(totPages > 1){",
													"    ",
													"        for(var base = 1; base < totPages; base++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + base;",
													"            ",
													"            let nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            setTimeout(function(){sendToNextPage(nextPage)}, 5000*base);",
													"        }",
													"    ",
													"    }",
													"    ",
													"}",
													"sendToAllPages();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?countryCode=JP",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "countryCode",
													"value": "JP"
												}
											]
										},
										"description": "Airport unassigned to a sales area, request parameter is countryCode"
									},
									"response": []
								},
								{
									"name": "POR-231: Retrieve Airports assigned to the given Sales Area: GET: Parameter = Sales Area, page = 0, size = 5 and sorted by code desc",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e21bcaaf-0b8f-434e-8dd7-bdb13e07fadd",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlAirport\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "58531ee5-5e5c-4790-b49e-ce6d6c5149fe",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonBody = pm.response.json();",
													"var lenOfAirports = jsonBody._embedded.airports.length;",
													"",
													"function getAirportCodes(){",
													"    ",
													"    var arrAirports = [];",
													"    for(var baseLen = 0; baseLen < lenOfAirports; baseLen++){",
													"        ",
													"        var airportCode = jsonBody._embedded.airports[baseLen].code;",
													"        arrAirports.push(airportCode);",
													"",
													"    }",
													"    ",
													"   return arrAirports;",
													"   ",
													"}",
													"",
													"pm.test(\"Checking the expected Airport codes against the actual codes in the response.\", function(){",
													"    ",
													"    var expectedAirportCodes = [\"TRM\", \"FUK\", \"ASJ\"];",
													"    var lenOfExpectedAirportCodes = expectedAirportCodes.length;",
													"    ",
													"    for(var baseExpectedAirport = 0; baseExpectedAirport < lenOfExpectedAirportCodes; baseExpectedAirport++){",
													"        ",
													"        pm.expect(expectedAirportCodes[baseExpectedAirport]).to.eql(getAirportCodes()[baseExpectedAirport]);",
													"    }",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?salesAreaCode=FKS&page=0&size=5&sort=code%2Cdesc",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "salesAreaCode",
													"value": "FKS"
												},
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "5"
												},
												{
													"key": "sort",
													"value": "code%2Cdesc"
												}
											]
										},
										"description": "Retrieve Airports assigned to the given Sales Area: GET: Parameter = Sales Area, page = 0, size = 5 and sorted by code desc"
									},
									"response": []
								},
								{
									"name": "POR-233: Retrieve Airport record: GET: Airport assigned to sales area using CSP, Parameters countryCode and salesAreaCode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e21bcaaf-0b8f-434e-8dd7-bdb13e07fadd",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlAirport\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "fbebb02e-0ac3-49a1-9658-a654f7b3509f",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonBody = pm.response.json();",
													"var len = jsonBody._embedded.airports.length;",
													"",
													"var countryCodeParameter = pm.request.url.query.reference.countryCode.value;",
													"",
													"function getCountryCodes(rspBody){",
													"    ",
													"    var arrCountryCodes = [];",
													"    var len = rspBody._embedded.airports.length;",
													"    ",
													"    for(var base = 0; base < len; base++){",
													"        ",
													"        var countryCodes = rspBody._embedded.airports[base].countryCode;",
													"        arrCountryCodes.push(countryCodes);",
													"        ",
													"    }",
													"    return arrCountryCodes;",
													"}",
													"",
													"function testProper(rspBody){",
													"    ",
													"    var len = getCountryCodes(rspBody).length;",
													"    ",
													"    pm.test(\"Check that the Country of the Airport codes in response is equal Country code used in parameter\", function(){",
													"        ",
													"        for(var baseLen = 0; baseLen < len; baseLen++){",
													"            ",
													"            var countryCode = getCountryCodes(rspBody)[baseLen];",
													"            ",
													"            pm.expect(countryCodeParameter).to.eql(countryCode);",
													"            ",
													"        }",
													"    });",
													"    ",
													"}",
													"",
													"testProper(jsonBody);",
													"",
													"function sendToNextPage(nextPage){",
													"    ",
													"            pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"               console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"               var jsonData = res.json();",
													"               testProper(jsonData); ",
													"               ",
													"            }",
													"            ",
													"        });",
													"        ",
													"}",
													"",
													"var totPages = jsonBody.page.totalPages;",
													"",
													"function sendToAllPages(){",
													"    ",
													"    if(totPages > 1){",
													"    ",
													"        for(var base = 1; base < totPages; base++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + base;",
													"            ",
													"            var nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            sendToNextPage(nextPage);",
													"        }",
													"    ",
													"    }",
													"    ",
													"}",
													"sendToAllPages();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?countryCode=JP&salesAreaCode=FKS",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "countryCode",
													"value": "JP"
												},
												{
													"key": "salesAreaCode",
													"value": "FKS"
												}
											]
										},
										"description": "Retrieve Airport record: GET: Airport assigned to sales area using CSP, Parameters countryCode and salesAreaCode"
									},
									"response": []
								},
								{
									"name": "POR-232: Retrieve Airport record: GET: Airport is not assigned to any Sales Area, Parameters = countryCode and salesAreaCode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e21bcaaf-0b8f-434e-8dd7-bdb13e07fadd",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlAirport\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "09ca899e-d7be-459a-a700-e443395470de",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonBody = pm.response.json();",
													"var len = jsonBody._embedded.airports.length;",
													"",
													"var countryCodeParameter = pm.request.url.query.reference.countryCode.value;",
													"",
													"function getCountryCodes(rspBody){",
													"    ",
													"    var arrCountryCodes = [];",
													"    var len = rspBody._embedded.airports.length;",
													"    ",
													"    for(var base = 0; base < len; base++){",
													"        ",
													"        var countryCodes = rspBody._embedded.airports[base].countryCode;",
													"        arrCountryCodes.push(countryCodes);",
													"        ",
													"    }",
													"    return arrCountryCodes;",
													"}",
													"",
													"function testProper(rspBody){",
													"    ",
													"    var len = getCountryCodes(rspBody).length;",
													"    ",
													"    pm.test(\"Check that the Country of the Airport codes in response is equal Country code used in parameter\", function(){",
													"        ",
													"        for(var baseLen = 0; baseLen < len; baseLen++){",
													"            ",
													"            var countryCode = getCountryCodes(rspBody)[baseLen];",
													"            ",
													"            pm.expect(countryCodeParameter).to.eql(countryCode);",
													"            ",
													"        }",
													"    });",
													"    ",
													"}",
													"",
													"testProper(jsonBody);",
													"",
													"function sendToNextPage(nextPage){",
													"    ",
													"            pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"               console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"               var jsonData = res.json();",
													"               testProper(jsonData); ",
													"               ",
													"            }",
													"            ",
													"        });",
													"        ",
													"}",
													"",
													"var totPages = jsonBody.page.totalPages;",
													"",
													"function sendToAllPages(){",
													"    ",
													"    if(totPages > 1){",
													"    ",
													"        for(var base = 1; base < totPages; base++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + base;",
													"            ",
													"            var nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            sendToNextPage(nextPage);",
													"        }",
													"    ",
													"    }",
													"    ",
													"}",
													"sendToAllPages();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?countryCode=JP&salesAreaCode=FKS",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "countryCode",
													"value": "JP"
												},
												{
													"key": "salesAreaCode",
													"value": "FKS"
												}
											]
										},
										"description": "Retrieve Airport record: GET: Airport is not assigned to any Sales Area, Parameters = countryCode and salesAreaCode"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative_Scenario",
							"item": [
								{
									"name": "POR-234: Retrieve Airport record: GET: Country code does not exist in CSP, Parameter =  countryCode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e21bcaaf-0b8f-434e-8dd7-bdb13e07fadd",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlAirport\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f4295783-d7c3-4df9-947c-6b75dab23557",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"function testElements(){",
													"",
													"    var jsonBody = pm.response.json();",
													"",
													"    pm.test(\"Check if the response body is empty.\", function () {",
													"        pm.expect(jsonBody.page.totalElements).to.eql(0);",
													"        pm.expect(jsonBody.page.totalPages).to.eql(0);",
													"        pm.expect(jsonBody.page.number).to.eql(0);",
													"    });    ",
													"    ",
													"}",
													"",
													"testElements();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?countryCode=UU",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "countryCode",
													"value": "UU"
												}
											]
										},
										"description": "Retrieve Airport record: GET: Country code does not exist in CSP, Parameter =  countryCode"
									},
									"response": []
								},
								{
									"name": "POR-235: Retrieve Airport record: GET: Sales Area code does not exist in CSP, Parameter =  salesAreaCode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "e21bcaaf-0b8f-434e-8dd7-bdb13e07fadd",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlAirport\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "119b888e-eb67-4b51-a058-82ee406a0d44",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"function testElements(){",
													"",
													"    var jsonBody = pm.response.json();",
													"",
													"    pm.test(\"Check if the response body is empty.\", function () {",
													"        pm.expect(jsonBody.page.totalElements).to.eql(0);",
													"        pm.expect(jsonBody.page.totalPages).to.eql(0);",
													"        pm.expect(jsonBody.page.number).to.eql(0);",
													"    });    ",
													"    ",
													"}",
													"",
													"testElements();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?salesAreaCode=UUU",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "salesAreaCode",
													"value": "UUU"
												}
											]
										},
										"description": "Retrieve Airport record: GET: Sales Area code does not exist in CSP, Parameter =  salesAreaCode"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"description": "Master Data - CSP - Get Airport",
					"_postman_isSubFolder": true
				},
				{
					"name": "POR-252",
					"item": [
						{
							"name": "Business_Scenarios",
							"item": [
								{
									"name": "POR-252: Check for the completeness of Properties",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "deb70a89-c032-4ca1-a031-d7a4ada389d3",
												"type": "text/javascript",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlSph\"));"
												]
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b6919624-f57d-4ab5-a638-c36691c50cb7",
												"type": "text/javascript",
												"exec": [
													"var jsonBody = pm.response.json();",
													"",
													"//----------------------- Checking of response body against json schema ---------------------------------------//",
													"",
													"var responseBodySchema = JSON.parse(pm.globals.get(\"jsonSchemaShc\"));",
													"pm.test('Validating json response vs. json schema', function() {",
													"    ",
													"  var res = tv4.validateMultiple(jsonBody, responseBodySchema);",
													" ",
													"  if(!res.valid){",
													"      ",
													"      res.errors.forEach(function(value, index){",
													"          console.log(index + \" \" + value.message + \" \" + value.dataPath);",
													"      });",
													"  }",
													"    pm.expect(res.valid).to.be.true;",
													"});",
													"",
													"//----------------------- Checking of response body main properties ---------------------------------------//",
													"",
													"var responseMainProperties = Object.keys(jsonBody);",
													"var expectedMainProperties = [\"_embedded\", \"_links\", \"page\"];",
													"",
													"var len = expectedMainProperties.length;",
													"",
													"pm.test(\"Checking the completeness of response body main properties.\", function(){",
													"    ",
													"    for(var base = 0; base < len; base++){",
													"        ",
													"        pm.expect(responseMainProperties[base]).to.eql(expectedMainProperties[base]);",
													"        ",
													"    }",
													"    ",
													"});",
													"",
													"//----------------------- Checking of response body main > _embedded properties ---------------------------------------//",
													"",
													"var responseEmbeddedProperties = Object.keys(jsonBody._embedded);",
													"var expectedEmbeddedProperties = [\"specialHandlingCodes\"];",
													"",
													"var lenOfEmbedded = expectedEmbeddedProperties.length;",
													"",
													"pm.test(\"Checking the completeness of response body main > _embedded properties.\", function(){",
													"    ",
													"    for(var baseEmbedded = 0; baseEmbedded < lenOfEmbedded ; baseEmbedded++){",
													"        ",
													"        pm.expect(expectedEmbeddedProperties[baseEmbedded]).to.eql(responseEmbeddedProperties[baseEmbedded]);",
													"        ",
													"    }",
													"    ",
													"});",
													"",
													"//----------------------- Checking of response body _embedded > specialHandlingCodes properties ---------------------------------------//",
													"",
													"var responseShcProperties = Object.keys(jsonBody._embedded.specialHandlingCodes[0]);",
													"var expectedShcProperties = [\"id\", \"code\", \"carrier\", \"name\", \"group\", \"_links\"];",
													"",
													"var lenOfShc = expectedShcProperties.length;",
													"",
													"pm.test(\"Checking the completeness of response body _embedded > specialHandlingCodes properties.\", function(){",
													"    ",
													"    for(var baseShc = 0; baseShc < lenOfShc ; baseShc++){",
													"        ",
													"        pm.expect(expectedShcProperties[baseShc]).to.eql(responseShcProperties[baseShc]);",
													"        ",
													"    }",
													"    ",
													"});",
													"",
													"//----------------------- Checking of response body specialHandlingCodes > carrier properties ---------------------------------------//",
													"",
													"var responseCarrierProperties = Object.keys(jsonBody._embedded.specialHandlingCodes[0].carrier);",
													"var expectedCarrierProperties = [\"id\", \"code\", \"name\"];",
													"",
													"var lenOfCarrier = expectedCarrierProperties.length;",
													"",
													"pm.test(\"Checking the completeness of response body specialHandlingCodes > carrier properties.\", function(){",
													"    ",
													"    for(var baseCarrier = 0; baseCarrier < lenOfCarrier ; baseCarrier++){",
													"        ",
													"        pm.expect(expectedCarrierProperties[baseCarrier]).to.eql(responseCarrierProperties[baseCarrier]);",
													"        ",
													"    }",
													"    ",
													"});",
													"",
													"//----------------------- Checking of response body specialHandlingCodes > _links properties ---------------------------------------//",
													"",
													"var responseLinksProperties = Object.keys(jsonBody._embedded.specialHandlingCodes[0]._links);",
													"var expectedLinksProperties = [\"self\"];",
													"",
													"var lenOfLinks = expectedLinksProperties.length;",
													"",
													"pm.test(\"Checking the completeness of response body specialHandlingCodes > _links properties.\", function(){",
													"    ",
													"    for(var baseLinks = 0; baseLinks < lenOfLinks ; baseLinks++){",
													"        ",
													"        pm.expect(expectedLinksProperties[baseLinks]).to.eql(responseLinksProperties[baseLinks]);",
													"        ",
													"    }",
													"    ",
													"});",
													"",
													"//----------------------- Checking of response body _links > self properties ---------------------------------------//",
													"",
													"var responseSelfProperties = Object.keys(jsonBody._embedded.specialHandlingCodes[0]._links.self);",
													"var expectedSelfProperties = [\"href\"];",
													"",
													"var lenOfSelf = expectedSelfProperties.length;",
													"",
													"pm.test(\"Checking the completeness of response body _links > self properties.\", function(){",
													"    ",
													"    for(var baseSelf = 0; baseSelf < lenOfSelf ; baseSelf++){",
													"        ",
													"        pm.expect(expectedSelfProperties[baseSelf]).to.eql(responseSelfProperties[baseSelf]);",
													"        ",
													"    }",
													"    ",
													"});",
													"",
													"//----------------------- Checking of response body main > _links properties ---------------------------------------//",
													"",
													"var responseLinksProperties = Object.keys(jsonBody._links);",
													"var expectedLinksProperties = [\"self\"];",
													"",
													"var lenOfLinks = expectedLinksProperties.length;",
													"",
													"pm.test(\"Checking the completeness of response body specialHandlingCodes > _links properties.\", function(){",
													"    ",
													"    for(var baseLinks = 0; baseLinks < lenOfLinks ; baseLinks++){",
													"        ",
													"        pm.expect(expectedLinksProperties[baseLinks]).to.eql(responseLinksProperties[baseLinks]);",
													"        ",
													"    }",
													"    ",
													"});",
													"",
													"//----------------------- Checking of response body _links > self properties ---------------------------------------//",
													"",
													"var responseSelfProperties = Object.keys(jsonBody._links.self);",
													"var expectedSelfProperties = [\"href\"];",
													"",
													"var lenOfSelf = expectedSelfProperties.length;",
													"",
													"pm.test(\"Checking the completeness of response body _links > self properties.\", function(){",
													"    ",
													"    for(var baseSelf = 0; baseSelf < lenOfSelf ; baseSelf++){",
													"        ",
													"        pm.expect(expectedSelfProperties[baseSelf]).to.eql(responseSelfProperties[baseSelf]);",
													"        ",
													"    }",
													"    ",
													"});",
													"",
													"//----------------------- Checking of response body main > page properties ---------------------------------------//",
													"",
													"var responsePageProperties = Object.keys(jsonBody.page);",
													"var expectedPageProperties = [\"size\", \"totalElements\", \"totalPages\", \"number\"];",
													"",
													"var lenOfPage = expectedPageProperties.length;",
													"",
													"pm.test(\"Checking the completeness of response body main > page properties.\", function(){",
													"    ",
													"    for(var basePage = 0; basePage < lenOfPage ; basePage++){",
													"        ",
													"        pm.expect(expectedPageProperties[basePage]).to.eql(responsePageProperties[basePage]);",
													"        ",
													"    }",
													"    ",
													"});"
												]
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?code=AVI&carrierCode=JL",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "code",
													"value": "AVI"
												},
												{
													"key": "carrierCode",
													"value": "JL"
												}
											]
										},
										"description": "Check if the property names are correct."
									},
									"response": []
								},
								{
									"name": "POR-261: Retrieve SHC: GET: Multiple SHC record exist in CSP(with carrier and no carrier): Parameter = code and carrierCode with no value",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "deb70a89-c032-4ca1-a031-d7a4ada389d3",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlSph\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "65d38e67-504c-4dfd-8a15-80f988515380",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"var lenOfShc = jsonResponseBody._embedded.specialHandlingCodes.length;",
													"",
													"function test(jsonBody, index){",
													"    ",
													"        ",
													"    pm.test(\"Check if the specialHandlingCodes in the response body has no Carrier indicated.\", function(){",
													"        ",
													"        var specialHandlingCodesObject = jsonBody._embedded.specialHandlingCodes[index];",
													"        if(specialHandlingCodesObject.hasOwnProperty('carrier')){",
													"                ",
													"            throw console.log('SHC has carrier property.');",
													"                ",
													"        }    ",
													"        ",
													"    });",
													"    ",
													"}",
													"",
													"function allZones(jsonBody){",
													"",
													"    for(var base = 0; base < lenOfShc; base++){",
													"        ",
													"        test(jsonBody, base);",
													"        ",
													"    }",
													"    ",
													"}",
													"",
													"allZones(jsonResponseBody);",
													"",
													"pm.test(\"Verify that only the expected carrier and SHC code will be included in the result.\", function(){",
													"    ",
													"    var expectedShc = pm.request.url.query.reference.code.value;",
													"    ",
													"    for(var base = 0; base < lenOfShc; base++){",
													"        ",
													"        var actualShc = jsonResponseBody._embedded.specialHandlingCodes[base].code;",
													"        ",
													"        pm.expect(expectedShc).to.eql(actualShc);",
													"        ",
													"    }",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?code=AVI&carrierCode=",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "code",
													"value": "AVI"
												},
												{
													"key": "carrierCode",
													"value": ""
												}
											]
										},
										"description": "Retrieve SHC record with no carrier using shc code and carrier code as parameter"
									},
									"response": []
								},
								{
									"name": "POR-262 : Retrieve SHC: GET: Multiple SHC record exist in CSP(with carrier and no carrier): Parameter = code",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "deb70a89-c032-4ca1-a031-d7a4ada389d3",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlSph\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "d10684b6-1ef9-4afd-b80d-41ffb1ab8ed6",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"var lenOfShc = jsonResponseBody._embedded.specialHandlingCodes.length;",
													"",
													"pm.test(\"Verify that only the expected shc code will be included in the result list.\", function(){",
													"    ",
													"    var expectedShc = pm.request.url.query.reference.code.value;",
													"",
													"    for(var base = 0; base < lenOfShc; base++){",
													"        ",
													"        var actualShc = jsonResponseBody._embedded.specialHandlingCodes[base].code;",
													"        pm.expect(expectedShc).to.eql(actualShc);",
													"        ",
													"    }",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?code=AVI",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "code",
													"value": "AVI"
												}
											]
										},
										"description": "Retrieve SHC record using shc code as parameter"
									},
									"response": []
								},
								{
									"name": "POR-263: Retrieve SHC: GET: Multiple SHC record exist in CSP(with carrier and no carrier): Parameter = carrierCode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "deb70a89-c032-4ca1-a031-d7a4ada389d3",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlSph\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "87891a95-0190-41c1-878c-ce41ed7647dc",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"var lenOfShc = jsonResponseBody._embedded.specialHandlingCodes.length;",
													"var expectedCarrier = pm.request.url.query.reference.carrierCode.value;",
													"",
													"pm.test(\"Verify that only the expected carrier code will be included in the result.\", function(){",
													"",
													"    for(var base = 0; base < lenOfShc; base++){",
													"        ",
													"        var actualCarrier = jsonResponseBody._embedded.specialHandlingCodes[base].carrier.code;",
													"        pm.expect(expectedCarrier).to.eql(actualCarrier);",
													"        ",
													"    }",
													"",
													"});",
													"",
													"function sendReq(nextPage){",
													"    ",
													"    pm.sendRequest(nextPage, function(error, response){",
													"                ",
													"        var jsonBody = response.json();",
													"        var lenOfShcs = jsonBody._embedded.specialHandlingCodes;",
													"                ",
													"        if(error){",
													"                    ",
													"            console.log(error);",
													"                    ",
													"        }else{",
													"",
													"            pm.test(\"Check the carrier code in the succeeding pages.\", function(){",
													"                        ",
													"                for(var baseShc = 0; baseShc < lenOfShcs; baseShc++){",
													"                            ",
													"                    var actualCarrierinTheSucceedingPages = jsonBody._embedded.specialHandlingCodes[baseShc].carrier.code;",
													"                    pm.expect(expectedCarrier).to.eql(actualCarrierinTheSucceedingPages);",
													"                            ",
													"                }",
													"                        ",
													"            });",
													"                    ",
													"        }",
													"                ",
													"    });",
													"}",
													"",
													"function sendRequestForTheSucceedingPages(){",
													"    ",
													"    var totalPages = jsonResponseBody.page.totalPages;",
													"    ",
													"    if(totalPages > 1){",
													"        ",
													"        for(var pageToExplore = 1; pageToExplore < totalPages; pageToExplore++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + pageToExplore;",
													"            var nextPage = {url : url,",
													"                        header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                               'accept' : 'application/json',",
													"                               'contentType' : 'application/json'",
													"                            },",
													"                        };",
													"                        ",
													"            sendReq(nextPage);",
													"        }",
													"        ",
													"    }",
													"}",
													"",
													"sendRequestForTheSucceedingPages();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?carrierCode=JL",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "carrierCode",
													"value": "JL"
												}
											]
										},
										"description": "Retrieve SHC record using carrier code as parameter"
									},
									"response": []
								},
								{
									"name": "POR-264: Retrieve SHC: GET: Multiple SHC record exist in CSP(with carrier and no carrier) & each SHC record belongs to diff. SHC Group: Parameter = code + carrierCode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "deb70a89-c032-4ca1-a031-d7a4ada389d3",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlSph\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "2e4e514a-eb55-4b64-8d2a-6f03578df126",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"var lenOfShc = jsonResponseBody._embedded.specialHandlingCodes.length;",
													"",
													"pm.test(\"Verify that only the expected carrier and SHC code will be included in the result.\", function(){",
													"    ",
													"    var expectedCarrier = pm.request.url.query.reference.carrierCode.value;",
													"    var expectedShc = pm.request.url.query.reference.code.value;",
													"    ",
													"    for(var base = 0; base < lenOfShc; base++){",
													"        ",
													"        var actualCarrier = jsonResponseBody._embedded.specialHandlingCodes[base].carrier.code;",
													"        var actualShc = jsonResponseBody._embedded.specialHandlingCodes[base].code;",
													"        ",
													"        pm.expect(expectedShc).to.eql(actualShc);",
													"        pm.expect(expectedCarrier).to.eql(actualCarrier);",
													"        ",
													"    }",
													"",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?code=AVI&carrierCode=JL",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "code",
													"value": "AVI"
												},
												{
													"key": "carrierCode",
													"value": "JL"
												}
											]
										},
										"description": "Retrieve SHC record using carrier code and shc code as parameters"
									},
									"response": []
								},
								{
									"name": "POR-265: Retrieve SHC: GET: Single SHC record exist in CSP with no Carrier: Parameter = code + carrierCode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "deb70a89-c032-4ca1-a031-d7a4ada389d3",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlSph\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4d52f30f-8ba8-4646-a8b9-5882e7bd9343",
												"exec": [
													"        pm.test(\"Check if the response code is '200' and does not have an error.\", function () {",
													"            pm.response.to.have.status(200);",
													"            pm.response.to.not.be.error;",
													"            pm.response.to.not.have.jsonBody('error');",
													"         });",
													"",
													"        var jsonBody = pm.response.json();",
													"",
													"        pm.test(\"Check if the response body is empty.\", function () {",
													"            pm.expect(jsonBody.page.totalElements).to.eql(0);",
													"            pm.expect(jsonBody.page.totalPages).to.eql(0);",
													"            pm.expect(jsonBody.page.number).to.eql(0);",
													"        });"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?code=BNG&carrierCode=JL",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "code",
													"value": "BNG"
												},
												{
													"key": "carrierCode",
													"value": "JL"
												}
											]
										},
										"description": "Retrieve SHC record using carrier code and shc code as parameters"
									},
									"response": []
								},
								{
									"name": "POR-266: Retrieve SHC: GET: Parameter = page = 0, size = 5 and sorted by code desc",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "deb70a89-c032-4ca1-a031-d7a4ada389d3",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlSph\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "3f60e664-47d7-40d2-95fb-034182c1a78f",
												"exec": [
													"pm.test(\"Check if the response code is '200' and does not have an error.\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.not.be.error;",
													"    pm.response.to.not.have.jsonBody('error');",
													"});",
													"",
													"var jsonRspBody = pm.response.json();",
													"",
													"function getShcCode(rspBody){",
													"    ",
													"    var arrShc = [];",
													"    var shcLen = rspBody._embedded.specialHandlingCodes.length;",
													"    ",
													"    for(var base = 0; base < shcLen; base++){",
													"        ",
													"        var shcCode = rspBody._embedded.specialHandlingCodes[base].code;",
													"        arrShc.push(shcCode);",
													"        ",
													"    }",
													"    ",
													"    return arrShc;",
													"    ",
													"}",
													"",
													"function test(rspBody){",
													"    ",
													"    var lenOfShcs = rspBody._embedded.specialHandlingCodes.length;",
													"    ",
													"    var sortedShc = getShcCode(rspBody).sort(function(a, b){",
													"            ",
													"        if (a > b) {",
													"            return -1;",
													"        }",
													"        if (b > a) {",
													"            return 1;",
													"        }",
													"            return 0;",
													"        });",
													"    ",
													"    pm.test(\"Check if SHC is sorted correctly.\", function(){",
													"        ",
													"        for(var base = 0; base < lenOfShcs; base++){",
													"            ",
													"            pm.expect(sortedShc[base]).to.eql(getShcCode(rspBody)[base]);",
													"        }",
													"    });",
													"}",
													"",
													"test(jsonRspBody);",
													"",
													"function sendGetReq(nextPage){",
													"    ",
													"    pm.sendRequest(nextPage, function(error, response){",
													"                ",
													"        var jsonBody = response.json();",
													"                ",
													"            if(error){",
													"                    ",
													"                console.log(error);",
													"                    ",
													"            }else{",
													"                ",
													"                test(jsonBody);",
													"            }",
													"                ",
													"    });",
													"}",
													"",
													"function sendRequestForTheSucceedingPages(){",
													"    ",
													"    var totalPages = jsonRspBody.page.totalPages;",
													"    ",
													"    if(totalPages > 1){",
													"        ",
													"        for(var pageToExplore = 1; pageToExplore < totalPages; pageToExplore++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + pageToExplore;",
													"            var nextPage = {url : url,",
													"                        header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                               'accept' : 'application/json',",
													"                               'contentType' : 'application/json'",
													"                            },",
													"                        };",
													"            ",
													"            sendGetReq(nextPage);",
													"        }",
													"        ",
													"    }",
													"}",
													"",
													"sendRequestForTheSucceedingPages();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?sort=key.code%2Cdesc",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "sort",
													"value": "key.code%2Cdesc"
												}
											]
										},
										"description": "Retrieve SHC record using page, size and sorting option as parameters"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative_Scenarios",
							"item": [
								{
									"name": "POR-267: Retrieve SHC: GET: Code does not exist in CSP: Parameter = code",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "deb70a89-c032-4ca1-a031-d7a4ada389d3",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlSph\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "86d296a2-00a1-4a02-825e-976596fb43d6",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonBody = pm.response.json();",
													"pm.test(\"Check if the response body is empty.\", function () {",
													"    pm.expect(jsonBody.page.totalElements).to.eql(0);",
													"    pm.expect(jsonBody.page.totalPages).to.eql(0);",
													"    pm.expect(jsonBody.page.number).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?code=BYE",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "code",
													"value": "BYE"
												}
											]
										},
										"description": "Negative_scenario: SHC code not existing in CSP."
									},
									"response": []
								},
								{
									"name": "POR-268: Retrieve SHC: GET: Carrier code does not exist in CSP: Parameter = carrierCode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "deb70a89-c032-4ca1-a031-d7a4ada389d3",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlSph\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "38c74340-a8e8-4f09-8c4c-492665fd44ae",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonBody = pm.response.json();",
													"pm.test(\"Check if the response body is empty.\", function () {",
													"    pm.expect(jsonBody.page.totalElements).to.eql(0);",
													"    pm.expect(jsonBody.page.totalPages).to.eql(0);",
													"    pm.expect(jsonBody.page.number).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?carrierCode=LP",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "carrierCode",
													"value": "LP"
												}
											]
										},
										"description": "Negative_scenario: Carrier code not existing in CSP."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"description": "Get special handling codes.",
					"_postman_isSubFolder": true
				},
				{
					"name": "POR-373",
					"item": [
						{
							"name": "Business_Scneario",
							"item": [
								{
									"name": "POR-224: Retrieve Participant information: GET: Shortname of the Main Agent",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "420bb6e1-c266-4835-81a7-426c110b495d",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlParticipants\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e74ee4af-8ecf-472a-8582-c2c276c4f79a",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonBody = pm.response.json();",
													"var lenOfAgentGroups = jsonBody._embedded.participants[0].agentGroups.length;",
													"",
													"function agentGroupShortname(){",
													"    ",
													"    var agentGrpArr = [];",
													"    for(var comparator = 0; comparator < lenOfAgentGroups; comparator++){",
													"        ",
													"        var shortname = jsonBody._embedded.participants[0].agentGroups[comparator].shortName;",
													"        agentGrpArr.push(shortname);",
													"        ",
													"    }",
													"    ",
													"    return agentGrpArr;",
													"}",
													"",
													"pm.test(\"Check if the shortname in the Agent Groups list are correct!\", function(){",
													"    ",
													"    var expectedShortName = [\"MLB01\", \"MLB02\", \"MLB03\", \"MLB04\"];",
													"",
													"    if(lenOfAgentGroups != expectedShortName.length){",
													"        ",
													"        throw console.log(\"Expected and actual count didn't match!\");",
													"        ",
													"    }",
													"    ",
													"    for(var baseCount = 0; baseCount < lenOfAgentGroups; baseCount++){",
													"        ",
													"        pm.expect(expectedShortName[baseCount]).to.eql(agentGroupShortname()[baseCount]);",
													"        ",
													"    }",
													"});",
													"",
													"pm.test(\"Check if the account in the reponse is same what is expected.\", function(){",
													"    ",
													"    var actAccount = jsonBody._embedded.participants[0].account;",
													"    var expAccount = \"2719846JP\";",
													"    ",
													"    pm.expect(expAccount).to.eql(actAccount);",
													"    ",
													"});",
													"",
													"pm.test(\"Check if the type of the Participant in the response is Agent.\", function(){",
													"    ",
													"    var typeLen = jsonBody._embedded.participants[0].type.length;",
													"    var arr = [];",
													"    ",
													"    if (typeLen > 1){",
													"        ",
													"        for(var base = 0; base < typeLen; base++){",
													"            ",
													"            var actType = jsonBody._embedded.participants[0].type[base];",
													"            arr.push(actType);",
													"        }",
													"        ",
													"        var expType = pm.request.url.query.reference.type.value;",
													"        var boltype = arr.includes(expType.toUpperCase());",
													"        ",
													"        if(boltype == false){",
													"            ",
													"            throw console.log(\"Expected type not in the list.\");",
													"        }",
													"        ",
													"    }else{",
													"        ",
													"        var actTypes = jsonBody._embedded.participants[0].type[0];",
													"        var expTypes = pm.request.url.query.reference.type.value;",
													"    ",
													"        pm.expect(expTypes.toUpperCase()).to.eql(actTypes);",
													"        ",
													"    }",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?aliases=MLB&type=agent",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "aliases",
													"value": "MLB"
												},
												{
													"key": "type",
													"value": "agent"
												}
											]
										},
										"description": "Retrieve Participant information: GET: Shortname of the Main Agent"
									},
									"response": []
								},
								{
									"name": "POR-226: Retrieve Participant information: GET: BSA Shortname",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "420bb6e1-c266-4835-81a7-426c110b495d",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlParticipants\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "c601ed9a-db1d-4687-a0b8-072090526ee6",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonBody = pm.response.json();",
													"",
													"pm.test(\"Check if the account in the reponse is same what is expected.\", function(){",
													"    ",
													"    var actAccount = jsonBody._embedded.participants[0].account;",
													"    var expAccount = \"2719847JP\";",
													"    ",
													"    pm.expect(expAccount).to.eql(actAccount);",
													"    ",
													"});",
													"",
													"pm.test(\"Check if Agent Groups property is not in the response.\", function(){",
													"    ",
													"    pm.expect(pm.response.text()).to.not.include('agentGroups');",
													"    ",
													"});",
													"",
													"pm.test(\"Check if the type of the Participant in the response is Shipper.\", function(){",
													"    ",
													"    var typeLen = jsonBody._embedded.participants[0].type.length;",
													"    var arr = [];",
													"    ",
													"    if (typeLen > 1){",
													"        ",
													"        for(var base = 0; base < typeLen; base++){",
													"            ",
													"            var actType = jsonBody._embedded.participants[0].type[base];",
													"            arr.push(actType);",
													"        }",
													"        ",
													"        var expType = pm.request.url.query.reference.type.value;",
													"        var boltype = arr.includes(expType.toUpperCase());",
													"        ",
													"        if(boltype == false){",
													"            ",
													"            throw console.log(\"Expected type not in the list.\");",
													"        }",
													"        ",
													"    }else{",
													"        ",
													"        var actTypes = jsonBody._embedded.participants[0].type[0];",
													"        var expTypes = pm.request.url.query.reference.type.value;",
													"    ",
													"        pm.expect(expTypes.toUpperCase()).to.eql(actTypes);",
													"        ",
													"    }",
													"    ",
													"});",
													"",
													"",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?aliases=MLB01&type=shipper",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "aliases",
													"value": "MLB01"
												},
												{
													"key": "type",
													"value": "shipper"
												}
											]
										},
										"description": "Retrieve Participant information: GET: BSA Shortname"
									},
									"response": []
								},
								{
									"name": "POR-245: Retrieve Participant information: GET: Consignee Shortname",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "420bb6e1-c266-4835-81a7-426c110b495d",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlParticipants\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f1da67be-a857-46c3-bad3-0829de21cc7a",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"function getAliases(){",
													"    ",
													"    var jsonBody = pm.response.json();",
													"    var lent = jsonBody._embedded.participants.length;",
													"    var arrAlias = [];",
													"    ",
													"    for(var base = 0; base < lent; base++){",
													"        ",
													"        var alias = jsonBody._embedded.participants[base].aliases[0];",
													"        arrAlias.push(alias);",
													"    }",
													"    ",
													"    return arrAlias;",
													"    ",
													"}",
													"",
													"function testParticipant(){",
													"    ",
													"    var jsonBody = pm.response.json();",
													"    var lent = jsonBody._embedded.participants.length;",
													"    ",
													"    pm.test(\"Check if the type of the Participant in the response is Consignee.\", function(){",
													"    ",
													"        if(lent > 1){",
													"            ",
													"            for(var basePart = 0; basePart < lent; basePart++){",
													"                ",
													"                var typeLen = jsonBody._embedded.participants[basePart].type.length;",
													"                var arr = [];",
													"        ",
													"                if (typeLen > 1){",
													"            ",
													"                    for(var base = 0; base < typeLen; base++){",
													"                        ",
													"                        var actType = jsonBody._embedded.participants[basePart].type[base];",
													"                        arr.push(actType);",
													"                    }",
													"                    ",
													"                    var expType = pm.request.url.query.reference.type.value;",
													"                    var boltype = arr.includes(expType.toUpperCase());",
													"                    ",
													"                    if(boltype == false){",
													"                        ",
													"                        throw console.log(\"Expected type not in the list.\");",
													"                    }",
													"                    ",
													"                }else{",
													"                    ",
													"                    var actTypes = jsonBody._embedded.participants[basePart].type[0];",
													"                    var expTypes = pm.request.url.query.reference.type.value;",
													"                ",
													"                    pm.expect(expTypes.toUpperCase()).to.eql(actTypes);",
													"                    ",
													"                }",
													"                ",
													"            }",
													"            ",
													"        }else{",
													"            ",
													"            var typeLen1 = jsonBody._embedded.participants[0].type.length;",
													"            var arr1 = [];",
													"        ",
													"            if (typeLen1 > 1){",
													"            ",
													"                for(var base1 = 0; base1 < typeLen1; base1++){",
													"                        ",
													"                    var actType1 = jsonBody._embedded.participants[0].type[base1];",
													"                    arr1.push(actType1);",
													"                }",
													"                    ",
													"                var expType1 = pm.request.url.query.reference.type.value;",
													"                var boltype1 = arr1.includes(expType1.toUpperCase());",
													"                    ",
													"                if(boltype1 == false){",
													"                        ",
													"                    throw console.log(\"Expected type not in the list.\");",
													"                }",
													"                    ",
													"            }else{",
													"                    ",
													"                var actTypes1 = jsonBody._embedded.participants[0].type[0];",
													"                var expTypes1 = pm.request.url.query.reference.type.value;",
													"                ",
													"                pm.expect(expTypes1.toUpperCase()).to.eql(actTypes1);",
													"                    ",
													"            }",
													"            ",
													"        }",
													"    ",
													"    });",
													"    ",
													"    pm.test(\"Check the Alias of the Participants in the list.\", function(){",
													"        ",
													"        var aliases = getAliases();",
													"        var len = getAliases().length;",
													"        var param = pm.request.url.query.reference.aliases.value;",
													"        ",
													"        for(var baseLen = 0; baseLen < len; baseLen++){",
													"            ",
													"            pm.expect(aliases[baseLen]).to.eql(param.toUpperCase());",
													"        }",
													"    });",
													"}",
													"",
													"testParticipant();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?aliases=MLB04&type=consignee",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "aliases",
													"value": "MLB04"
												},
												{
													"key": "type",
													"value": "consignee"
												}
											]
										},
										"description": "Retrieve Participant information: GET: Consignee Shortname"
									},
									"response": []
								},
								{
									"name": "POR-246: Retrieve Participant information: GET: Shortname of the Main Agent, page = 0, size = 5 and sorted by account in desc mode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "420bb6e1-c266-4835-81a7-426c110b495d",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlParticipants\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0123185b-948f-4d73-a707-8ca58e3e244a",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?type=notifier&page=0&size=5&sort=account%2Cdesc",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "type",
													"value": "notifier"
												},
												{
													"key": "page",
													"value": "0"
												},
												{
													"key": "size",
													"value": "5"
												},
												{
													"key": "sort",
													"value": "account%2Cdesc"
												}
											]
										},
										"description": "Retrieve Participant information: GET: Shortname of the Main Agent, page = 0, size = 5 and sorted by account in desc mode"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative_Scenario",
							"item": [
								{
									"name": "POR-227: Retrieve Participant information: GET: Non-existent BSA Shortname",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "420bb6e1-c266-4835-81a7-426c110b495d",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlParticipants\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4baf7e81-5361-4dba-ab56-c45b1757d2a3",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonBody = pm.response.json();",
													"",
													"pm.test(\"Check if the response body is empty.\", function () {",
													"    pm.expect(jsonBody.page.totalElements).to.eql(0);",
													"    pm.expect(jsonBody.page.totalPages).to.eql(0);",
													"    pm.expect(jsonBody.page.number).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?aliases=NEC001",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "aliases",
													"value": "NEC001"
												}
											]
										},
										"description": "Retrieve Participant information: GET: Non-existent BSA Shortname"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"description": "Master Data - CSP - Get Participant",
					"event": [
						{
							"listen": "prerequest",
							"script": {
								"id": "5a2530a7-b6a9-4f5a-b099-02f2a9569a06",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						},
						{
							"listen": "test",
							"script": {
								"id": "617e0ff2-e824-4fac-b27e-2308a4ff26a3",
								"type": "text/javascript",
								"exec": [
									""
								]
							}
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "POR-1075",
					"item": [
						{
							"name": "Business_Scenarios",
							"item": [
								{
									"name": "POR-2740: Retrieve DGR goods commodities: GET: Using UN Number as parameter full text",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "da41a6b2-1198-4094-abf5-3423b611e90a",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForDgrGoodsComm\"));",
													"eval(pm.globals.get('currentDate'));",
													"eval(pm.globals.get('dayMon'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0b7c342-f8b5-47ae-a66e-0d7d85e06188",
												"exec": [
													"pm.test(\"Check if the response code is '200' and does not have an error.\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.not.be.error;",
													"    pm.response.to.not.have.jsonBody('error');",
													"});",
													"",
													"var jsonResponseBody = pm.response.json();",
													"",
													"function getUnNumbers(rspBody){",
													"    ",
													"    var unNum = [];",
													"    var lenOfUn = rspBody._embedded.commodities.length;",
													"    ",
													"    for(var base = 0; base < lenOfUn; base++){",
													"        ",
													"        var un = rspBody._embedded.commodities[base].unNumber;",
													"        unNum.push(un);",
													"        ",
													"    }",
													"    ",
													"    return unNum;",
													"}",
													"",
													"console.log(getUnNumbers(jsonResponseBody));",
													"",
													"function checkStr(){",
													"    ",
													"    var lenUnNum = getUnNumbers(jsonResponseBody).length;",
													"    for(var base = 0; base < lenUnNum; base++){",
													"        ",
													"        var unNums = getUnNumbers(jsonResponseBody)[base];",
													"        var param = pm.request.url.query.reference.unNumber.value;",
													"        ",
													"        if(unNums != param){",
													"            ",
													"            throw console.log(unNums + \" not equal with. \" + param);",
													"            ",
													"        }",
													"    }",
													"}",
													"",
													"pm.test(\"Check if the UN Number is/are correct.\", function(){",
													"    ",
													"    checkStr();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?unNumber=2817",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "unNumber",
													"value": "2817"
												}
											]
										},
										"description": "Booking with Single Segment, non BUP, no SHC and no data Capture, loaded in Bulk/ no ULD. Use global_variable bookingId_1"
									},
									"response": []
								},
								{
									"name": "POR-2741: Retrieve DGR goods commodities: GET: Using UN Number as parameter partial text",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "da41a6b2-1198-4094-abf5-3423b611e90a",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForDgrGoodsComm\"));",
													"eval(pm.globals.get('currentDate'));",
													"eval(pm.globals.get('dayMon'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0b7c342-f8b5-47ae-a66e-0d7d85e06188",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"",
													"function getUnNumbers(rspBody){",
													"    ",
													"    var unNum = [];",
													"    var lenOfUn = rspBody._embedded.commodities.length;",
													"    ",
													"    for(var base = 0; base < lenOfUn; base++){",
													"        ",
													"        var un = rspBody._embedded.commodities[base].unNumber;",
													"        unNum.push(un);",
													"        ",
													"    }",
													"    ",
													"    return unNum;",
													"}",
													"",
													"console.log(getUnNumbers(jsonResponseBody));",
													"",
													"function checkStr(rspBody){",
													"    ",
													"    var lenUnNum = getUnNumbers(rspBody).length;",
													"    for(var base = 0; base < lenUnNum; base++){",
													"        ",
													"        var unNums = getUnNumbers(rspBody)[base];",
													"        var param = pm.request.url.query.reference.unNumber.value;",
													"        ",
													"        var comStr = unNums.substring(0,2);",
													"        if(comStr != param){",
													"            ",
													"            throw console.log(unNums + \" not equal with. \" + param);",
													"            ",
													"        }",
													"    }",
													"}",
													"",
													"pm.test(\"Check if the UN Number is/are correct.\", function(){",
													"    ",
													"    checkStr(jsonResponseBody);",
													"    ",
													"});",
													"",
													"function sendReq(nextPage){",
													"    ",
													"    pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"                console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"                var rspBod = res.json();",
													"                console.log (getUnNumbers(rspBod));",
													"                ",
													"                pm.test(\"Check if the UN Number is/are correct.\", function(){",
													"    ",
													"                    checkStr(rspBod);",
													"                    ",
													"                });",
													"                ",
													"            }",
													"            ",
													"        });",
													"    ",
													"}",
													"",
													"function sendRequest(){",
													"    ",
													"    var totPages = jsonResponseBody.page.totalPages;",
													"",
													"    if(totPages > 1){",
													"        ",
													"        for(var base = 1; base < totPages; base++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + base;",
													"            ",
													"            let nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            setTimeout(function(){sendReq(nextPage)}, 5000*base);",
													"        }",
													"        ",
													"    }",
													"}",
													"",
													"sendRequest();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?unNumber=28",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "unNumber",
													"value": "28"
												}
											]
										},
										"description": "Booking with Single Segment, non BUP, no SHC and no data Capture, loaded in Bulk/ no ULD. Use global_variable bookingId_1"
									},
									"response": []
								},
								{
									"name": "POR-2742: Retrieve DGR goods commodities: GET: Using Name as parameter full text",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "da41a6b2-1198-4094-abf5-3423b611e90a",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForDgrGoodsComm\"));",
													"eval(pm.globals.get('currentDate'));",
													"eval(pm.globals.get('dayMon'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0b7c342-f8b5-47ae-a66e-0d7d85e06188",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"",
													"function getUnNumbers(rspBody){",
													"    ",
													"    var unNum = [];",
													"    var lenOfUn = rspBody._embedded.commodities.length;",
													"    ",
													"    for(var base = 0; base < lenOfUn; base++){",
													"        ",
													"        var un = rspBody._embedded.commodities[base].name;",
													"        unNum.push(un);",
													"        ",
													"    }",
													"    ",
													"    return unNum;",
													"}",
													"",
													"console.log(getUnNumbers(jsonResponseBody));",
													"",
													"function checkStr(){",
													"    ",
													"    var lenUnNum = getUnNumbers(jsonResponseBody).length;",
													"    for(var base = 0; base < lenUnNum; base++){",
													"        ",
													"        var unNums = getUnNumbers(jsonResponseBody)[base];",
													"        var param1 = pm.request.url.query.reference.name.value;",
													"        var param = param1.toUpperCase();",
													"        ",
													"        if(unNums != param){",
													"            ",
													"            throw console.log(unNums + \" not equal with. \" + param);",
													"            ",
													"        }",
													"    }",
													"}",
													"",
													"pm.test(\"Check if the UN Number is/are correct.\", function(){",
													"    ",
													"    checkStr();",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?name=Tripropylene",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "name",
													"value": "Tripropylene"
												}
											]
										},
										"description": "Booking with Single Segment, non BUP, no SHC and no data Capture, loaded in Bulk/ no ULD. Use global_variable bookingId_1"
									},
									"response": []
								},
								{
									"name": "POR-2743: Retrieve DGR goods commodities: GET: Using Name as parameter partial text",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "da41a6b2-1198-4094-abf5-3423b611e90a",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForDgrGoodsComm\"));",
													"eval(pm.globals.get('currentDate'));",
													"eval(pm.globals.get('dayMon'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0b7c342-f8b5-47ae-a66e-0d7d85e06188",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"",
													"function getUnNumbers(rspBody){",
													"    ",
													"    var unNum = [];",
													"    var lenOfUn = rspBody._embedded.commodities.length;",
													"    ",
													"    for(var base = 0; base < lenOfUn; base++){",
													"        ",
													"        var un = rspBody._embedded.commodities[base].name;",
													"        unNum.push(un);",
													"        ",
													"    }",
													"    ",
													"    return unNum;",
													"}",
													"",
													"console.log(getUnNumbers(jsonResponseBody));",
													"",
													"function checkStr(rspBody){",
													"    ",
													"    var lenUnNum = getUnNumbers(rspBody).length;",
													"    for(var base = 0; base < lenUnNum; base++){",
													"        ",
													"        var unNums = getUnNumbers(rspBody)[base];",
													"        var param1 = pm.request.url.query.reference.name.value;",
													"        var param = param1.toUpperCase();",
													"        var strLen = param.length;",
													"        var comStr = unNums.substring(0, strLen);",
													"        ",
													"        if(comStr != param){",
													"            ",
													"            throw console.log(comStr + \" not equal with. \" + param);",
													"            ",
													"        }",
													"    }",
													"}",
													"",
													"pm.test(\"Check if the UN Number is/are correct.\", function(){",
													"    ",
													"    checkStr(jsonResponseBody);",
													"    ",
													"});",
													"",
													"function sendReq(nextPage){",
													"    ",
													"    pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"                console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"                var rspBod = res.json();",
													"                console.log (getUnNumbers(rspBod));",
													"                ",
													"                pm.test(\"Check if the UN Number is/are correct.\", function(){",
													"    ",
													"                    checkStr(rspBod);",
													"                    ",
													"                });",
													"                ",
													"            }",
													"            ",
													"        });",
													"    ",
													"}",
													"",
													"function sendRequest(){",
													"    ",
													"    var totPages = jsonResponseBody.page.totalPages;",
													"",
													"    if(totPages > 1){",
													"        ",
													"        for(var base = 1; base < totPages; base++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + base;",
													"            ",
													"            var nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            sendReq(nextPage);",
													"        }",
													"        ",
													"    }",
													"}",
													"",
													"sendRequest();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?name=trip",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "name",
													"value": "trip"
												}
											]
										},
										"description": "Booking with Single Segment, non BUP, no SHC and no data Capture, loaded in Bulk/ no ULD. Use global_variable bookingId_1"
									},
									"response": []
								},
								{
									"name": "POR-2744: Retrieve DGR goods commodities: GET: Using Source as parameter full text",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "da41a6b2-1198-4094-abf5-3423b611e90a",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForDgrGoodsComm\"));",
													"eval(pm.globals.get('currentDate'));",
													"eval(pm.globals.get('dayMon'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0b7c342-f8b5-47ae-a66e-0d7d85e06188",
												"exec": [
													"pm.test(\"Check if the response code is '200' and does not have an error.\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.not.be.error;",
													"    pm.response.to.not.have.jsonBody('error');",
													"});",
													"",
													"var jsonResponseBody = pm.response.json();",
													"",
													"function getUnNumbers(rspBody){",
													"    ",
													"    var unNum = [];",
													"    var lenOfUn = rspBody._embedded.commodities.length;",
													"    ",
													"    for(var base = 0; base < lenOfUn; base++){",
													"        ",
													"        var un = rspBody._embedded.commodities[base].source;",
													"        unNum.push(un);",
													"        ",
													"    }",
													"    ",
													"    return unNum;",
													"}",
													"",
													"console.log(getUnNumbers(jsonResponseBody));",
													"",
													"function checkStr(rspBody){",
													"    ",
													"    var lenUnNum = getUnNumbers(rspBody).length;",
													"    for(var base = 0; base < lenUnNum; base++){",
													"        ",
													"        var unNums = getUnNumbers(rspBody)[base];",
													"        var param1 = pm.request.url.query.reference.source.value;",
													"        var param = param1.toUpperCase();",
													"        ",
													"        if(unNums != param){",
													"            ",
													"            throw console.log(comStr + \" not equal with. \" + param);",
													"            ",
													"        }",
													"    }",
													"}",
													"",
													"pm.test(\"Check if the UN Number is/are correct.\", function(){",
													"    ",
													"    checkStr(jsonResponseBody);",
													"    ",
													"});",
													"",
													"function sendReq(nextPage){",
													"    ",
													"    pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"                console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"                var rspBod = res.json();",
													"                console.log (getUnNumbers(rspBod));",
													"                ",
													"                pm.test(\"Check if the UN Number is/are correct.\", function(){",
													"    ",
													"                    checkStr(rspBod);",
													"                    ",
													"                });",
													"                ",
													"            }",
													"            ",
													"        });",
													"    ",
													"}",
													"",
													"function sendRequest(){",
													"    ",
													"    var totPages = jsonResponseBody.page.totalPages;",
													"",
													"    if(totPages > 1){",
													"        ",
													"        for(var base = 1; base < totPages; base++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + base;",
													"            ",
													"            let nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            setTimeout(function(){sendReq(nextPage)}, 3000*base);",
													"        }",
													"        ",
													"    }",
													"}",
													"",
													"sendRequest();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?source=IATA",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "source",
													"value": "IATA"
												}
											]
										},
										"description": "Booking with Single Segment, non BUP, no SHC and no data Capture, loaded in Bulk/ no ULD. Use global_variable bookingId_1"
									},
									"response": []
								},
								{
									"name": "POR-2747: Retrieve DGR goods commodities: GET: Using Country code as parameter full text",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "da41a6b2-1198-4094-abf5-3423b611e90a",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForDgrGoodsComm\"));",
													"eval(pm.globals.get('currentDate'));",
													"eval(pm.globals.get('dayMon'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0b7c342-f8b5-47ae-a66e-0d7d85e06188",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"",
													"function getTotalElements(){",
													"    ",
													"    var totElem = jsonResponseBody.page.totalElements;",
													"    ",
													"    if(totElem != 2727){",
													"        throw console.log('Count mismatch.');",
													"    }",
													"}",
													"",
													"pm.test(\"Check the total element count.\", function(){",
													"    ",
													"    getTotalElements();",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?countryCode=US",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "countryCode",
													"value": "US"
												}
											]
										},
										"description": "Booking with Single Segment, non BUP, no SHC and no data Capture, loaded in Bulk/ no ULD. Use global_variable bookingId_1"
									},
									"response": []
								},
								{
									"name": "POR-2749: Retrieve DGR goods commodities: GET: Using Aircraft type as parameter full text",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "da41a6b2-1198-4094-abf5-3423b611e90a",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForDgrGoodsComm\"));",
													"eval(pm.globals.get('currentDate'));",
													"eval(pm.globals.get('dayMon'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0b7c342-f8b5-47ae-a66e-0d7d85e06188",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"",
													"function getUnNumbers(rspBody){",
													"    ",
													"    var unNum = [];",
													"    var lenOfUn = rspBody._embedded.commodities.length;",
													"    ",
													"    for(var base = 0; base < lenOfUn; base++){",
													"        ",
													"        var un = rspBody._embedded.commodities[base].aircraftType;",
													"        unNum.push(un);",
													"        ",
													"    }",
													"    ",
													"    return unNum;",
													"}",
													"",
													"console.log(getUnNumbers(jsonResponseBody));",
													"",
													"function checkStr(rspBody){",
													"    ",
													"    var lenUnNum = getUnNumbers(rspBody).length;",
													"    for(var base = 0; base < lenUnNum; base++){",
													"        ",
													"        var unNums1 = getUnNumbers(rspBody)[base];",
													"        var unNums = unNums1.toUpperCase();",
													"        var param1 = pm.request.url.query.reference.aircraftType.value;",
													"        var param = param1.toUpperCase();",
													"        ",
													"        if(unNums != param){",
													"            ",
													"            throw console.log(unNums + \" not equal with. \" + param);",
													"            ",
													"        }",
													"    }",
													"}",
													"",
													"pm.test(\"Check if the UN Number is/are correct.\", function(){",
													"    ",
													"    checkStr(jsonResponseBody);",
													"    ",
													"});",
													"",
													"function sendReq(nextPage){",
													"    ",
													"    pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"                console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"                var rspBod = res.json();",
													"                console.log (getUnNumbers(rspBod));",
													"                ",
													"                pm.test(\"Check if the UN Number is/are correct.\", function(){",
													"    ",
													"                    checkStr(rspBod);",
													"                    ",
													"                });",
													"                ",
													"            }",
													"            ",
													"        });",
													"    ",
													"}",
													"",
													"function sendRequest(){",
													"    ",
													"    var totPages = jsonResponseBody.page.totalPages;",
													"",
													"    if(totPages > 1){",
													"        ",
													"        for(var base = 1; base < totPages; base++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + base;",
													"            ",
													"            let nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            setTimeout(function(){sendReq(nextPage)}, 3000*base);",
													"        }",
													"        ",
													"    }",
													"}",
													"",
													"sendRequest();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?aircraftType=freighter",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "aircraftType",
													"value": "freighter"
												}
											]
										},
										"description": "Booking with Single Segment, non BUP, no SHC and no data Capture, loaded in Bulk/ no ULD. Use global_variable bookingId_1"
									},
									"response": []
								},
								{
									"name": "POR-2751: Retrieve DGR goods commodities: GET: Using Package group as parameter full text",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "da41a6b2-1198-4094-abf5-3423b611e90a",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForDgrGoodsComm\"));",
													"eval(pm.globals.get('currentDate'));",
													"eval(pm.globals.get('dayMon'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0b7c342-f8b5-47ae-a66e-0d7d85e06188",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"",
													"function getUnNumbers(rspBody){",
													"    ",
													"    var unNum = [];",
													"    var lenOfUn = rspBody._embedded.commodities.length;",
													"    ",
													"    for(var base = 0; base < lenOfUn; base++){",
													"        ",
													"        var un = rspBody._embedded.commodities[base].packageGroup;",
													"        unNum.push(un);",
													"        ",
													"    }",
													"    ",
													"    return unNum;",
													"}",
													"",
													"console.log(getUnNumbers(jsonResponseBody));",
													"",
													"function checkStr(rspBody){",
													"    ",
													"    var lenUnNum = getUnNumbers(rspBody).length;",
													"    for(var base = 0; base < lenUnNum; base++){",
													"        ",
													"        var unNums1 = getUnNumbers(rspBody)[base];",
													"        var unNums = unNums1.toUpperCase();",
													"        var param1 = pm.request.url.query.reference.packageGroup.value;",
													"        var param = param1.toUpperCase();",
													"        ",
													"        if(unNums != param){",
													"            ",
													"            throw console.log(unNums + \" not equal with. \" + param);",
													"            ",
													"        }",
													"    }",
													"}",
													"",
													"pm.test(\"Check if the UN Number is/are correct.\", function(){",
													"    ",
													"    checkStr(jsonResponseBody);",
													"    ",
													"});",
													"",
													"function sendReq(nextPage){",
													"    ",
													"    pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"                console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"                var rspBod = res.json();",
													"                console.log (getUnNumbers(rspBod));",
													"                ",
													"                pm.test(\"Check if the UN Number is/are correct.\", function(){",
													"    ",
													"                    checkStr(rspBod);",
													"                    ",
													"                });",
													"                ",
													"            }",
													"            ",
													"        });",
													"    ",
													"}",
													"",
													"function sendRequest(){",
													"    ",
													"    var totPages = jsonResponseBody.page.totalPages;",
													"",
													"    if(totPages > 1){",
													"        ",
													"        for(var base = 1; base < totPages; base++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + base;",
													"            ",
													"            let nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            setTimeout(function(){sendReq(nextPage)}, 3000*base);",
													"        }",
													"        ",
													"    }",
													"}",
													"",
													"sendRequest();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?packageGroup=III",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "packageGroup",
													"value": "III"
												}
											]
										},
										"description": "Booking with Single Segment, non BUP, no SHC and no data Capture, loaded in Bulk/ no ULD. Use global_variable bookingId_1"
									},
									"response": []
								},
								{
									"name": "POR-2752: Retrieve DGR goods commodities: GET: Using Package group as parameter partial text",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "da41a6b2-1198-4094-abf5-3423b611e90a",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForDgrGoodsComm\"));",
													"eval(pm.globals.get('currentDate'));",
													"eval(pm.globals.get('dayMon'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0b7c342-f8b5-47ae-a66e-0d7d85e06188",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"",
													"function getUnNumbers(rspBody){",
													"    ",
													"    var unNum = [];",
													"    var lenOfUn = rspBody._embedded.commodities.length;",
													"    ",
													"    for(var base = 0; base < lenOfUn; base++){",
													"        ",
													"        var un = rspBody._embedded.commodities[base].packageGroup;",
													"        unNum.push(un);",
													"        ",
													"    }",
													"    ",
													"    return unNum;",
													"}",
													"",
													"console.log(getUnNumbers(jsonResponseBody));",
													"",
													"function checkStr(rspBody){",
													"    ",
													"    var lenUnNum = getUnNumbers(rspBody).length;",
													"    for(var base = 0; base < lenUnNum; base++){",
													"        ",
													"        var unNums = getUnNumbers(rspBody)[base];",
													"        var param1 = pm.request.url.query.reference.packageGroup.value;",
													"        var param = param1.toUpperCase();",
													"        var strLen = param.length;",
													"        var comStr = unNums.substring(0, strLen);",
													"        ",
													"        if(comStr != param){",
													"            ",
													"            throw console.log(comStr + \" not equal with. \" + param);",
													"            ",
													"        }",
													"    }",
													"}",
													"",
													"pm.test(\"Check if the UN Number is/are correct.\", function(){",
													"    ",
													"    checkStr(jsonResponseBody);",
													"    ",
													"});",
													"",
													"function sendReq(nextPage){",
													"    ",
													"    pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"                console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"                var rspBod = res.json();",
													"                console.log (getUnNumbers(rspBod));",
													"                ",
													"                pm.test(\"Check if the UN Number is/are correct.\", function(){",
													"    ",
													"                    checkStr(rspBod);",
													"                    ",
													"                });",
													"                ",
													"            }",
													"            ",
													"        });",
													"    ",
													"}",
													"",
													"function sendRequest(){",
													"    ",
													"    var totPages = jsonResponseBody.page.totalPages;",
													"",
													"    if(totPages > 1){",
													"        ",
													"        for(var base = 1; base < totPages; base++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + base;",
													"            ",
													"            let nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            setTimeout(function(){sendReq(nextPage)}, 3000*base);",
													"        }",
													"        ",
													"    }",
													"}",
													"",
													"sendRequest();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?packageGroup=ii",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "packageGroup",
													"value": "ii"
												}
											]
										},
										"description": "Booking with Single Segment, non BUP, no SHC and no data Capture, loaded in Bulk/ no ULD. Use global_variable bookingId_1"
									},
									"response": []
								},
								{
									"name": "POR-2753: Retrieve DGR goods commodities: GET: Using SHC as parameter full text",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "da41a6b2-1198-4094-abf5-3423b611e90a",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForDgrGoodsComm\"));",
													"eval(pm.globals.get('currentDate'));",
													"eval(pm.globals.get('dayMon'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0b7c342-f8b5-47ae-a66e-0d7d85e06188",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"",
													"function getUnNumbers(rspBody){",
													"    ",
													"    var unNum = [];",
													"    var lenOfUn = rspBody._embedded.commodities.length;",
													"    ",
													"    for(var base = 0; base < lenOfUn; base++){",
													"        ",
													"        var un = rspBody._embedded.commodities[base].specialHandling.code;",
													"        unNum.push(un);",
													"        ",
													"    }",
													"    ",
													"    return unNum;",
													"}",
													"",
													"console.log(getUnNumbers(jsonResponseBody));",
													"",
													"function checkStr(rspBody){",
													"    ",
													"    var lenUnNum = getUnNumbers(rspBody).length;",
													"    for(var base = 0; base < lenUnNum; base++){",
													"        ",
													"        var unNums1 = getUnNumbers(rspBody)[base];",
													"        var unNums = unNums1.toUpperCase();",
													"        var param1 = pm.request.url.query.reference.specialHandlingCode.value;",
													"        var param = param1.toUpperCase();",
													"        ",
													"        if(unNums != param){",
													"            ",
													"            throw console.log(unNums + \" not equal with. \" + param);",
													"            ",
													"        }",
													"    }",
													"}",
													"",
													"pm.test(\"Check if the UN Number is/are correct.\", function(){",
													"    ",
													"    checkStr(jsonResponseBody);",
													"    ",
													"});",
													"",
													"function sendReq(nextPage){",
													"    ",
													"    pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"                console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"                var rspBod = res.json();",
													"                console.log (getUnNumbers(rspBod));",
													"                ",
													"                pm.test(\"Check if the UN Number is/are correct.\", function(){",
													"    ",
													"                    checkStr(rspBod);",
													"                    ",
													"                });",
													"                ",
													"            }",
													"            ",
													"        });",
													"    ",
													"}",
													"",
													"function sendRequest(){",
													"    ",
													"    var totPages = jsonResponseBody.page.totalPages;",
													"",
													"    if(totPages > 1){",
													"        ",
													"        for(var base = 1; base < totPages; base++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + base;",
													"            ",
													"            let nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            setTimeout(function(){sendReq(nextPage)}, 3000*base);",
													"        }",
													"        ",
													"    }",
													"}",
													"",
													"sendRequest();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?specialHandlingCode=RFL",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "specialHandlingCode",
													"value": "RFL"
												}
											]
										},
										"description": "Booking with Single Segment, non BUP, no SHC and no data Capture, loaded in Bulk/ no ULD. Use global_variable bookingId_1"
									},
									"response": []
								},
								{
									"name": "POR-2754: Retrieve DGR goods commodities: GET: Using SHC as parameter partial text",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "da41a6b2-1198-4094-abf5-3423b611e90a",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForDgrGoodsComm\"));",
													"eval(pm.globals.get('currentDate'));",
													"eval(pm.globals.get('dayMon'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0b7c342-f8b5-47ae-a66e-0d7d85e06188",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"",
													"function getUnNumbers(rspBody){",
													"    ",
													"    var unNum = [];",
													"    var lenOfUn = rspBody._embedded.commodities.length;",
													"    ",
													"    for(var base = 0; base < lenOfUn; base++){",
													"        ",
													"        var un = rspBody._embedded.commodities[base].specialHandling.code;",
													"        unNum.push(un);",
													"        ",
													"    }",
													"    ",
													"    return unNum;",
													"}",
													"",
													"console.log(getUnNumbers(jsonResponseBody));",
													"",
													"function checkStr(rspBody){",
													"    ",
													"    var lenUnNum = getUnNumbers(rspBody).length;",
													"    for(var base = 0; base < lenUnNum; base++){",
													"        ",
													"        var unNums = getUnNumbers(rspBody)[base];",
													"        var param1 = pm.request.url.query.reference.specialHandlingCode.value;",
													"        var param = param1.toUpperCase();",
													"        var strLen = param.length;",
													"        var comStr = unNums.substring(0, strLen);",
													"        ",
													"        if(comStr != param){",
													"            ",
													"            throw console.log(comStr + \" not equal with. \" + param);",
													"            ",
													"        }",
													"    }",
													"}",
													"",
													"pm.test(\"Check if the UN Number is/are correct.\", function(){",
													"    ",
													"    checkStr(jsonResponseBody);",
													"    ",
													"});",
													"",
													"function sendReq(nextPage){",
													"    ",
													"    pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"                console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"                var rspBod = res.json();",
													"                console.log (getUnNumbers(rspBod));",
													"                ",
													"                pm.test(\"Check if the UN Number is/are correct.\", function(){",
													"    ",
													"                    checkStr(rspBod);",
													"                    ",
													"                });",
													"                ",
													"            }",
													"            ",
													"        });",
													"    ",
													"}",
													"",
													"function sendRequest(){",
													"    ",
													"    var totPages = jsonResponseBody.page.totalPages;",
													"",
													"    if(totPages > 1){",
													"        ",
													"        for(var base = 1; base < totPages; base++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + base;",
													"            ",
													"            let nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            setTimeout(function(){sendReq(nextPage)}, 3000*base);",
													"        }",
													"        ",
													"    }",
													"}",
													"",
													"sendRequest();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?specialHandlingCode=rf",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "specialHandlingCode",
													"value": "rf"
												}
											]
										},
										"description": "Booking with Single Segment, non BUP, no SHC and no data Capture, loaded in Bulk/ no ULD. Use global_variable bookingId_1"
									},
									"response": []
								},
								{
									"name": "POR-2755: Retrieve DGR goods commodities: GET: Using Class as parameter full text",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "da41a6b2-1198-4094-abf5-3423b611e90a",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForDgrGoodsComm\"));",
													"eval(pm.globals.get('currentDate'));",
													"eval(pm.globals.get('dayMon'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0b7c342-f8b5-47ae-a66e-0d7d85e06188",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"",
													"function getUnNumbers(rspBody){",
													"    ",
													"    var unNum = [];",
													"    var lenOfUn = rspBody._embedded.commodities.length;",
													"    ",
													"    for(var base = 0; base < lenOfUn; base++){",
													"        ",
													"        var un = rspBody._embedded.commodities[base].class;",
													"        unNum.push(un);",
													"        ",
													"    }",
													"    ",
													"    return unNum;",
													"}",
													"",
													"console.log(getUnNumbers(jsonResponseBody));",
													"",
													"function checkStr(rspBody){",
													"    ",
													"    var lenUnNum = getUnNumbers(rspBody).length;",
													"    for(var base = 0; base < lenUnNum; base++){",
													"        ",
													"        var unNums1 = getUnNumbers(rspBody)[base];",
													"        var unNums = unNums1.toUpperCase();",
													"        var param1 = pm.request.url.query.reference.class.value;",
													"        var param = param1.toUpperCase();",
													"        ",
													"        if(unNums != param){",
													"            ",
													"            throw console.log(unNums + \" not equal with. \" + param);",
													"            ",
													"        }",
													"    }",
													"}",
													"",
													"pm.test(\"Check if the UN Number is/are correct.\", function(){",
													"    ",
													"    checkStr(jsonResponseBody);",
													"    ",
													"});",
													"",
													"function sendReq(nextPage){",
													"    ",
													"    pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"                console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"                var rspBod = res.json();",
													"                console.log (getUnNumbers(rspBod));",
													"                ",
													"                pm.test(\"Check if the UN Number is/are correct.\", function(){",
													"    ",
													"                    checkStr(rspBod);",
													"                    ",
													"                });",
													"                ",
													"            }",
													"            ",
													"        });",
													"    ",
													"}",
													"",
													"function sendRequest(){",
													"    ",
													"    var totPages = jsonResponseBody.page.totalPages;",
													"",
													"    if(totPages > 1){",
													"        ",
													"        for(var base = 1; base < totPages; base++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + base;",
													"            ",
													"            let nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            setTimeout(function(){sendReq(nextPage)}, 3000*base);",
													"        }",
													"        ",
													"    }",
													"}",
													"",
													"sendRequest();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?class=8",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "class",
													"value": "8"
												}
											]
										},
										"description": "Booking with Single Segment, non BUP, no SHC and no data Capture, loaded in Bulk/ no ULD. Use global_variable bookingId_1"
									},
									"response": []
								},
								{
									"name": "POR-2756: Retrieve DGR goods commodities: GET: Using Class as parameter partial text",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "da41a6b2-1198-4094-abf5-3423b611e90a",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForDgrGoodsComm\"));",
													"eval(pm.globals.get('currentDate'));",
													"eval(pm.globals.get('dayMon'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0b7c342-f8b5-47ae-a66e-0d7d85e06188",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"",
													"function getUnNumbers(rspBody){",
													"    ",
													"    var unNum = [];",
													"    var lenOfUn = rspBody._embedded.commodities.length;",
													"    ",
													"    for(var base = 0; base < lenOfUn; base++){",
													"        ",
													"        var un = rspBody._embedded.commodities[base].class;",
													"        unNum.push(un);",
													"        ",
													"    }",
													"    ",
													"    return unNum;",
													"}",
													"",
													"console.log(getUnNumbers(jsonResponseBody));",
													"",
													"function checkStr(rspBody){",
													"    ",
													"    var lenUnNum = getUnNumbers(rspBody).length;",
													"    for(var base = 0; base < lenUnNum; base++){",
													"        ",
													"        var unNums = getUnNumbers(rspBody)[base];",
													"        var param1 = pm.request.url.query.reference.class.value;",
													"        var param = param1.toUpperCase();",
													"        var strLen = param.length;",
													"        var comStr = unNums.substring(0, strLen);",
													"        ",
													"        if(comStr != param){",
													"            ",
													"            throw console.log(comStr + \" not equal with. \" + param);",
													"            ",
													"        }",
													"    }",
													"}",
													"",
													"pm.test(\"Check if the UN Number is/are correct.\", function(){",
													"    ",
													"    checkStr(jsonResponseBody);",
													"    ",
													"});",
													"",
													"function sendReq(nextPage){",
													"    ",
													"    pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"                console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"                var rspBod = res.json();",
													"                console.log (getUnNumbers(rspBod));",
													"                ",
													"                pm.test(\"Check if the UN Number is/are correct.\", function(){",
													"    ",
													"                    checkStr(rspBod);",
													"                    ",
													"                });",
													"                ",
													"            }",
													"            ",
													"        });",
													"    ",
													"}",
													"",
													"function sendRequest(){",
													"    ",
													"    var totPages = jsonResponseBody.page.totalPages;",
													"",
													"    if(totPages > 1){",
													"        ",
													"        for(var base = 1; base < totPages; base++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + base;",
													"            ",
													"            let nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            setTimeout(function(){sendReq(nextPage)}, 3000*base);",
													"        }",
													"        ",
													"    }",
													"}",
													"",
													"sendRequest();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?class=6",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "class",
													"value": "6"
												}
											]
										},
										"description": "Booking with Single Segment, non BUP, no SHC and no data Capture, loaded in Bulk/ no ULD. Use global_variable bookingId_1"
									},
									"response": []
								},
								{
									"name": "POR-2757: Retrieve DGR goods commodities: GET: Using Reverse logistics category as parameter full text",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "da41a6b2-1198-4094-abf5-3423b611e90a",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForDgrGoodsComm\"));",
													"eval(pm.globals.get('currentDate'));",
													"eval(pm.globals.get('dayMon'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0b7c342-f8b5-47ae-a66e-0d7d85e06188",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"",
													"function getUnNumbers(rspBody){",
													"    ",
													"    var unNum = [];",
													"    var lenOfUn = rspBody._embedded.commodities.length;",
													"    ",
													"    for(var base = 0; base < lenOfUn; base++){",
													"        ",
													"        var un = rspBody._embedded.commodities[base].reverseLogisticsCategory;",
													"        unNum.push(un);",
													"        ",
													"    }",
													"    ",
													"    return unNum;",
													"}",
													"",
													"console.log(getUnNumbers(jsonResponseBody));",
													"",
													"function checkStr(rspBody){",
													"    ",
													"    var lenUnNum = getUnNumbers(rspBody).length;",
													"    for(var base = 0; base < lenUnNum; base++){",
													"        ",
													"        var unNums1 = getUnNumbers(rspBody)[base];",
													"        var unNums = unNums1.toUpperCase();",
													"        var param1 = pm.request.url.query.reference.reverseLogisticsCategory.value;",
													"        var param = param1.toUpperCase();",
													"        ",
													"        if(unNums != param){",
													"            ",
													"            throw console.log(unNums + \" not equal with. \" + param);",
													"            ",
													"        }",
													"    }",
													"}",
													"",
													"pm.test(\"Check if the UN Number is/are correct.\", function(){",
													"    ",
													"    checkStr(jsonResponseBody);",
													"    ",
													"});",
													"",
													"function sendReq(nextPage){",
													"    ",
													"    pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"                console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"                var rspBod = res.json();",
													"                console.log (getUnNumbers(rspBod));",
													"                ",
													"                pm.test(\"Check if the UN Number is/are correct.\", function(){",
													"    ",
													"                    checkStr(rspBod);",
													"                    ",
													"                });",
													"                ",
													"            }",
													"            ",
													"        });",
													"    ",
													"}",
													"",
													"function sendRequest(){",
													"    ",
													"    var totPages = jsonResponseBody.page.totalPages;",
													"",
													"    if(totPages > 1){",
													"        ",
													"        for(var base = 1; base < totPages; base++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + base;",
													"            ",
													"            var nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            sendReq(nextPage);",
													"        }",
													"        ",
													"    }",
													"}",
													"",
													"sendRequest();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?reverseLogisticsCategory=iii",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "reverseLogisticsCategory",
													"value": "iii"
												}
											]
										},
										"description": "Booking with Single Segment, non BUP, no SHC and no data Capture, loaded in Bulk/ no ULD. Use global_variable bookingId_1"
									},
									"response": []
								},
								{
									"name": "POR-2758: Retrieve DGR goods commodities: GET: Using Reverse logistics category as parameter partial text",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "da41a6b2-1198-4094-abf5-3423b611e90a",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForDgrGoodsComm\"));",
													"eval(pm.globals.get('currentDate'));",
													"eval(pm.globals.get('dayMon'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0b7c342-f8b5-47ae-a66e-0d7d85e06188",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"",
													"function getUnNumbers(rspBody){",
													"    ",
													"    var unNum = [];",
													"    var lenOfUn = rspBody._embedded.commodities.length;",
													"    ",
													"    for(var base = 0; base < lenOfUn; base++){",
													"        ",
													"        var un = rspBody._embedded.commodities[base].reverseLogisticsCategory;",
													"        unNum.push(un);",
													"        ",
													"    }",
													"    ",
													"    return unNum;",
													"}",
													"",
													"console.log(getUnNumbers(jsonResponseBody));",
													"",
													"function checkStr(rspBody){",
													"    ",
													"    var lenUnNum = getUnNumbers(rspBody).length;",
													"    for(var base = 0; base < lenUnNum; base++){",
													"        ",
													"        var unNums = getUnNumbers(rspBody)[base];",
													"        var param1 = pm.request.url.query.reference.reverseLogisticsCategory.value;",
													"        var param = param1.toUpperCase();",
													"        var strLen = param.length;",
													"        var comStr = unNums.substring(0, strLen);",
													"        ",
													"        if(comStr != param){",
													"            ",
													"            throw console.log(comStr + \" not equal with. \" + param);",
													"            ",
													"        }",
													"    }",
													"}",
													"",
													"pm.test(\"Check if the UN Number is/are correct.\", function(){",
													"    ",
													"    checkStr(jsonResponseBody);",
													"    ",
													"});",
													"",
													"function sendReq(nextPage){",
													"    ",
													"    pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"                console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"                var rspBod = res.json();",
													"                console.log (getUnNumbers(rspBod));",
													"                ",
													"                pm.test(\"Check if the UN Number is/are correct.\", function(){",
													"    ",
													"                    checkStr(rspBod);",
													"                    ",
													"                });",
													"                ",
													"            }",
													"            ",
													"        });",
													"    ",
													"}",
													"",
													"function sendRequest(){",
													"    ",
													"    var totPages = jsonResponseBody.page.totalPages;",
													"",
													"    if(totPages > 1){",
													"        ",
													"        for(var base = 1; base < totPages; base++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + base;",
													"            ",
													"            let nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            setTimeout(function(){sendReq(nextPage)}, 3000*base);",
													"        }",
													"        ",
													"    }",
													"}",
													"",
													"sendRequest();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?reverseLogisticsCategory=II",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "reverseLogisticsCategory",
													"value": "II"
												}
											]
										},
										"description": "Booking with Single Segment, non BUP, no SHC and no data Capture, loaded in Bulk/ no ULD. Use global_variable bookingId_1"
									},
									"response": []
								},
								{
									"name": "POR-2758: Retrieve DGR goods commodities: GET: Search All",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "da41a6b2-1198-4094-abf5-3423b611e90a",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForDgrGoodsComm\"));",
													"eval(pm.globals.get('currentDate'));",
													"eval(pm.globals.get('dayMon'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0b7c342-f8b5-47ae-a66e-0d7d85e06188",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}",
											"host": [
												"{{builtUrl}}"
											]
										},
										"description": "Booking with Single Segment, non BUP, no SHC and no data Capture, loaded in Bulk/ no ULD. Use global_variable bookingId_1"
									},
									"response": []
								},
								{
									"name": "POR-2759: Retrieve DGR goods commodities: GET: Using UN Number and name as parameters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "da41a6b2-1198-4094-abf5-3423b611e90a",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForDgrGoodsComm\"));",
													"eval(pm.globals.get('currentDate'));",
													"eval(pm.globals.get('dayMon'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0b7c342-f8b5-47ae-a66e-0d7d85e06188",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"",
													"function getUnNumbers(rspBody){",
													"    ",
													"    var unNum = [];",
													"    var lenOfUn = rspBody._embedded.commodities.length;",
													"    ",
													"    for(var base = 0; base < lenOfUn; base++){",
													"        ",
													"        var un = rspBody._embedded.commodities[base].unNumber;",
													"        unNum.push(un);",
													"        ",
													"    }",
													"    ",
													"    return unNum;",
													"}",
													"",
													"function getName(rspBody){",
													"    ",
													"    var nameArr = [];",
													"    var lenOfComm = rspBody._embedded.commodities.length;",
													"    ",
													"    for(var base = 0; base < lenOfComm ; base++){",
													"        ",
													"        var names = rspBody._embedded.commodities[base].name;",
													"        nameArr.push(names);",
													"        ",
													"    }",
													"    ",
													"    return nameArr;",
													"}",
													"",
													"console.log(getUnNumbers(jsonResponseBody));",
													"console.log(getName(jsonResponseBody));",
													"",
													"pm.test(\"Check if the UN number is equal to what is given in Parameter.\", function(){",
													"    ",
													"    var paramUn = pm.request.url.query.reference.unNumber.value;",
													"    var len = getUnNumbers(jsonResponseBody).length;",
													"    ",
													"    for(var base = 0; base < len; base++){",
													"        ",
													"        var unNums = getUnNumbers(jsonResponseBody)[base];",
													"        ",
													"        if(unNums != paramUn){",
													"            ",
													"            throw console.log(unNums + ' is not equal to ' + paramUn);",
													"            ",
													"        }",
													"    }",
													"});",
													"",
													"pm.test(\"Check if the name is equal to what is given in Parameter.\", function(){",
													"    ",
													"    var paramName = pm.request.url.query.reference.name.value;",
													"    var len = getName(jsonResponseBody).length;",
													"    ",
													"    for(var base = 0; base < len; base++){",
													"        ",
													"        var names = getName(jsonResponseBody)[base];",
													"        var namess = names.toUpperCase();",
													"        var start = namess.startsWith(namess, 0);",
													"        ",
													"        if(!start){",
													"            ",
													"            throw console.log(namess + ' is not equal to ' + paramName);",
													"            ",
													"        }",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?unNumber=2817&name=AMMONIUM",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "unNumber",
													"value": "2817"
												},
												{
													"key": "name",
													"value": "AMMONIUM"
												}
											]
										},
										"description": "Booking with Single Segment, non BUP, no SHC and no data Capture, loaded in Bulk/ no ULD. Use global_variable bookingId_1"
									},
									"response": []
								},
								{
									"name": "POR-2760: Retrieve DGR goods commodities: GET: Using UN Number, name and Package Group as parameters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "da41a6b2-1198-4094-abf5-3423b611e90a",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForDgrGoodsComm\"));",
													"eval(pm.globals.get('currentDate'));",
													"eval(pm.globals.get('dayMon'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0b7c342-f8b5-47ae-a66e-0d7d85e06188",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"",
													"function getUnNumbers(rspBody){",
													"    ",
													"    var unNum = [];",
													"    var lenOfUn = rspBody._embedded.commodities.length;",
													"    ",
													"    for(var base = 0; base < lenOfUn; base++){",
													"        ",
													"        var un = rspBody._embedded.commodities[base].unNumber;",
													"        unNum.push(un);",
													"        ",
													"    }",
													"    ",
													"    return unNum;",
													"}",
													"",
													"function getName(rspBody){",
													"    ",
													"    var nameArr = [];",
													"    var lenOfComm = rspBody._embedded.commodities.length;",
													"    ",
													"    for(var base = 0; base < lenOfComm ; base++){",
													"        ",
													"        var names = rspBody._embedded.commodities[base].name;",
													"        nameArr.push(names);",
													"        ",
													"    }",
													"    ",
													"    return nameArr;",
													"}",
													"",
													"function getPackGroup(rspBody){",
													"    ",
													"    var packArr = [];",
													"    var lenOfComms = rspBody._embedded.commodities.length;",
													"    ",
													"    for(var base = 0; base < lenOfComms; base++){",
													"        ",
													"        var packs = rspBody._embedded.commodities[base].packageGroup;",
													"        packArr.push(packs);",
													"        ",
													"    }",
													"    ",
													"    return packArr;",
													"}",
													"",
													"console.log(getUnNumbers(jsonResponseBody));",
													"console.log(getName(jsonResponseBody));",
													"console.log(getPackGroup(jsonResponseBody));",
													"",
													"pm.test(\"Check if the UN number is equal to what is given in Parameter.\", function(){",
													"    ",
													"    var paramUn = pm.request.url.query.reference.unNumber.value;",
													"    var len = getUnNumbers(jsonResponseBody).length;",
													"    ",
													"    for(var base = 0; base < len; base++){",
													"        ",
													"        var unNums = getUnNumbers(jsonResponseBody)[base];",
													"        ",
													"        if(unNums != paramUn){",
													"            ",
													"            throw console.log(unNums + ' is not equal to ' + paramUn);",
													"            ",
													"        }",
													"    }",
													"});",
													"",
													"pm.test(\"Check if the name is equal to what is given in Parameter.\", function(){",
													"    ",
													"    var paramName = pm.request.url.query.reference.name.value;",
													"    var len = getName(jsonResponseBody).length;",
													"    ",
													"    for(var base = 0; base < len; base++){",
													"        ",
													"        var names = getName(jsonResponseBody)[base];",
													"        var namess = names.toUpperCase();",
													"        ",
													"        if(namess != paramName){",
													"            ",
													"            throw console.log(namess + ' is not equal to ' + paramName);",
													"            ",
													"        }",
													"    }",
													"});",
													"",
													"pm.test(\"Check if the packaging group is equal to what is given in Parameter.\", function(){",
													"    ",
													"    var paramPack = pm.request.url.query.reference.packageGroup.value;",
													"    var len = getPackGroup(jsonResponseBody).length;",
													"    ",
													"    for(var base = 0; base < len; base++){",
													"        ",
													"        var packaging = getPackGroup(jsonResponseBody)[base];",
													"        var packs = paramPack.toUpperCase();",
													"        ",
													"        if(packaging != packs){",
													"            ",
													"            throw console.log(packaging + ' is not equal to ' + packs);",
													"            ",
													"        }",
													"    }",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?unNumber=2817&name=AMMONIUM HYDROGENDIFLUORIDE SOLUTION&packageGroup=iii",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "unNumber",
													"value": "2817"
												},
												{
													"key": "name",
													"value": "AMMONIUM HYDROGENDIFLUORIDE SOLUTION"
												},
												{
													"key": "packageGroup",
													"value": "iii"
												}
											]
										},
										"description": "Booking with Single Segment, non BUP, no SHC and no data Capture, loaded in Bulk/ no ULD. Use global_variable bookingId_1"
									},
									"response": []
								},
								{
									"name": "POR-2761: Retrieve DGR goods commodities: GET: Using UN Number, name,  Package Group and SHC as parameters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "da41a6b2-1198-4094-abf5-3423b611e90a",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForDgrGoodsComm\"));",
													"eval(pm.globals.get('currentDate'));",
													"eval(pm.globals.get('dayMon'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0b7c342-f8b5-47ae-a66e-0d7d85e06188",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"",
													"function getUnNumbers(rspBody){",
													"    ",
													"    var unNum = [];",
													"    var lenOfUn = rspBody._embedded.commodities.length;",
													"    ",
													"    for(var base = 0; base < lenOfUn; base++){",
													"        ",
													"        var un = rspBody._embedded.commodities[base].unNumber;",
													"        unNum.push(un);",
													"        ",
													"    }",
													"    ",
													"    return unNum;",
													"}",
													"",
													"function getName(rspBody){",
													"    ",
													"    var nameArr = [];",
													"    var lenOfComm = rspBody._embedded.commodities.length;",
													"    ",
													"    for(var base = 0; base < lenOfComm ; base++){",
													"        ",
													"        var names = rspBody._embedded.commodities[base].name;",
													"        nameArr.push(names);",
													"        ",
													"    }",
													"    ",
													"    return nameArr;",
													"}",
													"",
													"function getPackGroup(rspBody){",
													"    ",
													"    var packArr = [];",
													"    var lenOfComms = rspBody._embedded.commodities.length;",
													"    ",
													"    for(var base = 0; base < lenOfComms; base++){",
													"        ",
													"        var packs = rspBody._embedded.commodities[base].packageGroup;",
													"        packArr.push(packs);",
													"        ",
													"    }",
													"    ",
													"    return packArr;",
													"}",
													"",
													"function getShc(rspBody){",
													"    ",
													"    var shcArr = [];",
													"    var lenOfComms = rspBody._embedded.commodities.length;",
													"    ",
													"    for(var base = 0; base < lenOfComms; base++){",
													"        ",
													"        var shcs = rspBody._embedded.commodities[base].specialHandling.code;",
													"        shcArr.push(shcs);",
													"        ",
													"    }",
													"    ",
													"    return shcArr;",
													"    ",
													"}",
													"",
													"console.log(getUnNumbers(jsonResponseBody));",
													"console.log(getName(jsonResponseBody));",
													"console.log(getPackGroup(jsonResponseBody));",
													"console.log(getShc(jsonResponseBody));",
													"",
													"pm.test(\"Check if the UN number is equal to what is given in Parameter.\", function(){",
													"    ",
													"    var paramUn = pm.request.url.query.reference.unNumber.value;",
													"    var len = getUnNumbers(jsonResponseBody).length;",
													"    ",
													"    for(var base = 0; base < len; base++){",
													"        ",
													"        var unNums = getUnNumbers(jsonResponseBody)[base];",
													"        ",
													"        if(unNums != paramUn){",
													"            ",
													"            throw console.log(unNums + ' is not equal to ' + paramUn);",
													"            ",
													"        }",
													"    }",
													"});",
													"",
													"pm.test(\"Check if the name is equal to what is given in Parameter.\", function(){",
													"    ",
													"    var paramName = pm.request.url.query.reference.name.value;",
													"    var len = getName(jsonResponseBody).length;",
													"    ",
													"    for(var base = 0; base < len; base++){",
													"        ",
													"        var names = getName(jsonResponseBody)[base];",
													"        var namess = names.toUpperCase();",
													"        ",
													"        if(namess != paramName){",
													"            ",
													"            throw console.log(namess + ' is not equal to ' + paramName);",
													"            ",
													"        }",
													"    }",
													"});",
													"",
													"pm.test(\"Check if the packaging group is equal to what is given in Parameter.\", function(){",
													"    ",
													"    var paramPack = pm.request.url.query.reference.packageGroup.value;",
													"    var len = getPackGroup(jsonResponseBody).length;",
													"    ",
													"    for(var base = 0; base < len; base++){",
													"        ",
													"        var packaging = getPackGroup(jsonResponseBody)[base];",
													"        var packs = paramPack.toUpperCase();",
													"        ",
													"        if(packaging != packs){",
													"            ",
													"            throw console.log(packaging + ' is not equal to ' + packs);",
													"            ",
													"        }",
													"    }",
													"});",
													"",
													"pm.test(\"Check if the SHC is equal to what is given in Parameter.\", function(){",
													"    ",
													"    var paramShc = pm.request.url.query.reference.specialHandlingCode.value;",
													"    var len = getShc(jsonResponseBody).length;",
													"    ",
													"    for(var base = 0; base < len; base++){",
													"        ",
													"        var shc = getShc(jsonResponseBody)[base];",
													"        var shcs = paramShc.toUpperCase();",
													"        ",
													"        if(shc != shcs){",
													"            ",
													"            throw console.log(shc + ' is not equal to ' + shcs);",
													"            ",
													"        }",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?unNumber=2817&name=AMMONIUM HYDROGENDIFLUORIDE SOLUTION&packageGroup=iii&specialHandlingCode=rcm",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "unNumber",
													"value": "2817"
												},
												{
													"key": "name",
													"value": "AMMONIUM HYDROGENDIFLUORIDE SOLUTION"
												},
												{
													"key": "packageGroup",
													"value": "iii"
												},
												{
													"key": "specialHandlingCode",
													"value": "rcm"
												}
											]
										},
										"description": "Booking with Single Segment, non BUP, no SHC and no data Capture, loaded in Bulk/ no ULD. Use global_variable bookingId_1"
									},
									"response": []
								},
								{
									"name": "POR-2762: Retrieve DGR goods commodities: GET: Using UN Number, name,  SHC and  reverseLogisticsCategory as parameters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "da41a6b2-1198-4094-abf5-3423b611e90a",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForDgrGoodsComm\"));",
													"eval(pm.globals.get('currentDate'));",
													"eval(pm.globals.get('dayMon'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0b7c342-f8b5-47ae-a66e-0d7d85e06188",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"",
													"function getUnNumbers(rspBody){",
													"    ",
													"    var unNum = [];",
													"    var lenOfUn = rspBody._embedded.commodities.length;",
													"    ",
													"    for(var base = 0; base < lenOfUn; base++){",
													"        ",
													"        var un = rspBody._embedded.commodities[base].unNumber;",
													"        unNum.push(un);",
													"        ",
													"    }",
													"    ",
													"    return unNum;",
													"}",
													"",
													"function getName(rspBody){",
													"    ",
													"    var nameArr = [];",
													"    var lenOfComm = rspBody._embedded.commodities.length;",
													"    ",
													"    for(var base = 0; base < lenOfComm ; base++){",
													"        ",
													"        var names = rspBody._embedded.commodities[base].name;",
													"        nameArr.push(names);",
													"        ",
													"    }",
													"    ",
													"    return nameArr;",
													"}",
													"",
													"function getShc(rspBody){",
													"    ",
													"    var shcArr = [];",
													"    var lenOfComms = rspBody._embedded.commodities.length;",
													"    ",
													"    for(var base = 0; base < lenOfComms; base++){",
													"        ",
													"        var shcs = rspBody._embedded.commodities[base].specialHandling.code;",
													"        shcArr.push(shcs);",
													"        ",
													"    }",
													"    ",
													"    return shcArr;",
													"    ",
													"}",
													"",
													"function getRrr(rspBody){",
													"    ",
													"    var rrrArr = [];",
													"    var lenOfComms = rspBody._embedded.commodities.length;",
													"    ",
													"    for(var base = 0; base < lenOfComms; base++){",
													"        ",
													"        var rrrs = rspBody._embedded.commodities[base].reverseLogisticsCategory;",
													"        rrrArr.push(rrrs);",
													"        ",
													"    }",
													"    ",
													"    return rrrArr;",
													"    ",
													"}",
													"",
													"console.log(getUnNumbers(jsonResponseBody));",
													"console.log(getName(jsonResponseBody));",
													"console.log(getShc(jsonResponseBody));",
													"console.log(getRrr(jsonResponseBody));",
													"",
													"pm.test(\"Check if the UN number is equal to what is given in Parameter.\", function(){",
													"    ",
													"    var paramUn = pm.request.url.query.reference.unNumber.value;",
													"    var len = getUnNumbers(jsonResponseBody).length;",
													"    ",
													"    for(var base = 0; base < len; base++){",
													"        ",
													"        var unNums = getUnNumbers(jsonResponseBody)[base];",
													"        ",
													"        if(unNums != paramUn){",
													"            ",
													"            throw console.log(unNums + ' is not equal to ' + paramUn);",
													"            ",
													"        }",
													"    }",
													"});",
													"",
													"pm.test(\"Check if the name is equal to what is given in Parameter.\", function(){",
													"    ",
													"    var paramName = pm.request.url.query.reference.name.value;",
													"    var len = getName(jsonResponseBody).length;",
													"    ",
													"    for(var base = 0; base < len; base++){",
													"        ",
													"        var names = getName(jsonResponseBody)[base];",
													"        var namess = names.toUpperCase();",
													"        ",
													"        if(namess != paramName){",
													"            ",
													"            throw console.log(namess + ' is not equal to ' + paramName);",
													"            ",
													"        }",
													"    }",
													"});",
													"",
													"pm.test(\"Check if the SHC is equal to what is given in Parameter.\", function(){",
													"    ",
													"    var paramShc = pm.request.url.query.reference.specialHandlingCode.value;",
													"    var len = getShc(jsonResponseBody).length;",
													"    ",
													"    for(var base = 0; base < len; base++){",
													"        ",
													"        var shc = getShc(jsonResponseBody)[base];",
													"        var shcs = paramShc.toUpperCase();",
													"        ",
													"        if(shc != shcs){",
													"            ",
													"            throw console.log(shc + ' is not equal to ' + shcs);",
													"            ",
													"        }",
													"    }",
													"});",
													"",
													"pm.test(\"Check if the RRR is equal to what is given in Parameter.\", function(){",
													"    ",
													"    var paramRrr = pm.request.url.query.reference.reverseLogisticsCategory.value;",
													"    var len = getRrr(jsonResponseBody).length;",
													"    ",
													"    for(var base = 0; base < len; base++){",
													"        ",
													"        var rrr = getRrr(jsonResponseBody)[base];",
													"        var rrrs = paramRrr.toUpperCase();",
													"        ",
													"        if(rrr != rrrs){",
													"            ",
													"            throw console.log(rrrs + ' is not equal to ' + rrr);",
													"            ",
													"        }",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?unNumber=2913&name=RADIOACTIVE MATERIAL, SURFACE CONTAMINATED OBJECTS (SCO-I)&specialHandlingCode=rrw&reverseLogisticsCategory=i",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "unNumber",
													"value": "2913"
												},
												{
													"key": "name",
													"value": "RADIOACTIVE MATERIAL, SURFACE CONTAMINATED OBJECTS (SCO-I)"
												},
												{
													"key": "specialHandlingCode",
													"value": "rrw"
												},
												{
													"key": "reverseLogisticsCategory",
													"value": "i"
												}
											]
										},
										"description": "Booking with Single Segment, non BUP, no SHC and no data Capture, loaded in Bulk/ no ULD. Use global_variable bookingId_1"
									},
									"response": []
								},
								{
									"name": "POR-2763: Retrieve DGR goods commodities: GET: Using UN Number, name,  SHC, reverseLogisticsCategory and Class as parameters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "da41a6b2-1198-4094-abf5-3423b611e90a",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForDgrGoodsComm\"));",
													"eval(pm.globals.get('currentDate'));",
													"eval(pm.globals.get('dayMon'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0b7c342-f8b5-47ae-a66e-0d7d85e06188",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"",
													"function getUnNumbers(rspBody){",
													"    ",
													"    var unNum = [];",
													"    var lenOfUn = rspBody._embedded.commodities.length;",
													"    ",
													"    for(var base = 0; base < lenOfUn; base++){",
													"        ",
													"        var un = rspBody._embedded.commodities[base].unNumber;",
													"        unNum.push(un);",
													"        ",
													"    }",
													"    ",
													"    return unNum;",
													"}",
													"",
													"function getName(rspBody){",
													"    ",
													"    var nameArr = [];",
													"    var lenOfComm = rspBody._embedded.commodities.length;",
													"    ",
													"    for(var base = 0; base < lenOfComm ; base++){",
													"        ",
													"        var names = rspBody._embedded.commodities[base].name;",
													"        nameArr.push(names);",
													"        ",
													"    }",
													"    ",
													"    return nameArr;",
													"}",
													"",
													"function getShc(rspBody){",
													"    ",
													"    var shcArr = [];",
													"    var lenOfComms = rspBody._embedded.commodities.length;",
													"    ",
													"    for(var base = 0; base < lenOfComms; base++){",
													"        ",
													"        var shcs = rspBody._embedded.commodities[base].specialHandling.code;",
													"        shcArr.push(shcs);",
													"        ",
													"    }",
													"    ",
													"    return shcArr;",
													"    ",
													"}",
													"",
													"function getRrr(rspBody){",
													"    ",
													"    var rrrArr = [];",
													"    var lenOfComms = rspBody._embedded.commodities.length;",
													"    ",
													"    for(var base = 0; base < lenOfComms; base++){",
													"        ",
													"        var rrrs = rspBody._embedded.commodities[base].reverseLogisticsCategory;",
													"        rrrArr.push(rrrs);",
													"        ",
													"    }",
													"    ",
													"    return rrrArr;",
													"    ",
													"}",
													"",
													"function getDgClass(rspBody){",
													"    ",
													"    var classArr = [];",
													"    var lenOfComms = rspBody._embedded.commodities.length;",
													"    ",
													"    for(var base = 0; base < lenOfComms; base++){",
													"        ",
													"        var cls = rspBody._embedded.commodities[base].class;",
													"        classArr.push(cls);",
													"        ",
													"    }",
													"    ",
													"    return classArr;",
													"    ",
													"}",
													"",
													"console.log(getUnNumbers(jsonResponseBody));",
													"console.log(getName(jsonResponseBody));",
													"console.log(getShc(jsonResponseBody));",
													"console.log(getRrr(jsonResponseBody));",
													"console.log(getDgClass(jsonResponseBody));",
													"",
													"pm.test(\"Check if the UN number is equal to what is given in Parameter.\", function(){",
													"    ",
													"    var paramUn = pm.request.url.query.reference.unNumber.value;",
													"    var len = getUnNumbers(jsonResponseBody).length;",
													"    ",
													"    for(var base = 0; base < len; base++){",
													"        ",
													"        var unNums = getUnNumbers(jsonResponseBody)[base];",
													"        ",
													"        if(unNums != paramUn){",
													"            ",
													"            throw console.log(unNums + ' is not equal to ' + paramUn);",
													"            ",
													"        }",
													"    }",
													"});",
													"",
													"pm.test(\"Check if the name is equal to what is given in Parameter.\", function(){",
													"    ",
													"    var paramName = pm.request.url.query.reference.name.value;",
													"    var len = getName(jsonResponseBody).length;",
													"    ",
													"    for(var base = 0; base < len; base++){",
													"        ",
													"        var names = getName(jsonResponseBody)[base];",
													"        var namess = names.toUpperCase();",
													"        ",
													"        if(namess != paramName){",
													"            ",
													"            throw console.log(namess + ' is not equal to ' + paramName);",
													"            ",
													"        }",
													"    }",
													"});",
													"",
													"pm.test(\"Check if the SHC is equal to what is given in Parameter.\", function(){",
													"    ",
													"    var paramShc = pm.request.url.query.reference.specialHandlingCode.value;",
													"    var len = getShc(jsonResponseBody).length;",
													"    ",
													"    for(var base = 0; base < len; base++){",
													"        ",
													"        var shc = getShc(jsonResponseBody)[base];",
													"        var shcs = paramShc.toUpperCase();",
													"        ",
													"        if(shc != shcs){",
													"            ",
													"            throw console.log(shc + ' is not equal to ' + shcs);",
													"            ",
													"        }",
													"    }",
													"});",
													"",
													"pm.test(\"Check if the RRR is equal to what is given in Parameter.\", function(){",
													"    ",
													"    var paramRrr = pm.request.url.query.reference.reverseLogisticsCategory.value;",
													"    var len = getRrr(jsonResponseBody).length;",
													"    ",
													"    for(var base = 0; base < len; base++){",
													"        ",
													"        var rrr = getRrr(jsonResponseBody)[base];",
													"        var rrrs = paramRrr.toUpperCase();",
													"        ",
													"        if(rrr != rrrs){",
													"            ",
													"            throw console.log(rrrs + ' is not equal to ' + rrr);",
													"            ",
													"        }",
													"    }",
													"});",
													"",
													"pm.test(\"Check if the Dg Class is equal to what is given in Parameter.\", function(){",
													"    ",
													"    var paramClass = pm.request.url.query.reference.dgrClass.value;",
													"    var len = getDgClass(jsonResponseBody).length;",
													"    ",
													"    for(var base = 0; base < len; base++){",
													"        ",
													"        var cls = getDgClass(jsonResponseBody)[base];",
													"        ",
													"        if(cls != paramClass){",
													"            ",
													"            throw console.log(cls + ' is not equal to ' + paramClass);",
													"            ",
													"        }",
													"    }",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?unNumber=2913&name=RADIOACTIVE MATERIAL, SURFACE CONTAMINATED OBJECTS (SCO-I)&specialHandlingCode=rrw&reverseLogisticsCategory=i&dgrClass=7",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "unNumber",
													"value": "2913"
												},
												{
													"key": "name",
													"value": "RADIOACTIVE MATERIAL, SURFACE CONTAMINATED OBJECTS (SCO-I)"
												},
												{
													"key": "specialHandlingCode",
													"value": "rrw"
												},
												{
													"key": "reverseLogisticsCategory",
													"value": "i"
												},
												{
													"key": "dgrClass",
													"value": "7"
												}
											]
										},
										"description": "Booking with Single Segment, non BUP, no SHC and no data Capture, loaded in Bulk/ no ULD. Use global_variable bookingId_1"
									},
									"response": []
								},
								{
									"name": "POR-2764: Retrieve DGR goods commodities: GET: Using UN Number as parameter size = 20",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "da41a6b2-1198-4094-abf5-3423b611e90a",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForDgrGoodsComm\"));",
													"eval(pm.globals.get('currentDate'));",
													"eval(pm.globals.get('dayMon'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0b7c342-f8b5-47ae-a66e-0d7d85e06188",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"",
													"function getUnNumbers(rspBody){",
													"    ",
													"    var unNum = [];",
													"    var lenOfUn = rspBody._embedded.commodities.length;",
													"    ",
													"    for(var base = 0; base < lenOfUn; base++){",
													"        ",
													"        var un = rspBody._embedded.commodities[base].unNumber;",
													"        unNum.push(un);",
													"        ",
													"    }",
													"    ",
													"    return unNum;",
													"}",
													"",
													"console.log(getUnNumbers(jsonResponseBody));",
													"",
													"pm.test(\"Check if the UN Number count is equal to expected.\", function(){",
													"    ",
													"    var len = getUnNumbers(jsonResponseBody).length;",
													"    var pageSize = pm.request.url.query.reference.size.value;",
													"    if (len != pageSize){",
													"        ",
													"        throw console.log(len + \" not equal with. \" + pageSize);",
													"    }",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?unNumber=28&size=20",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "unNumber",
													"value": "28"
												},
												{
													"key": "size",
													"value": "20"
												}
											]
										},
										"description": "Booking with Single Segment, non BUP, no SHC and no data Capture, loaded in Bulk/ no ULD. Use global_variable bookingId_1"
									},
									"response": []
								},
								{
									"name": "POR-2765: Retrieve DGR goods commodities: GET: Using UN Number as parameter page = 2",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "da41a6b2-1198-4094-abf5-3423b611e90a",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForDgrGoodsComm\"));",
													"eval(pm.globals.get('currentDate'));",
													"eval(pm.globals.get('dayMon'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0b7c342-f8b5-47ae-a66e-0d7d85e06188",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"",
													"function getUnNumbers(rspBody){",
													"    ",
													"    var unNum = [];",
													"    var lenOfUn = rspBody._embedded.commodities.length;",
													"    ",
													"    for(var base = 0; base < lenOfUn; base++){",
													"        ",
													"        var un = rspBody._embedded.commodities[base].unNumber;",
													"        unNum.push(un);",
													"        ",
													"    }",
													"    ",
													"    return unNum;",
													"}",
													"",
													"console.log(getUnNumbers(jsonResponseBody));",
													"",
													"pm.test(\"Check if the UN Number count is equal to expected.\", function(){",
													"    ",
													"    var len = getUnNumbers(jsonResponseBody).length;",
													"    var pageSize = pm.request.url.query.reference.size.value;",
													"    if (len != pageSize){",
													"        ",
													"        throw console.log(len + \" not equal with. \" + pageSize);",
													"    }",
													"    ",
													"});",
													"",
													"pm.test(\"Check the page number..\", function(){",
													"    ",
													"    var page = jsonResponseBody.page.number;",
													"    var pageNum = pm.request.url.query.reference.page.value;",
													"    if (page != pageNum){",
													"        ",
													"        throw console.log(page + \" not equal with. \" + pageNum);",
													"    }",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?unNumber=28&size=20&page=2",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "unNumber",
													"value": "28"
												},
												{
													"key": "size",
													"value": "20"
												},
												{
													"key": "page",
													"value": "2"
												}
											]
										},
										"description": "Booking with Single Segment, non BUP, no SHC and no data Capture, loaded in Bulk/ no ULD. Use global_variable bookingId_1"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative_Scenarios",
							"item": [
								{
									"name": "POR-2766: Retrieve DGR goods commodities: GET: Using non-existing Parameter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "da41a6b2-1198-4094-abf5-3423b611e90a",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForDgrGoodsComm\"));",
													"eval(pm.globals.get('currentDate'));",
													"eval(pm.globals.get('dayMon'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0b7c342-f8b5-47ae-a66e-0d7d85e06188",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"",
													"function getTotElements(){",
													"    ",
													"    var total = jsonResponseBody.page.totalElements;",
													"    if(total > 0){",
													"        ",
													"       throw console.log(\"Total elements should be 0.\"); ",
													"       ",
													"    }",
													"}",
													"",
													"pm.test(\"Check number of element in response body.\", function () {",
													"    ",
													"    getTotElements();",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?unNumber=II",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "unNumber",
													"value": "II"
												}
											]
										},
										"description": "Booking with Single Segment, non BUP, no SHC and no data Capture, loaded in Bulk/ no ULD. Use global_variable bookingId_1"
									},
									"response": []
								},
								{
									"name": "POR-2766: Retrieve DGR goods commodities: GET: Using non-existing Parameter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "da41a6b2-1198-4094-abf5-3423b611e90a",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForDgrGoodsComm\"));",
													"eval(pm.globals.get('currentDate'));",
													"eval(pm.globals.get('dayMon'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0b7c342-f8b5-47ae-a66e-0d7d85e06188",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"",
													"function getTotElements(){",
													"    ",
													"    var total = jsonResponseBody.page.totalElements;",
													"    if(total > 0){",
													"        ",
													"       throw console.log(\"Total elements should be 0.\"); ",
													"       ",
													"    }",
													"}",
													"",
													"pm.test(\"Check number of element in response body.\", function () {",
													"    ",
													"    getTotElements();",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?name=II",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "name",
													"value": "II"
												}
											]
										},
										"description": "Booking with Single Segment, non BUP, no SHC and no data Capture, loaded in Bulk/ no ULD. Use global_variable bookingId_1"
									},
									"response": []
								},
								{
									"name": "POR-2766: Retrieve DGR goods commodities: GET: Using non-existing Parameter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "da41a6b2-1198-4094-abf5-3423b611e90a",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForDgrGoodsComm\"));",
													"eval(pm.globals.get('currentDate'));",
													"eval(pm.globals.get('dayMon'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0b7c342-f8b5-47ae-a66e-0d7d85e06188",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"",
													"function getTotElements(){",
													"    ",
													"    var total = jsonResponseBody.page.totalElements;",
													"    if(total > 0){",
													"        ",
													"       throw console.log(\"Total elements should be 0.\"); ",
													"       ",
													"    }",
													"}",
													"",
													"pm.test(\"Check number of element in response body.\", function () {",
													"    ",
													"    getTotElements();",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?packageGroup=test",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "packageGroup",
													"value": "test"
												}
											]
										},
										"description": "Booking with Single Segment, non BUP, no SHC and no data Capture, loaded in Bulk/ no ULD. Use global_variable bookingId_1"
									},
									"response": []
								},
								{
									"name": "POR-2766: Retrieve DGR goods commodities: GET: Using non-existing Parameter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "da41a6b2-1198-4094-abf5-3423b611e90a",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForDgrGoodsComm\"));",
													"eval(pm.globals.get('currentDate'));",
													"eval(pm.globals.get('dayMon'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0b7c342-f8b5-47ae-a66e-0d7d85e06188",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"",
													"function getTotElements(){",
													"    ",
													"    var total = jsonResponseBody.page.totalElements;",
													"    if(total > 0){",
													"        ",
													"       throw console.log(\"Total elements should be 0.\"); ",
													"       ",
													"    }",
													"}",
													"",
													"pm.test(\"Check number of element in response body.\", function () {",
													"    ",
													"    getTotElements();",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?specialHandlingCode=XXX",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "specialHandlingCode",
													"value": "XXX"
												}
											]
										},
										"description": "Booking with Single Segment, non BUP, no SHC and no data Capture, loaded in Bulk/ no ULD. Use global_variable bookingId_1"
									},
									"response": []
								},
								{
									"name": "POR-2766: Retrieve DGR goods commodities: GET: Using non-existing Parameter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "da41a6b2-1198-4094-abf5-3423b611e90a",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForDgrGoodsComm\"));",
													"eval(pm.globals.get('currentDate'));",
													"eval(pm.globals.get('dayMon'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0b7c342-f8b5-47ae-a66e-0d7d85e06188",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"",
													"function getTotElements(){",
													"    ",
													"    var total = jsonResponseBody.page.totalElements;",
													"    if(total > 0){",
													"        ",
													"       throw console.log(\"Total elements should be 0.\"); ",
													"       ",
													"    }",
													"}",
													"",
													"pm.test(\"Check number of element in response body.\", function () {",
													"    ",
													"    getTotElements();",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?reverseLogisticsCategory=PP",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "reverseLogisticsCategory",
													"value": "PP"
												}
											]
										},
										"description": "Booking with Single Segment, non BUP, no SHC and no data Capture, loaded in Bulk/ no ULD. Use global_variable bookingId_1"
									},
									"response": []
								},
								{
									"name": "POR-2766: Retrieve DGR goods commodities: GET: Using non-existing Parameter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "da41a6b2-1198-4094-abf5-3423b611e90a",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForDgrGoodsComm\"));",
													"eval(pm.globals.get('currentDate'));",
													"eval(pm.globals.get('dayMon'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0b7c342-f8b5-47ae-a66e-0d7d85e06188",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"",
													"function getTotElements(){",
													"    ",
													"    var total = jsonResponseBody.page.totalElements;",
													"    if(total > 0){",
													"        ",
													"       throw console.log(\"Total elements should be 0.\"); ",
													"       ",
													"    }",
													"}",
													"",
													"pm.test(\"Check number of element in response body.\", function () {",
													"    ",
													"    getTotElements();",
													"    ",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?dgrClass=XX",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "dgrClass",
													"value": "XX"
												}
											]
										},
										"description": "Booking with Single Segment, non BUP, no SHC and no data Capture, loaded in Bulk/ no ULD. Use global_variable bookingId_1"
									},
									"response": []
								},
								{
									"name": "POR-2766: Retrieve DGR goods commodities: GET: Using non-existing Parameter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "da41a6b2-1198-4094-abf5-3423b611e90a",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForDgrGoodsComm\"));",
													"eval(pm.globals.get('currentDate'));",
													"eval(pm.globals.get('dayMon'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0b7c342-f8b5-47ae-a66e-0d7d85e06188",
												"exec": [
													"pm.test(\"Check if the response code is '422'.\", function () {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.status(\"Bad Request\");",
													"",
													"});",
													"",
													"var errorResponse = pm.response.json();",
													"",
													"function compareErrorMessage(){",
													"    ",
													"    var actualErrorMessage = errorResponse.fieldsErrors[0].userMessage;",
													"    var expectedErrorMessage = \"Invalid source provided\";",
													"    ",
													"    pm.test(\"Compare error message.\", function(){",
													"        ",
													"        pm.expect(expectedErrorMessage).to.eql(actualErrorMessage);",
													"        ",
													"    });",
													"    ",
													"}",
													"",
													"compareErrorMessage();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?source=CFR00",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "source",
													"value": "CFR00"
												}
											]
										},
										"description": "Booking with Single Segment, non BUP, no SHC and no data Capture, loaded in Bulk/ no ULD. Use global_variable bookingId_1"
									},
									"response": []
								},
								{
									"name": "POR-2766: Retrieve DGR goods commodities: GET: Using non-existing Parameter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "da41a6b2-1198-4094-abf5-3423b611e90a",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForDgrGoodsComm\"));",
													"eval(pm.globals.get('currentDate'));",
													"eval(pm.globals.get('dayMon'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0b7c342-f8b5-47ae-a66e-0d7d85e06188",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"",
													"function getTotElements(){",
													"    ",
													"    var total = jsonResponseBody.page.totalElements;",
													"    if(total > 0){",
													"        ",
													"       throw console.log(\"Total elements should be 0.\"); ",
													"       ",
													"    }",
													"}",
													"",
													"pm.test(\"Check number of element in response body.\", function () {",
													"    ",
													"    getTotElements();",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?countryCode=XX",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "countryCode",
													"value": "XX"
												}
											]
										},
										"description": "Booking with Single Segment, non BUP, no SHC and no data Capture, loaded in Bulk/ no ULD. Use global_variable bookingId_1"
									},
									"response": []
								},
								{
									"name": "POR-2766: Retrieve DGR goods commodities: GET: Using non-existing Parameter Copy",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "da41a6b2-1198-4094-abf5-3423b611e90a",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForDgrGoodsComm\"));",
													"eval(pm.globals.get('currentDate'));",
													"eval(pm.globals.get('dayMon'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "f0b7c342-f8b5-47ae-a66e-0d7d85e06188",
												"exec": [
													"pm.test(\"Check if the response code is '422'.\", function () {",
													"    pm.response.to.have.status(400);",
													"    pm.response.to.have.status(\"Bad Request\");",
													"",
													"});",
													"",
													"var errorResponse = pm.response.json();",
													"",
													"function compareErrorMessage(){",
													"    ",
													"    var actualErrorMessage = errorResponse.fieldsErrors[0].userMessage;",
													"    var expectedErrorMessage = \"Invalid aircraft type provided\";",
													"    ",
													"    pm.test(\"Compare error message.\", function(){",
													"        ",
													"        pm.expect(expectedErrorMessage).to.eql(actualErrorMessage);",
													"        ",
													"    });",
													"    ",
													"}",
													"",
													"compareErrorMessage();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?aircraftType=XX",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "aircraftType",
													"value": "XX"
												}
											]
										},
										"description": "Booking with Single Segment, non BUP, no SHC and no data Capture, loaded in Bulk/ no ULD. Use global_variable bookingId_1"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "POR-1420",
					"item": [
						{
							"name": "Business Scenarios",
							"item": [
								{
									"name": "POR-1537: Retrieve Sales Area records: GET: Query All",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2dff6063-7192-4fbd-98f0-2f7c0dce235e",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlSalesArea\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e35a5297-c8ec-4598-838a-3ea1ada61b3c",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"var totPages = jsonResponseBody.page.totalPages;",
													"",
													"function getSalesAreaCode(rspBody){",
													"    ",
													"    var arrSalesAreas = [];",
													"    var salesAreaCodes;",
													"    var len = rspBody._embedded.salesAreas.length;",
													"    ",
													"    for(var base = 0; base < len; base++){",
													"        ",
													"        salesAreaCodes = rspBody._embedded.salesAreas[base].code;",
													"        arrSalesAreas.push(salesAreaCodes);",
													"        ",
													"    }",
													"    ",
													"    return arrSalesAreas;",
													"    ",
													"}",
													"",
													"console.log(getSalesAreaCode(jsonResponseBody));",
													"",
													"function sendReq(nextPage){",
													"    ",
													"     pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"                console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"               var jsonData = res.json();",
													"               getSalesAreaCode(jsonData);",
													"            }",
													"            ",
													"        });",
													"}",
													"",
													"function sendForSucPages(){",
													"    ",
													"    if(totPages > 1){",
													"    ",
													"    for(var basePages = 1; basePages < totPages; basePages++){",
													"        ",
													"        var url = pm.request.url + \"?page=\" + basePages;",
													"        ",
													"        var nextPage = {url : url,",
													"                        method : 'GET',",
													"                        header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                               'Accept' : 'application/json',",
													"                               'Content-Type' : 'application/json'",
													"                        },",
													"                     ",
													"        };",
													"",
													"        sendReq(nextPage);",
													"        }",
													"    ",
													"    }",
													"",
													"}",
													"sendForSucPages();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}",
											"host": [
												"{{builtUrl}}"
											]
										},
										"description": "Retrieve Participant information: GET: Shortname of the Main Agent"
									},
									"response": []
								},
								{
									"name": "POR-1538: Retrieve Sales Area records: GET: Query for specific Country Code",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2dff6063-7192-4fbd-98f0-2f7c0dce235e",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlSalesArea\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ad9847f0-46d8-447d-8c89-253b40b218c6",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"var totPages = jsonResponseBody.page.totalPages;",
													"",
													"var param = pm.request.url.query.reference.countryCode.value;",
													"",
													"function getCountryCode(rspBody){",
													"    ",
													"    var arrCountryCodes = [];",
													"    var countryCodes;",
													"    var len = rspBody._embedded.salesAreas.length;",
													"    ",
													"    for(var base = 0; base < len; base++){",
													"        ",
													"        var keys = Object.keys(rspBody._embedded.salesAreas[base]);",
													"        ",
													"        if(!keys.includes('countryCode')){",
													"            ",
													"            continue;",
													"            ",
													"        }else{",
													"",
													"        countryCodes = rspBody._embedded.salesAreas[base].countryCode;",
													"        arrCountryCodes.push(countryCodes);",
													"        ",
													"            ",
													"        }",
													"        ",
													"    }",
													"    ",
													"    return arrCountryCodes;",
													"    ",
													"}",
													"",
													"function testProper(rspBody){",
													"    ",
													"    var len = getCountryCode(rspBody).length;",
													"    pm.test(\"Check if the actual list of sales area has the same country code.\", function(){",
													"        ",
													"        for(var baseLen = 0; baseLen < len; baseLen++){",
													"            ",
													"            pm.expect(param).to.eql(getCountryCode(rspBody)[baseLen]);",
													"            ",
													"        }",
													"        ",
													"    });",
													"}",
													"",
													"testProper(jsonResponseBody);",
													"console.log(getCountryCode(jsonResponseBody));",
													"",
													"function sendReq(nextPage){",
													"    ",
													"     pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"                console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"               var jsonData = res.json();",
													"               ",
													"               testProper(jsonData);",
													"               console.log(getCountryCode(jsonData));",
													"            }",
													"            ",
													"        });",
													"}",
													"",
													"function sendToAllPages(){",
													"    ",
													"    if(totPages > 1){",
													"        ",
													"        for(var basePages = 1; basePages < totPages; basePages++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + basePages;",
													"            ",
													"            var nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            sendReq(nextPage);",
													"        }",
													"    ",
													"    }",
													"}",
													"",
													"sendToAllPages();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?countryCode=JP",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "countryCode",
													"value": "JP"
												}
											]
										},
										"description": "Retrieve Participant information: GET: Shortname of the Main Agent"
									},
									"response": []
								},
								{
									"name": "POR-1539: Retrieve Sales Area records: GET: Query for specific Country Code, Country code in lower case",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2dff6063-7192-4fbd-98f0-2f7c0dce235e",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlSalesArea\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "50941696-9586-4955-95ca-ba6ebab92ab5",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"var totPages = jsonResponseBody.page.totalPages;",
													"",
													"var param1 = pm.request.url.query.reference.countryCode.value;",
													"var param = param1.toUpperCase();",
													"",
													"function getCountryCode(rspBody){",
													"    ",
													"    var arrCountryCodes = [];",
													"    var countryCodes;",
													"    var len = rspBody._embedded.salesAreas.length;",
													"    ",
													"    for(var base = 0; base < len; base++){",
													"        ",
													"        var keys = Object.keys(rspBody._embedded.salesAreas[base]);",
													"        ",
													"        if(!keys.includes('countryCode')){",
													"            ",
													"            continue;",
													"            ",
													"        }else{",
													"",
													"        countryCodes = rspBody._embedded.salesAreas[base].countryCode;",
													"        arrCountryCodes.push(countryCodes);",
													"        ",
													"            ",
													"        }",
													"        ",
													"    }",
													"    ",
													"    return arrCountryCodes;",
													"    ",
													"}",
													"",
													"function testProper(rspBody){",
													"    ",
													"    var len = getCountryCode(rspBody).length;",
													"    pm.test(\"Check if the actual list of sales area has the same country code.\", function(){",
													"        ",
													"        for(var baseLen = 0; baseLen < len; baseLen++){",
													"            ",
													"            pm.expect(param).to.eql(getCountryCode(rspBody)[baseLen]);",
													"            ",
													"        }",
													"        ",
													"    });",
													"}",
													"",
													"testProper(jsonResponseBody);",
													"console.log(getCountryCode(jsonResponseBody));",
													"",
													"function sendReq(nextPage){",
													"    ",
													"     pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"                console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"               var jsonData = res.json();",
													"               ",
													"               testProper(jsonData);",
													"               console.log(getCountryCode(jsonData));",
													"            }",
													"            ",
													"        });",
													"}",
													"",
													"function sendToAllPages(){",
													"    ",
													"    if(totPages > 1){",
													"        ",
													"        for(var basePages = 1; basePages < totPages; basePages++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + basePages;",
													"            ",
													"            var nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            sendReq(nextPage);",
													"        }",
													"    ",
													"    }",
													"}",
													"",
													"sendToAllPages();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?countryCode=jp",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "countryCode",
													"value": "jp"
												}
											]
										},
										"description": "Retrieve Participant information: GET: Shortname of the Main Agent"
									},
									"response": []
								},
								{
									"name": "POR-1540: Retrieve Sales Area records: GET: Query for specific Country Code, sorted by Code in ASC mode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2dff6063-7192-4fbd-98f0-2f7c0dce235e",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlSalesArea\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "358901d4-4f70-42d6-90bd-82c1f5834867",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"var totPages = jsonResponseBody.page.totalPages;",
													"",
													"function getSalesAreaCode(rspBody){",
													"    ",
													"    var arrSalesAreas = [];",
													"    var salesAreaCodes;",
													"    var len = rspBody._embedded.salesAreas.length;",
													"    ",
													"    for(var base = 0; base < len; base++){",
													"        ",
													"        salesAreaCodes = rspBody._embedded.salesAreas[base].code;",
													"        arrSalesAreas.push(salesAreaCodes);",
													"        ",
													"    }",
													"    ",
													"    return arrSalesAreas;",
													"    ",
													"}",
													"",
													"function testProper(rspBody){",
													"    ",
													"    var len = getSalesAreaCode(rspBody).length;",
													"    pm.test(\"Check if the actual list of sales area is the same as what is expected.\", function(){",
													"        ",
													"        var saleAreaAscMode = getSalesAreaCode(rspBody).sort();",
													"        console.log(saleAreaAscMode);",
													"        for(var baseLen = 0; baseLen < len; baseLen++){",
													"            ",
													"            pm.expect(saleAreaAscMode[baseLen]).to.eql(getSalesAreaCode(rspBody)[baseLen]);",
													"        }",
													"        ",
													"    });",
													"}",
													"",
													"testProper(jsonResponseBody);",
													"console.log(getSalesAreaCode(jsonResponseBody));",
													"",
													"function sendReq(nextPage){",
													"    ",
													"     pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"                console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"               var jsonData = res.json();",
													"               ",
													"               testProper(jsonData);",
													"               console.log(getSalesAreaCode(jsonData));",
													"            }",
													"            ",
													"        });",
													"}",
													"",
													"function sendToAllPages(){",
													"    ",
													"    if(totPages > 1){",
													"        ",
													"        for(var basePages = 1; basePages < totPages; basePages++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + basePages;",
													"            ",
													"            var nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            sendReq(nextPage);",
													"        }",
													"    ",
													"    }",
													"    ",
													"}",
													"",
													"sendToAllPages();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?countryCode=JP&sort=code%2Casc",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "countryCode",
													"value": "JP"
												},
												{
													"key": "sort",
													"value": "code%2Casc"
												}
											]
										},
										"description": "Retrieve Participant information: GET: Shortname of the Main Agent"
									},
									"response": []
								},
								{
									"name": "POR-1541: Retrieve Sales Area records: GET: Query for specific Country Code, sorted by Code in DESC mode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2dff6063-7192-4fbd-98f0-2f7c0dce235e",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlSalesArea\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8f9518cb-876d-4191-a081-81ac9da822be",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"var totPages = jsonResponseBody.page.totalPages;",
													"",
													"function getSalesAreaCode(rspBody){",
													"    ",
													"    var arrSalesAreas = [];",
													"    var salesAreaCodes;",
													"    var len = rspBody._embedded.salesAreas.length;",
													"    ",
													"    for(var base = 0; base < len; base++){",
													"        ",
													"        salesAreaCodes = rspBody._embedded.salesAreas[base].code;",
													"        arrSalesAreas.push(salesAreaCodes);",
													"        ",
													"    }",
													"    ",
													"    return arrSalesAreas;",
													"    ",
													"}",
													"",
													"function testProper(rspBody){",
													"    ",
													"    var len = getSalesAreaCode(rspBody).length;",
													"    pm.test(\"Check if the actual list of sales area is the same as what is expected.\", function(){",
													"        ",
													"        var saleAreaAscMode = getSalesAreaCode(rspBody).sort(function(val1, val2){",
													"            ",
													"            if(val1 > val2){",
													"                ",
													"                return -1;",
													"                ",
													"            }",
													"            ",
													"            if(val2 > val1){",
													"                ",
													"                return 1;",
													"                ",
													"            }",
													"            return 0;",
													"            ",
													"        });",
													"        ",
													"        console.log(saleAreaAscMode);",
													"        for(var baseLen = 0; baseLen < len; baseLen++){",
													"            ",
													"            pm.expect(saleAreaAscMode[baseLen]).to.eql(getSalesAreaCode(rspBody)[baseLen]);",
													"        }",
													"        ",
													"    });",
													"}",
													"",
													"testProper(jsonResponseBody);",
													"console.log(getSalesAreaCode(jsonResponseBody));",
													"",
													"function sendReq(nextPage){",
													"    ",
													"     pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"                console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"               var jsonData = res.json();",
													"               ",
													"               testProper(jsonData);",
													"               console.log(getSalesAreaCode(jsonData));",
													"            }",
													"            ",
													"        });",
													"}",
													"",
													"function sendToAllPages(){",
													"    ",
													"    if(totPages > 1){",
													"        ",
													"        for(var basePages = 1; basePages < totPages; basePages++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + basePages;",
													"            ",
													"            var nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            sendReq(nextPage);",
													"        }",
													"    ",
													"    }",
													"    ",
													"}",
													"",
													"sendToAllPages();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?countryCode=JP&sort=code%2Cdesc",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "countryCode",
													"value": "JP"
												},
												{
													"key": "sort",
													"value": "code%2Cdesc"
												}
											]
										},
										"description": "Retrieve Participant information: GET: Shortname of the Main Agent"
									},
									"response": []
								},
								{
									"name": "POR-1542: Retrieve Sales Area records: GET: Query All, sorted by Country Code in ASC",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2dff6063-7192-4fbd-98f0-2f7c0dce235e",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlSalesArea\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ce746c42-ba97-4721-93a2-8b39a6d33d67",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"var totPages = jsonResponseBody.page.totalPages;",
													"",
													"function getCountryCode(rspBody){",
													"    ",
													"    var arrCountryCodes = [];",
													"    var countryCodes;",
													"    var len = rspBody._embedded.salesAreas.length;",
													"    ",
													"    for(var base = 0; base < len; base++){",
													"        ",
													"        countryCodes = rspBody._embedded.salesAreas[base].countryCode;",
													"        arrCountryCodes.push(countryCodes);",
													"        ",
													"    }",
													"    ",
													"    return arrCountryCodes;",
													"    ",
													"}",
													"",
													"function testProper(rspBody){",
													"    ",
													"    var len = getCountryCode(rspBody).length;",
													"    pm.test(\"Check if the actual list of sales area is the same as what is expected.\", function(){",
													"        ",
													"        var countryCodeInAsc = getCountryCode(rspBody).sort();",
													"        console.log(countryCodeInAsc);",
													"        for(var baseLen = 0; baseLen < len; baseLen++){",
													"            ",
													"            pm.expect(countryCodeInAsc[baseLen]).to.eql(getCountryCode(rspBody)[baseLen]);",
													"        }",
													"        ",
													"    });",
													"}",
													"",
													"testProper(jsonResponseBody);",
													"console.log(getCountryCode(jsonResponseBody));",
													"",
													"function sendReq(nextPage){",
													"    ",
													"     pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"                console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"               var jsonData = res.json();",
													"               ",
													"               testProper(jsonData);",
													"               console.log(getCountryCode(jsonData));",
													"            }",
													"            ",
													"        });",
													"}",
													"",
													"function sendToAllPages(){",
													"    ",
													"    if(totPages > 1){",
													"        ",
													"        for(var basePages = 1; basePages < totPages; basePages++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + basePages;",
													"            ",
													"            let nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            setTimeout(function(){sendReq(nextPage)}, 3000*basePages);",
													"        }",
													"    ",
													"    }",
													"    ",
													"}",
													"",
													"sendToAllPages();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?sort=countryCode%2Casc",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "sort",
													"value": "countryCode%2Casc"
												}
											]
										},
										"description": "Retrieve Participant information: GET: Shortname of the Main Agent"
									},
									"response": []
								},
								{
									"name": "POR-1542: Retrieve Sales Area records: GET: Query All, sorted by Country Code in DESC",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2dff6063-7192-4fbd-98f0-2f7c0dce235e",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlSalesArea\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cb206060-87f4-435d-8dfa-ed1be9f27521",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"var totPages = jsonResponseBody.page.totalPages;",
													"",
													"function getCountryCode(rspBody){",
													"    ",
													"    var arrCountryCodes = [];",
													"    var countryCodes;",
													"    var len = rspBody._embedded.salesAreas.length;",
													"    ",
													"    for(var base = 0; base < len; base++){",
													"        ",
													"        var keys = Object.keys(rspBody._embedded.salesAreas[base]);",
													"        ",
													"        if(!keys.includes('countryCode')){",
													"            ",
													"            continue;",
													"            ",
													"        }else{",
													"",
													"        countryCodes = rspBody._embedded.salesAreas[base].countryCode;",
													"        arrCountryCodes.push(countryCodes);",
													"        ",
													"            ",
													"        }",
													"        ",
													"    }",
													"    ",
													"    return arrCountryCodes;",
													"    ",
													"}",
													"",
													"function testProper(rspBody){",
													"    ",
													"    var len = getCountryCode(rspBody).length;",
													"    pm.test(\"Check if the actual list of sales area is the same as what is expected.\", function(){",
													"        ",
													"        var countryCodeInAsc = getCountryCode(rspBody).sort(function(val1, val2){",
													"            ",
													"            if(val1 > val2){",
													"                ",
													"                return -1;",
													"                ",
													"            }",
													"            ",
													"            if(val2 > val1){",
													"                ",
													"                return 1;",
													"                ",
													"            }",
													"            return 0;",
													"            ",
													"        });",
													"        console.log(countryCodeInAsc);",
													"        for(var baseLen = 0; baseLen < len; baseLen++){",
													"            ",
													"            pm.expect(countryCodeInAsc[baseLen]).to.eql(getCountryCode(rspBody)[baseLen]);",
													"        }",
													"        ",
													"    });",
													"}",
													"",
													"testProper(jsonResponseBody);",
													"console.log(getCountryCode(jsonResponseBody));",
													"",
													"function sendReq(nextPage){",
													"    ",
													"     pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"                console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"               var jsonData = res.json();",
													"               ",
													"               testProper(jsonData);",
													"               console.log(getCountryCode(jsonData));",
													"            }",
													"            ",
													"        });",
													"}",
													"",
													"function sendToAllPages(){",
													"    ",
													"    if(totPages > 1){",
													"        ",
													"        for(var basePages = 1; basePages < totPages; basePages++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + basePages;",
													"            ",
													"            let nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            setTimeout(function(){sendReq(nextPage)}, 3000*basePages);",
													"        }",
													"    ",
													"    }",
													"    ",
													"}",
													"",
													"sendToAllPages();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?sort=countryCode%2Cdesc",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "sort",
													"value": "countryCode%2Cdesc"
												}
											]
										},
										"description": "Retrieve Participant information: GET: Shortname of the Main Agent"
									},
									"response": []
								},
								{
									"name": "POR-1543: Retrieve Sales Area records: GET: Query for specific Country Code, sorted by Name in DESC mode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2dff6063-7192-4fbd-98f0-2f7c0dce235e",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlSalesArea\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "465f8679-4882-4911-8d1e-f032b08241c6",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"var totPages = jsonResponseBody.page.totalPages;",
													"",
													"function getNames(rspBody){",
													"    ",
													"    var arrNames = [];",
													"    var names;",
													"    var len = rspBody._embedded.salesAreas.length;",
													"    ",
													"    for(var base = 0; base < len; base++){",
													"        ",
													"        var keys = Object.keys(rspBody._embedded.salesAreas[base]);",
													"        ",
													"        if(!keys.includes('name')){",
													"            ",
													"            continue;",
													"            ",
													"        }else{",
													"",
													"        names = rspBody._embedded.salesAreas[base].name;",
													"        arrNames.push(names);",
													"        ",
													"            ",
													"        }",
													"        ",
													"    }",
													"    ",
													"    return arrNames;",
													"    ",
													"}",
													"",
													"function testProper(rspBody){",
													"    ",
													"    var len = getNames(rspBody).length;",
													"    pm.test(\"Check if the actual list of sales area is the same as what is expected.\", function(){",
													"        ",
													"        var nameInAsc = getNames(rspBody).sort(function(val1, val2){",
													"            ",
													"            if(val1 > val2){",
													"                ",
													"                return -1;",
													"                ",
													"            }",
													"            ",
													"            if(val2 > val1){",
													"                ",
													"                return 1;",
													"                ",
													"            }",
													"            return 0;",
													"            ",
													"        });",
													"        console.log(nameInAsc);",
													"        for(var baseLen = 0; baseLen < len; baseLen++){",
													"            ",
													"            pm.expect(nameInAsc[baseLen]).to.eql(getNames(rspBody)[baseLen]);",
													"        }",
													"        ",
													"    });",
													"}",
													"",
													"testProper(jsonResponseBody);",
													"console.log(getNames(jsonResponseBody));",
													"",
													"function sendReq(nextPage){",
													"    ",
													"     pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"                console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"               var jsonData = res.json();",
													"               ",
													"               testProper(jsonData);",
													"               console.log(getNames(jsonData));",
													"            }",
													"            ",
													"        });",
													"}",
													"",
													"function sendToAllPages(){",
													"    ",
													"    if(totPages > 1){",
													"        ",
													"        for(var basePages = 1; basePages < totPages; basePages++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + basePages;",
													"            ",
													"            var nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            sendReq(nextPage);",
													"        }",
													"    ",
													"    }",
													"    ",
													"}",
													"",
													"sendToAllPages();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?countryCode=JP&sort=name%2Cdesc",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "countryCode",
													"value": "JP"
												},
												{
													"key": "sort",
													"value": "name%2Cdesc"
												}
											]
										},
										"description": "Retrieve Participant information: GET: Shortname of the Main Agent"
									},
									"response": []
								},
								{
									"name": "POR-1543: Retrieve Sales Area records: GET: Query for specific Country Code, sorted by Name in ASC mode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2dff6063-7192-4fbd-98f0-2f7c0dce235e",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlSalesArea\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "5b26be66-08e3-47c1-8281-de3e9731a16d",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonResponseBody = pm.response.json();",
													"var totPages = jsonResponseBody.page.totalPages;",
													"",
													"function getNames(rspBody){",
													"    ",
													"    var arrNames = [];",
													"    var names;",
													"    var len = rspBody._embedded.salesAreas.length;",
													"    ",
													"    for(var base = 0; base < len; base++){",
													"        ",
													"        var keys = Object.keys(rspBody._embedded.salesAreas[base]);",
													"        ",
													"        if(!keys.includes('name')){",
													"            ",
													"            continue;",
													"            ",
													"        }else{",
													"",
													"        names = rspBody._embedded.salesAreas[base].name;",
													"        arrNames.push(names);",
													"        ",
													"            ",
													"        }",
													"        ",
													"    }",
													"    ",
													"    return arrNames;",
													"    ",
													"}",
													"",
													"function testProper(rspBody){",
													"    ",
													"    var len = getNames(rspBody).length;",
													"    pm.test(\"Check if the actual list of sales area is the same as what is expected.\", function(){",
													"        ",
													"        var nameInAsc = getNames(rspBody).sort();",
													"        console.log(nameInAsc);",
													"        for(var baseLen = 0; baseLen < len; baseLen++){",
													"            ",
													"            pm.expect(nameInAsc[baseLen]).to.eql(getNames(rspBody)[baseLen]);",
													"        }",
													"        ",
													"    });",
													"}",
													"",
													"testProper(jsonResponseBody);",
													"console.log(getNames(jsonResponseBody));",
													"",
													"function sendReq(nextPage){",
													"    ",
													"     pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"                console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"               var jsonData = res.json();",
													"               ",
													"               testProper(jsonData);",
													"               console.log(getNames(jsonData));",
													"            }",
													"            ",
													"        });",
													"}",
													"",
													"function sendToAllPages(){",
													"    ",
													"    if(totPages > 1){",
													"        ",
													"        for(var basePages = 1; basePages < totPages; basePages++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + basePages;",
													"            ",
													"            var nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            sendReq(nextPage);",
													"        }",
													"    ",
													"    }",
													"    ",
													"}",
													"",
													"sendToAllPages();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?countryCode=JP&sort=name%2Casc",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "countryCode",
													"value": "JP"
												},
												{
													"key": "sort",
													"value": "name%2Casc"
												}
											]
										},
										"description": "Retrieve Participant information: GET: Shortname of the Main Agent"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative Scenarios",
							"item": [
								{
									"name": "POR-1544: Retrieve Sales Area records: GET: Query for specific Country Code, Country code does not exist in CSP",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2dff6063-7192-4fbd-98f0-2f7c0dce235e",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlSalesArea\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "cbcf4190-bde3-447b-9f10-0c9a72e8895e",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonBody = pm.response.json();",
													"pm.test(\"Check if the response body is empty.\", function () {",
													"    pm.expect(jsonBody.page.totalElements).to.eql(0);",
													"    pm.expect(jsonBody.page.totalPages).to.eql(0);",
													"    pm.expect(jsonBody.page.number).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?countryCode=XX",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "countryCode",
													"value": "XX"
												}
											]
										},
										"description": "Retrieve Participant information: GET: Shortname of the Main Agent"
									},
									"response": []
								},
								{
									"name": "POR-1545: Retrieve Sales Area records: GET: Query for specific Country Code, Country code more than the required length of characters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "2dff6063-7192-4fbd-98f0-2f7c0dce235e",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlSalesArea\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "21979860-a43e-423e-9fff-ddbbccb051eb",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonBody = pm.response.json();",
													"pm.test(\"Check if the response body is empty.\", function () {",
													"    pm.expect(jsonBody.page.totalElements).to.eql(0);",
													"    pm.expect(jsonBody.page.totalPages).to.eql(0);",
													"    pm.expect(jsonBody.page.number).to.eql(0);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?countryCode=XXXXXXXX",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "countryCode",
													"value": "XXXXXXXX"
												}
											]
										},
										"description": "Retrieve Participant information: GET: Shortname of the Main Agent"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "POR-1520",
					"item": [
						{
							"name": "Business_Scenarios",
							"item": [
								{
									"name": "POR-1897: Retrieve Zone: GET: Using code as parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "ae3a5294-461c-439e-b3b3-357715087d5e",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var paramOne = pm.request.url.query.reference.code.value;",
													"var paramCode = paramOne.toUpperCase();",
													"var jsonRsp = pm.response.json();",
													"var totalPages = jsonRsp.page.totalPages;",
													"",
													"function getCode(rspBody){",
													"    ",
													"    var arrCodes = [];",
													"    var lenOfCodes = rspBody._embedded.zones.length;",
													"    ",
													"    for(var base = 0; base < lenOfCodes; base++){",
													"        ",
													"        var codes = rspBody._embedded.zones[base].code;",
													"        arrCodes.push(codes);",
													"        ",
													"    }",
													"    ",
													"    return arrCodes;",
													"}",
													"",
													"function test(rspBody, index){",
													"    ",
													"    pm.test(\"Check if the code in the response body is same as what is used as parameter.\", function(){",
													"            ",
													"        pm.expect(getCode(rspBody)[index]).to.eql(paramCode);",
													"            ",
													"    });",
													"    ",
													"}",
													"",
													"function compareCodes(rspBody){",
													"    ",
													"    var lenOfCodesArr = getCode(rspBody).length;",
													"    ",
													"    for(var baseArr = 0; baseArr < lenOfCodesArr; baseArr++){",
													"        ",
													"        test(rspBody, baseArr);",
													"        ",
													"    }",
													"}",
													"",
													"function sendReq(nextPage){",
													"    ",
													"    pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"                console.log(err);",
													"                ",
													"            }else{",
													"            ",
													"               var jsonData = res.json();",
													"               ",
													"                compareCodes(jsonData);",
													"            }",
													"            ",
													"        });",
													"    ",
													"}",
													"",
													"function sendReqForAllThePages(){",
													"    ",
													"        if(totalPages > 1){",
													"            ",
													"            compareCodes(jsonRsp);",
													"            ",
													"            for(var base = 1; base < totalPages; base++){",
													"            ",
													"                var url = pm.request.url + \"&page=\" + base;",
													"                var nextPage = {url : url,",
													"                                header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                             },",
													"                         ",
													"                };",
													"            ",
													"                sendReq(nextPage);",
													"            }",
													"        ",
													"        }else{",
													"        ",
													"            compareCodes(jsonRsp);",
													"        ",
													"        }",
													"    ",
													"}",
													"",
													"sendReqForAllThePages();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "458ae871-085f-4289-858c-9ca5076396ab",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlZones\"));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?code=jpn001",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "code",
													"value": "jpn001"
												}
											]
										},
										"description": "To get all the Shipments for the Day for the given Agent."
									},
									"response": []
								},
								{
									"name": "POR-1897: All Caps",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "27cacfa4-2557-4da3-afc9-bb5f5a172b08",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var paramOne = pm.request.url.query.reference.code.value;",
													"var paramCode = paramOne.toUpperCase();",
													"var jsonRsp = pm.response.json();",
													"var totalPages = jsonRsp.page.totalpages;",
													"",
													"function getCode(){",
													"    ",
													"    var arrCodes = [];",
													"    var lenOfCodes = jsonRsp._embedded.zones.length;",
													"    ",
													"    for(var base = 0; base < lenOfCodes; base++){",
													"        ",
													"        var codes = jsonRsp._embedded.zones[base].code;",
													"        arrCodes.push(codes);",
													"        ",
													"    }",
													"    ",
													"    return arrCodes;",
													"}",
													"",
													"function test(index){",
													"    ",
													"    pm.test(\"Check if the code in the response body is same as what is used as parameter.\", function(){",
													"            ",
													"        pm.expect(getCode()[index]).to.eql(paramCode);",
													"            ",
													"    });",
													"    ",
													"}",
													"",
													"function compareCodes(){",
													"    ",
													"    var lenOfCodesArr = getCode().length;",
													"    ",
													"    for(var baseArr = 0; baseArr < lenOfCodesArr; baseArr++){",
													"        ",
													"        test(baseArr);",
													"        ",
													"    }",
													"}",
													"",
													"function sendReq(nextPage){",
													"    ",
													"    pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"                console.log(err);",
													"                ",
													"            }else{",
													"            ",
													"               var jsonData = res.json();",
													"               var lenOfBookings = jsonData._embedded.bookings.length;",
													"               ",
													"                compareCodes();",
													"            }",
													"            ",
													"        });",
													"    ",
													"}",
													"",
													"function sendReqForAllThePages(){",
													"    ",
													"        if(totalPages > 1){",
													"        ",
													"        for(var base = 1; base < totalPages; base++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + base;",
													"            ",
													"            var nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            sendReq(nextPage);",
													"        }",
													"        ",
													"    }else{",
													"        ",
													"        compareCodes();",
													"        ",
													"    }",
													"    ",
													"}",
													"",
													"sendReqForAllThePages();",
													""
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "458ae871-085f-4289-858c-9ca5076396ab",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlZones\"));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?code=JPN001",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "code",
													"value": "JPN001"
												}
											]
										},
										"description": "To get all the Shipments for the Day for the given Agent."
									},
									"response": []
								},
								{
									"name": "POR-1899: Retrieve Zone: GET: Using salesAreaCode as parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "78ba55a8-f649-420f-bcc6-ddc89c812bf0",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var paramOne = pm.request.url.query.reference.salesAreaCode.value;",
													"var paramCode = paramOne.toUpperCase();",
													"var jsonRsp = pm.response.json();",
													"var totalPages = jsonRsp.page.totalPages;",
													"",
													"function getCode(rspBody){",
													"    ",
													"    var arrCodes = [];",
													"    var lenOfCodes = rspBody._embedded.zones.length;",
													"    ",
													"    for(var base = 0; base < lenOfCodes; base++){",
													"        ",
													"        var codes = rspBody._embedded.zones[base].salesArea.code;",
													"        arrCodes.push(codes);",
													"        ",
													"    }",
													"    ",
													"    return arrCodes;",
													"}",
													"",
													"function test(rspBody, index){",
													"    ",
													"    pm.test(\"Check if the code in the response body is same as what is used as parameter.\", function(){",
													"            ",
													"        pm.expect(getCode(rspBody)[index]).to.eql(paramCode);",
													"            ",
													"    });",
													"    ",
													"}",
													"",
													"function compareCodes(rspBody){",
													"    ",
													"    var lenOfCodesArr = getCode(rspBody).length;",
													"    ",
													"    for(var baseArr = 0; baseArr < lenOfCodesArr; baseArr++){",
													"        ",
													"        test(rspBody, baseArr);",
													"        ",
													"    }",
													"}",
													"",
													"function sendReq(nextPage){",
													"    ",
													"    pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"                console.log(err);",
													"                ",
													"            }else{",
													"            ",
													"               var jsonData = res.json();",
													"               ",
													"                compareCodes(jsonData);",
													"            }",
													"            ",
													"        });",
													"    ",
													"}",
													"",
													"function sendReqForAllThePages(){",
													"    ",
													"        if(totalPages > 1){",
													"            ",
													"            compareCodes(jsonRsp);",
													"            ",
													"            for(var base = 1; base < totalPages; base++){",
													"            ",
													"                var url = pm.request.url + \"&page=\" + base;",
													"                var nextPage = {url : url,",
													"                                header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                             },",
													"                         ",
													"                };",
													"            ",
													"                sendReq(nextPage);",
													"            }",
													"        ",
													"        }else{",
													"        ",
													"            compareCodes(jsonRsp);",
													"        ",
													"        }",
													"    ",
													"}",
													"",
													"sendReqForAllThePages();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "458ae871-085f-4289-858c-9ca5076396ab",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlZones\"));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?salesAreaCode=hnd",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "salesAreaCode",
													"value": "hnd"
												}
											]
										},
										"description": "To get all the Shipments for the Day for the given Agent."
									},
									"response": []
								},
								{
									"name": "POR-1899: All Caps",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "78ba55a8-f649-420f-bcc6-ddc89c812bf0",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var paramOne = pm.request.url.query.reference.salesAreaCode.value;",
													"var paramCode = paramOne.toUpperCase();",
													"var jsonRsp = pm.response.json();",
													"var totalPages = jsonRsp.page.totalPages;",
													"",
													"function getCode(rspBody){",
													"    ",
													"    var arrCodes = [];",
													"    var lenOfCodes = rspBody._embedded.zones.length;",
													"    ",
													"    for(var base = 0; base < lenOfCodes; base++){",
													"        ",
													"        var codes = rspBody._embedded.zones[base].salesArea.code;",
													"        arrCodes.push(codes);",
													"        ",
													"    }",
													"    ",
													"    return arrCodes;",
													"}",
													"",
													"function test(rspBody, index){",
													"    ",
													"    pm.test(\"Check if the code in the response body is same as what is used as parameter.\", function(){",
													"            ",
													"        pm.expect(getCode(rspBody)[index]).to.eql(paramCode);",
													"            ",
													"    });",
													"    ",
													"}",
													"",
													"function compareCodes(rspBody){",
													"    ",
													"    var lenOfCodesArr = getCode(rspBody).length;",
													"    ",
													"    for(var baseArr = 0; baseArr < lenOfCodesArr; baseArr++){",
													"        ",
													"        test(rspBody, baseArr);",
													"        ",
													"    }",
													"}",
													"",
													"function sendReq(nextPage){",
													"    ",
													"    pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"                console.log(err);",
													"                ",
													"            }else{",
													"            ",
													"               var jsonData = res.json();",
													"               ",
													"                compareCodes(jsonData);",
													"            }",
													"            ",
													"        });",
													"    ",
													"}",
													"",
													"function sendReqForAllThePages(){",
													"    ",
													"        if(totalPages > 1){",
													"            ",
													"            compareCodes(jsonRsp);",
													"            ",
													"            for(var base = 1; base < totalPages; base++){",
													"            ",
													"                var url = pm.request.url + \"&page=\" + base;",
													"                var nextPage = {url : url,",
													"                                header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                             },",
													"                         ",
													"                };",
													"            ",
													"                sendReq(nextPage);",
													"            }",
													"        ",
													"        }else{",
													"        ",
													"            compareCodes(jsonRsp);",
													"        ",
													"        }",
													"    ",
													"}",
													"",
													"sendReqForAllThePages();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "458ae871-085f-4289-858c-9ca5076396ab",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlZones\"));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?salesAreaCode=HND",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "salesAreaCode",
													"value": "HND"
												}
											]
										},
										"description": "To get all the Shipments for the Day for the given Agent."
									},
									"response": []
								},
								{
									"name": "POR-1900: Retrieve Zone: GET: Using carrierCodes as parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2685fad4-9f16-4874-ad35-4d2b0c822e0c",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var paramOne = pm.request.url.query.reference.carrierCodes.value;",
													"var paramCode = paramOne.toUpperCase();",
													"var jsonRsp = pm.response.json();",
													"var totalPages = jsonRsp.page.totalPages;",
													"",
													"function getCode(rspBody){",
													"    ",
													"    var arrCodes = [];",
													"    var lenOfCodes = rspBody._embedded.zones.length;",
													"    ",
													"    for(var base = 0; base < lenOfCodes; base++){",
													"        ",
													"        var codes = rspBody._embedded.zones[base].carrier.code;",
													"        arrCodes.push(codes);",
													"        ",
													"    }",
													"    ",
													"    return arrCodes;",
													"}",
													"",
													"function test(rspBody, index){",
													"    ",
													"    pm.test(\"Check if the code in the response body is same as what is used as parameter.\", function(){",
													"            ",
													"        pm.expect(getCode(rspBody)[index]).to.eql(paramCode);",
													"            ",
													"    });",
													"    ",
													"}",
													"",
													"function compareCodes(rspBody){",
													"    ",
													"    var lenOfCodesArr = getCode(rspBody).length;",
													"    ",
													"    for(var baseArr = 0; baseArr < lenOfCodesArr; baseArr++){",
													"        ",
													"        test(rspBody, baseArr);",
													"        ",
													"    }",
													"}",
													"",
													"function sendReq(nextPage){",
													"    ",
													"    pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"                console.log(err);",
													"                ",
													"            }else{",
													"            ",
													"               var jsonData = res.json();",
													"               ",
													"                compareCodes(jsonData);",
													"            }",
													"            ",
													"        });",
													"    ",
													"}",
													"",
													"function sendReqForAllThePages(){",
													"    ",
													"        if(totalPages > 1){",
													"            ",
													"            compareCodes(jsonRsp);",
													"            ",
													"            for(var base = 1; base < totalPages; base++){",
													"            ",
													"                var url = pm.request.url + \"&page=\" + base;",
													"                let nextPage = {url : url,",
													"                                header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                             },",
													"                         ",
													"                };",
													"            ",
													"                setTimeout(function(){sendReq(nextPage)}, 3000*base);",
													"            }",
													"        ",
													"        }else{",
													"        ",
													"            compareCodes(jsonRsp);",
													"        ",
													"        }",
													"    ",
													"}",
													"",
													"sendReqForAllThePages();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "458ae871-085f-4289-858c-9ca5076396ab",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlZones\"));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?carrierCodes=jl",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "carrierCodes",
													"value": "jl"
												}
											]
										},
										"description": "To get all the Shipments for the Day for the given Agent."
									},
									"response": []
								},
								{
									"name": "POR-1900: All Caps",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "2685fad4-9f16-4874-ad35-4d2b0c822e0c",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var paramOne = pm.request.url.query.reference.carrierCodes.value;",
													"var paramCode = paramOne.toUpperCase();",
													"var jsonRsp = pm.response.json();",
													"var totalPages = jsonRsp.page.totalPages;",
													"",
													"function getCode(rspBody){",
													"    ",
													"    var arrCodes = [];",
													"    var lenOfCodes = rspBody._embedded.zones.length;",
													"    ",
													"    for(var base = 0; base < lenOfCodes; base++){",
													"        ",
													"        var codes = rspBody._embedded.zones[base].carrier.code;",
													"        arrCodes.push(codes);",
													"        ",
													"    }",
													"    ",
													"    return arrCodes;",
													"}",
													"",
													"function test(rspBody, index){",
													"    ",
													"    pm.test(\"Check if the code in the response body is same as what is used as parameter.\", function(){",
													"            ",
													"        pm.expect(getCode(rspBody)[index]).to.eql(paramCode);",
													"            ",
													"    });",
													"    ",
													"}",
													"",
													"function compareCodes(rspBody){",
													"    ",
													"    var lenOfCodesArr = getCode(rspBody).length;",
													"    ",
													"    for(var baseArr = 0; baseArr < lenOfCodesArr; baseArr++){",
													"        ",
													"        test(rspBody, baseArr);",
													"        ",
													"    }",
													"}",
													"",
													"function sendReq(nextPage){",
													"    ",
													"    pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"                console.log(err);",
													"                ",
													"            }else{",
													"            ",
													"               var jsonData = res.json();",
													"               ",
													"                compareCodes(jsonData);",
													"            }",
													"            ",
													"        });",
													"    ",
													"}",
													"",
													"function sendReqForAllThePages(){",
													"    ",
													"        if(totalPages > 1){",
													"            ",
													"            compareCodes(jsonRsp);",
													"            ",
													"            for(var base = 1; base < totalPages; base++){",
													"            ",
													"                var url = pm.request.url + \"&page=\" + base;",
													"                let nextPage = {url : url,",
													"                                header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                             },",
													"                         ",
													"                };",
													"            ",
													"                setTimeout(function(){sendReq(nextPage)}, 3000*base);",
													"            }",
													"        ",
													"        }else{",
													"        ",
													"            compareCodes(jsonRsp);",
													"        ",
													"        }",
													"    ",
													"}",
													"",
													"sendReqForAllThePages();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "458ae871-085f-4289-858c-9ca5076396ab",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlZones\"));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?carrierCodes=JL",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "carrierCodes",
													"value": "JL"
												}
											]
										},
										"description": "To get all the Shipments for the Day for the given Agent."
									},
									"response": []
								},
								{
									"name": "POR-1901: Retrieve Zone: GET: Using multiple carrierCodes as parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "278bf7d9-6f91-4a0f-97c1-c10e5e143a63",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var paramOne = pm.request.url.query.reference.carrierCodes.value;",
													"var paramCarCodes = paramOne.split(\",\");",
													"var paramJl = paramCarCodes[0];",
													"var paramXs = paramCarCodes[1];",
													"var paramCodeJl = paramJl.toUpperCase();",
													"var paramCodeXs = paramXs.toUpperCase();",
													"var jsonRsp = pm.response.json();",
													"var totalPages = jsonRsp.page.totalPages;",
													"",
													"function getCode(rspBody){",
													"    ",
													"    var arrCodes = [];",
													"    var lenOfCodes = rspBody._embedded.zones.length;",
													"    ",
													"    for(var base = 0; base < lenOfCodes; base++){",
													"        ",
													"        var codes = rspBody._embedded.zones[base].carrier.code;",
													"        arrCodes.push(codes);",
													"        ",
													"    }",
													"    ",
													"    return arrCodes;",
													"}",
													"",
													"function test(rspBody, index){",
													"    ",
													"    pm.test(\"Check if the code in the response body is same as what is used as parameter.\", function(){",
													"            ",
													"        if(getCode(rspBody).includes(paramCodeJl) || getCode(rspBody).includes(paramCodeXs)){",
													"            ",
													"            return;",
													"            ",
													"        }else{",
													"            ",
													"            throw console.log(\"Carrier Code not found.\");",
													"        }",
													"            ",
													"    });",
													"    ",
													"}",
													"",
													"function compareCodes(rspBody){",
													"    ",
													"    var lenOfCodesArr = getCode(rspBody).length;",
													"    ",
													"    for(var baseArr = 0; baseArr < lenOfCodesArr; baseArr++){",
													"        ",
													"        test(rspBody, baseArr);",
													"        ",
													"    }",
													"}",
													"",
													"function sendReq(nextPage){",
													"    ",
													"    pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"                console.log(err);",
													"                ",
													"            }else{",
													"            ",
													"               var jsonData = res.json();",
													"               ",
													"                compareCodes(jsonData);",
													"            }",
													"            ",
													"        });",
													"    ",
													"}",
													"",
													"function sendReqForAllThePages(){",
													"    ",
													"        if(totalPages > 1){",
													"            ",
													"            compareCodes(jsonRsp);",
													"            ",
													"            for(var base = 1; base < totalPages; base++){",
													"            ",
													"                var url = pm.request.url + \"&page=\" + base;",
													"                let nextPage = {url : url,",
													"                                header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                             },",
													"                         ",
													"                };",
													"            ",
													"                setTimeout(function(){sendReq(nextPage)}, 3000*base);",
													"            }",
													"        ",
													"        }else{",
													"        ",
													"            compareCodes(jsonRsp);",
													"        ",
													"        }",
													"    ",
													"}",
													"",
													"sendReqForAllThePages();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "458ae871-085f-4289-858c-9ca5076396ab",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlZones\"));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?carrierCodes=JL,XS",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "carrierCodes",
													"value": "JL,XS"
												}
											]
										},
										"description": "To get all the Shipments for the Day for the given Agent."
									},
									"response": []
								},
								{
									"name": "POR-1902: Retrieve Zone: GET: Using carrierCodes ([carrierCode,(BLANK VALUE)]) as parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "068c21f5-2b2f-46f6-986a-2ad7bd78366c",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonRsp = pm.response.json();",
													"var totalPages = jsonRsp.page.totalPages;",
													"",
													"function test(jsonBody, index){",
													"    ",
													"        ",
													"    pm.test(\"Check if the zones in the response body has no Carrier indicated.\", function(){",
													"        ",
													"        var zonesObject = jsonBody._embedded.zones[index];",
													"        if(zonesObject.hasOwnProperty('carrier')){",
													"                ",
													"            throw console.log('Zones has carrier property.');",
													"                ",
													"        }    ",
													"        ",
													"    });",
													"    ",
													"}",
													"",
													"function allZones(jsonBody){",
													"    ",
													"    var zonesLen = jsonBody._embedded.zones.length;",
													"    for(var base = 0; base < zonesLen; base++){",
													"        ",
													"        test(jsonBody, base);",
													"        ",
													"    }",
													"    ",
													"}",
													"",
													"function sendReq(nextPage){",
													"    ",
													"    pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"                console.log(err);",
													"                ",
													"            }else{",
													"            ",
													"               var jsonData = res.json();",
													"                allZones(jsonData);",
													"            }",
													"            ",
													"        });",
													"    ",
													"}",
													"",
													"function sendReqForAllThePages(){",
													"    ",
													"        if(totalPages > 1){",
													"            ",
													"            allZones(jsonRsp);",
													"            ",
													"            for(var base = 1; base < totalPages; base++){",
													"            ",
													"                var url = pm.request.url + \"&page=\" + base;",
													"                let nextPage = {url : url,",
													"                                header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                             },",
													"                         ",
													"                };",
													"            ",
													"                setTimeout(function(){sendReq(nextPage)}, 3000*base);",
													"            }",
													"        ",
													"        }else{",
													"        ",
													"            allZones(jsonRsp);",
													"        ",
													"        }",
													"    ",
													"}",
													"",
													"sendReqForAllThePages();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "458ae871-085f-4289-858c-9ca5076396ab",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlZones\"));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?carrierCodes=",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "carrierCodes",
													"value": ""
												}
											]
										},
										"description": "To get all the Shipments for the Day for the given Agent."
									},
									"response": []
								},
								{
									"name": "POR-1903: Retrieve Zone: GET: Using marketDomain as parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7ffbd601-6b0f-489f-8c5f-d92d3f18ee69",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var paramOne = pm.request.url.query.reference.marketDomain.value;",
													"var jsonRsp = pm.response.json();",
													"var totalPages = jsonRsp.page.totalPages;",
													"",
													"function getCode(rspBody){",
													"    ",
													"    var arrCodes = [];",
													"    var lenOfCodes = rspBody._embedded.zones.length;",
													"    ",
													"    for(var base = 0; base < lenOfCodes; base++){",
													"        ",
													"        var codes = rspBody._embedded.zones[base].marketDomain;",
													"        arrCodes.push(codes);",
													"        ",
													"    }",
													"    ",
													"    return arrCodes;",
													"}",
													"",
													"function test(rspBody, index){",
													"    ",
													"    pm.test(\"Check if the code in the response body is same as what is used as parameter.\", function(){",
													"            ",
													"        pm.expect(getCode(rspBody)[index]).to.eql(paramOne);",
													"            ",
													"    });",
													"    ",
													"}",
													"",
													"function compareCodes(rspBody){",
													"    ",
													"    var lenOfCodesArr = getCode(rspBody).length;",
													"    ",
													"    for(var baseArr = 0; baseArr < lenOfCodesArr; baseArr++){",
													"        ",
													"        test(rspBody, baseArr);",
													"        ",
													"    }",
													"}",
													"",
													"function sendReq(nextPage){",
													"    ",
													"    pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"                console.log(err);",
													"                ",
													"            }else{",
													"            ",
													"               var jsonData = res.json();",
													"               ",
													"                compareCodes(jsonData);",
													"            }",
													"            ",
													"        });",
													"    ",
													"}",
													"",
													"function sendReqForAllThePages(){",
													"    ",
													"        if(totalPages > 1){",
													"            ",
													"            compareCodes(jsonRsp);",
													"            ",
													"            for(var base = 1; base < totalPages; base++){",
													"            ",
													"                var url = pm.request.url + \"&page=\" + base;",
													"                var nextPage = {url : url,",
													"                                header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                             },",
													"                         ",
													"                };",
													"            ",
													"                sendReq(nextPage);",
													"            }",
													"        ",
													"        }else{",
													"        ",
													"            compareCodes(jsonRsp);",
													"        ",
													"        }",
													"    ",
													"}",
													"",
													"sendReqForAllThePages();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "458ae871-085f-4289-858c-9ca5076396ab",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlZones\"));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?marketDomain=domestic",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "marketDomain",
													"value": "domestic"
												}
											]
										},
										"description": "To get all the Shipments for the Day for the given Agent."
									},
									"response": []
								},
								{
									"name": "POR-1903: All Caps",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0265d25b-5f97-4860-abfd-8a03c4dc5519",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var paramOne = pm.request.url.query.reference.marketDomain.value;",
													"var paramCode = paramOne.toLowerCase();",
													"var jsonRsp = pm.response.json();",
													"var totalPages = jsonRsp.page.totalPages;",
													"",
													"function getCode(rspBody){",
													"    ",
													"    var arrCodes = [];",
													"    var lenOfCodes = rspBody._embedded.zones.length;",
													"    ",
													"    for(var base = 0; base < lenOfCodes; base++){",
													"        ",
													"        var codes = rspBody._embedded.zones[base].marketDomain;",
													"        arrCodes.push(codes);",
													"        ",
													"    }",
													"    ",
													"    return arrCodes;",
													"}",
													"",
													"function test(rspBody, index){",
													"    ",
													"    pm.test(\"Check if the code in the response body is same as what is used as parameter.\", function(){",
													"            ",
													"        pm.expect(getCode(rspBody)[index]).to.eql(paramCode);",
													"            ",
													"    });",
													"    ",
													"}",
													"",
													"function compareCodes(rspBody){",
													"    ",
													"    var lenOfCodesArr = getCode(rspBody).length;",
													"    ",
													"    for(var baseArr = 0; baseArr < lenOfCodesArr; baseArr++){",
													"        ",
													"        test(rspBody, baseArr);",
													"        ",
													"    }",
													"}",
													"",
													"function sendReq(nextPage){",
													"    ",
													"    pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"                console.log(err);",
													"                ",
													"            }else{",
													"            ",
													"               var jsonData = res.json();",
													"               ",
													"                compareCodes(jsonData);",
													"            }",
													"            ",
													"        });",
													"    ",
													"}",
													"",
													"function sendReqForAllThePages(){",
													"    ",
													"        if(totalPages > 1){",
													"            ",
													"            compareCodes(jsonRsp);",
													"            ",
													"            for(var base = 1; base < totalPages; base++){",
													"            ",
													"                var url = pm.request.url + \"&page=\" + base;",
													"                var nextPage = {url : url,",
													"                                header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                             },",
													"                         ",
													"                };",
													"            ",
													"                sendReq(nextPage);",
													"            }",
													"        ",
													"        }else{",
													"        ",
													"            compareCodes(jsonRsp);",
													"        ",
													"        }",
													"    ",
													"}",
													"",
													"sendReqForAllThePages();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "458ae871-085f-4289-858c-9ca5076396ab",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlZones\"));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?marketDomain=DOMESTIC",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "marketDomain",
													"value": "DOMESTIC"
												}
											]
										},
										"description": "To get all the Shipments for the Day for the given Agent."
									},
									"response": []
								},
								{
									"name": "POR-1903: All Caps International",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "0265d25b-5f97-4860-abfd-8a03c4dc5519",
												"exec": [
													"pm.test(\"Check if the response code is '200' and does not have an error.\", function () {",
													"    pm.response.to.have.status(200);",
													"    pm.response.to.not.be.error;",
													"    pm.response.to.not.have.jsonBody('error');",
													"});",
													"",
													"var paramOne = pm.request.url.query.reference.marketDomain.value;",
													"var paramCode = paramOne.toLowerCase();",
													"var jsonRsp = pm.response.json();",
													"var totalPages = jsonRsp.page.totalPages;",
													"",
													"function getCode(rspBody){",
													"    ",
													"    var arrCodes = [];",
													"    var lenOfCodes = rspBody._embedded.zones.length;",
													"    ",
													"    for(var base = 0; base < lenOfCodes; base++){",
													"        ",
													"        var codes = rspBody._embedded.zones[base].marketDomain;",
													"        arrCodes.push(codes);",
													"        ",
													"    }",
													"    ",
													"    return arrCodes;",
													"}",
													"",
													"function test(rspBody, index){",
													"    ",
													"    pm.test(\"Check if the code in the response body is same as what is used as parameter.\", function(){",
													"            ",
													"        pm.expect(getCode(rspBody)[index]).to.eql(paramCode);",
													"            ",
													"    });",
													"    ",
													"}",
													"",
													"function compareCodes(rspBody){",
													"    ",
													"    var lenOfCodesArr = getCode(rspBody).length;",
													"    ",
													"    for(var baseArr = 0; baseArr < lenOfCodesArr; baseArr++){",
													"        ",
													"        test(rspBody, baseArr);",
													"        ",
													"    }",
													"}",
													"",
													"function sendReq(nextPage){",
													"    ",
													"    pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"                console.log(err);",
													"                ",
													"            }else{",
													"            ",
													"               var jsonData = res.json();",
													"               ",
													"                compareCodes(jsonData);",
													"            }",
													"            ",
													"        });",
													"    ",
													"}",
													"",
													"function sendReqForAllThePages(){",
													"    ",
													"        if(totalPages > 1){",
													"            ",
													"            compareCodes(jsonRsp);",
													"            ",
													"            for(var base = 1; base < totalPages; base++){",
													"            ",
													"                var url = pm.request.url + \"&page=\" + base;",
													"                let nextPage = {url : url,",
													"                                header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                             },",
													"                         ",
													"                };",
													"            ",
													"                setTimeout(function(){sendReq(nextPage)}, 3000*base);",
													"            }",
													"        ",
													"        }else{",
													"        ",
													"            compareCodes(jsonRsp);",
													"        ",
													"        }",
													"    ",
													"}",
													"",
													"sendReqForAllThePages();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "458ae871-085f-4289-858c-9ca5076396ab",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlZones\"));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?marketDomain=INTERNATIONAL",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "marketDomain",
													"value": "INTERNATIONAL"
												}
											]
										},
										"description": "To get all the Shipments for the Day for the given Agent."
									},
									"response": []
								},
								{
									"name": "POR-1903: Retrieve Zone: GET: International",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "af8a8dbd-5adb-4786-8b20-96a7cc6cf1b7",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var paramOne = pm.request.url.query.reference.marketDomain.value;",
													"var jsonRsp = pm.response.json();",
													"var totalPages = jsonRsp.page.totalPages;",
													"",
													"function getCode(rspBody){",
													"    ",
													"    var arrCodes = [];",
													"    var lenOfCodes = rspBody._embedded.zones.length;",
													"    ",
													"    for(var base = 0; base < lenOfCodes; base++){",
													"        ",
													"        var codes = rspBody._embedded.zones[base].marketDomain;",
													"        arrCodes.push(codes);",
													"        ",
													"    }",
													"    ",
													"    return arrCodes;",
													"}",
													"",
													"function test(rspBody, index){",
													"    ",
													"    pm.test(\"Check if the code in the response body is same as what is used as parameter.\", function(){",
													"            ",
													"        pm.expect(getCode(rspBody)[index]).to.eql(paramOne);",
													"            ",
													"    });",
													"    ",
													"}",
													"",
													"function compareCodes(rspBody){",
													"    ",
													"    var lenOfCodesArr = getCode(rspBody).length;",
													"    ",
													"    for(var baseArr = 0; baseArr < lenOfCodesArr; baseArr++){",
													"        ",
													"        test(rspBody, baseArr);",
													"        ",
													"    }",
													"}",
													"",
													"function sendReq(nextPage){",
													"    ",
													"    pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"                console.log(err);",
													"                ",
													"            }else{",
													"            ",
													"               var jsonData = res.json();",
													"               ",
													"                compareCodes(jsonData);",
													"            }",
													"            ",
													"        });",
													"    ",
													"}",
													"",
													"function sendReqForAllThePages(){",
													"    ",
													"        if(totalPages > 1){",
													"            ",
													"            compareCodes(jsonRsp);",
													"            ",
													"            for(var base = 1; base < totalPages; base++){",
													"            ",
													"                var url = pm.request.url + \"&page=\" + base;",
													"                let nextPage = {url : url,",
													"                                header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                             },",
													"                         ",
													"                };",
													"            ",
													"                setTimeout(function(){sendReq(nextPage)}, 3000*base);",
													"            }",
													"        ",
													"        }else{",
													"        ",
													"            compareCodes(jsonRsp);",
													"        ",
													"        }",
													"    ",
													"}",
													"",
													"sendReqForAllThePages();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "458ae871-085f-4289-858c-9ca5076396ab",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlZones\"));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?marketDomain=international",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "marketDomain",
													"value": "international"
												}
											]
										},
										"description": "To get all the Shipments for the Day for the given Agent."
									},
									"response": []
								},
								{
									"name": "POR-1904: Retrieve Zone: GET: No parameters entered",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "dd400552-4e44-4c0b-ad89-362840f29db1",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "458ae871-085f-4289-858c-9ca5076396ab",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlZones\"));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}",
											"host": [
												"{{builtUrl}}"
											]
										},
										"description": "To get all the Shipments for the Day for the given Agent."
									},
									"response": []
								},
								{
									"name": "POR-1905: Retrieve Zone: GET: Using code, carrierCodes and salesAreaCode as parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "108b0dc4-0a2b-4abd-aa14-e0d48b9a6274",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "458ae871-085f-4289-858c-9ca5076396ab",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlZones\"));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?salesAreaCode=hnd&carrierCodes=jl&code=all",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "salesAreaCode",
													"value": "hnd"
												},
												{
													"key": "carrierCodes",
													"value": "jl"
												},
												{
													"key": "code",
													"value": "all"
												}
											]
										},
										"description": "To get all the Shipments for the Day for the given Agent."
									},
									"response": []
								},
								{
									"name": "POR-1906: Retrieve Zone: GET: Using code, marketDomain and carrierCodes as parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "108b0dc4-0a2b-4abd-aa14-e0d48b9a6274",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "458ae871-085f-4289-858c-9ca5076396ab",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlZones\"));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?code=jpn001&marketDomain=domestic&carrierCodes=jl",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "code",
													"value": "jpn001"
												},
												{
													"key": "marketDomain",
													"value": "domestic"
												},
												{
													"key": "carrierCodes",
													"value": "jl"
												}
											]
										},
										"description": "To get all the Shipments for the Day for the given Agent."
									},
									"response": []
								},
								{
									"name": "POR-1908: Retrieve Zone: GET: Using code, marketDomain and salesAreaCode as parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "108b0dc4-0a2b-4abd-aa14-e0d48b9a6274",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "458ae871-085f-4289-858c-9ca5076396ab",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlZones\"));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?code=all&marketDomain=international&salesAreaCode=hnd",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "code",
													"value": "all"
												},
												{
													"key": "marketDomain",
													"value": "international"
												},
												{
													"key": "salesAreaCode",
													"value": "hnd"
												}
											]
										},
										"description": "To get all the Shipments for the Day for the given Agent."
									},
									"response": []
								},
								{
									"name": "POR-1909: Retrieve Zone: GET: Using carrierCodes and salesAreaCode as parameters",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "108b0dc4-0a2b-4abd-aa14-e0d48b9a6274",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "458ae871-085f-4289-858c-9ca5076396ab",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlZones\"));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?carrierCodes=jl&salesAreaCode=hnd",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "carrierCodes",
													"value": "jl"
												},
												{
													"key": "salesAreaCode",
													"value": "hnd"
												}
											]
										},
										"description": "To get all the Shipments for the Day for the given Agent."
									},
									"response": []
								},
								{
									"name": "POR-1910: Retrieve Zone: GET: Sorted by code in asc mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "11ff573c-e76d-446d-ac48-66d082bf7ec2",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonRsp = pm.response.json();",
													"var totalPages = jsonRsp.page.totalPages;",
													"",
													"function getCode(){",
													"    ",
													"    var arrCodes = [];",
													"    var lenOfCodes = jsonRsp._embedded.zones.length;",
													"    ",
													"    for(var base = 0; base < lenOfCodes; base++){",
													"        ",
													"        var codes = jsonRsp._embedded.zones[base].code;",
													"        arrCodes.push(codes);",
													"        ",
													"    }",
													"    ",
													"    return arrCodes;",
													"}",
													"",
													"var expectedSorting = [\"ALL\", \"AOJ\", \"CHUGOK\", \"HOK\", \"KMQAXT\", \"KYU1\", \"KYU2\", \"KYU3\", \"LCL01\", \"SANIN\"];",
													"function test(index){",
													"    ",
													"    pm.test(\"Check if Zones is sorted by code in asc mode.\", function(){",
													"        ",
													"        pm.expect(expectedSorting[index]).to.eql(getCode()[index]);",
													"        ",
													"    });",
													"",
													"}",
													"",
													"function compareCodes(){",
													"    ",
													"    for(var base = 0; base < expectedSorting.length; base++){",
													"        test(base);",
													"    }",
													"}",
													"compareCodes();",
													"console.log(getCode());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "458ae871-085f-4289-858c-9ca5076396ab",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlZones\"));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?carrierCodes=jl&sort=code,asc&salesAreaCode=hnd",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "carrierCodes",
													"value": "jl"
												},
												{
													"key": "sort",
													"value": "code,asc"
												},
												{
													"key": "salesAreaCode",
													"value": "hnd"
												}
											]
										},
										"description": "To get all the Shipments for the Day for the given Agent."
									},
									"response": []
								},
								{
									"name": "POR-1910: Retrieve Zone: GET: Sorted by code in desc mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "e3e9d42c-2175-4e7d-bacd-d0549ab0cb86",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonRsp = pm.response.json();",
													"var totalPages = jsonRsp.page.totalPages;",
													"",
													"function getCode(){",
													"    ",
													"    var arrCodes = [];",
													"    var lenOfCodes = jsonRsp._embedded.zones.length;",
													"    ",
													"    for(var base = 0; base < lenOfCodes; base++){",
													"        ",
													"        var codes = jsonRsp._embedded.zones[base].code;",
													"        arrCodes.push(codes);",
													"        ",
													"    }",
													"    ",
													"    return arrCodes;",
													"}",
													"",
													"var expectedSorting = [\"SKKCHU\", \"SANYO\", \"SANIN\", \"LCL01\", \"KYU3\", \"KYU2\", \"KYU1\", \"KMQAXT\", \"HOK\", \"CHUGOK\"];",
													"function test(index){",
													"    ",
													"    pm.test(\"Check if Zones is sorted by code in asc mode.\", function(){",
													"        ",
													"        pm.expect(expectedSorting[index]).to.eql(getCode()[index]);",
													"        ",
													"    });",
													"",
													"}",
													"",
													"function compareCodes(){",
													"    ",
													"    for(var base = 0; base < expectedSorting.length; base++){",
													"        test(base);",
													"    }",
													"}",
													"compareCodes();",
													"console.log(getCode());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "458ae871-085f-4289-858c-9ca5076396ab",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlZones\"));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?carrierCodes=jl&sort=code,desc&salesAreaCode=hnd",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "carrierCodes",
													"value": "jl"
												},
												{
													"key": "sort",
													"value": "code,desc"
												},
												{
													"key": "salesAreaCode",
													"value": "hnd"
												}
											]
										},
										"description": "To get all the Shipments for the Day for the given Agent."
									},
									"response": []
								},
								{
									"name": "POR-1911: Retrieve Zone: GET: Sorted by name in asc mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "7d02172c-be3c-4491-ae00-87a0eee295a5",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonRsp = pm.response.json();",
													"var totalPages = jsonRsp.page.totalPages;",
													"",
													"function getCode(){",
													"    ",
													"    var arrCodes = [];",
													"    var lenOfCodes = jsonRsp._embedded.zones.length;",
													"    ",
													"    for(var base = 0; base < lenOfCodes; base++){",
													"        ",
													"        var codes = jsonRsp._embedded.zones[base].name;",
													"        arrCodes.push(codes);",
													"        ",
													"    }",
													"    ",
													"    return arrCodes;",
													"}",
													"",
													"var expectedSorting = [\"AKJ KUH OBO MMB\", \"AOJ+MSJ\", \"HIJ+OKJ+IZO\", \"HIJ+OKJ+IZO+TAK+TKS+MYJ+KCZ\", \"IZO+UBJ\", \"KMQ+AXT\", \"MMB???LCL\", \"NGS+KMI+OIT+KMJ+KOJ\", \"NGS+KMI+OIT+KMJ+KOJ+KKJ\", \"NGS+OIT+KMJ+KOJ\"];",
													"function test(index){",
													"    ",
													"    pm.test(\"Check if Zones is sorted by code in asc mode.\", function(){",
													"        ",
													"        pm.expect(expectedSorting[index]).to.eql(getCode()[index]);",
													"        ",
													"    });",
													"",
													"}",
													"",
													"function compareCodes(){",
													"    ",
													"    for(var base = 0; base < expectedSorting.length; base++){",
													"        test(base);",
													"    }",
													"}",
													"compareCodes();",
													"console.log(getCode());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "458ae871-085f-4289-858c-9ca5076396ab",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlZones\"));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?codes=jl&sort=name,asc&salesAreaCode=hnd",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "codes",
													"value": "jl"
												},
												{
													"key": "sort",
													"value": "name,asc"
												},
												{
													"key": "salesAreaCode",
													"value": "hnd"
												}
											]
										},
										"description": "To get all the Shipments for the Day for the given Agent."
									},
									"response": []
								},
								{
									"name": "POR-1911: Retrieve Zone: GET: Sorted by name in desc mode",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "b9949893-adc1-4b94-998d-9bf64ef80eea",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonRsp = pm.response.json();",
													"var totalPages = jsonRsp.page.totalPages;",
													"",
													"function getCode(){",
													"    ",
													"    var arrCodes = [];",
													"    var lenOfCodes = jsonRsp._embedded.zones.length;",
													"    ",
													"    for(var base = 0; base < lenOfCodes; base++){",
													"        ",
													"        var codes = jsonRsp._embedded.zones[base].name;",
													"        arrCodes.push(codes);",
													"        ",
													"    }",
													"    ",
													"    return arrCodes;",
													"}",
													"",
													"var expectedSorting = [\"SPK ITM FUK OKA AKJ OBO KUH MMB HKD AOJ MSJ AXT KMQ NGO SHM OKJ HIJ IZO UBJ TAK MYJ TKS KCZ KKJ OIT NGS KMJ KMI KOJ ASJ\", \"OKJ+HIJ\", \"NGS+OIT+KMJ+KOJ\", \"NGS+KMI+OIT+KMJ+KOJ+KKJ\", \"NGS+KMI+OIT+KMJ+KOJ\", \"MMB???LCL\", \"KMQ+AXT\", \"IZO+UBJ\", \"HIJ+OKJ+IZO+TAK+TKS+MYJ+KCZ\", \"HIJ+OKJ+IZO\"];",
													"function test(index){",
													"    ",
													"    pm.test(\"Check if Zones is sorted by code in asc mode.\", function(){",
													"        ",
													"        pm.expect(expectedSorting[index]).to.eql(getCode()[index]);",
													"        ",
													"    });",
													"",
													"}",
													"",
													"function compareCodes(){",
													"    ",
													"    for(var base = 0; base < expectedSorting.length; base++){",
													"        test(base);",
													"    }",
													"}",
													"compareCodes();",
													"console.log(getCode());"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "458ae871-085f-4289-858c-9ca5076396ab",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlZones\"));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?codes=jl&sort=name,desc&salesAreaCode=hnd",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "codes",
													"value": "jl"
												},
												{
													"key": "sort",
													"value": "name,desc"
												},
												{
													"key": "salesAreaCode",
													"value": "hnd"
												}
											]
										},
										"description": "To get all the Shipments for the Day for the given Agent."
									},
									"response": []
								},
								{
									"name": "POR-1912: Retrieve Zone: GET: Page = 2 as parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "76d85318-e0b4-4a58-8eec-39b6d44f6c0f",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var josnRsp = pm.response.json();",
													"var pageNumber = josnRsp.page.number;",
													"",
													"function comparePage(){",
													"    ",
													"    var rspPage = parseInt(pageNumber);",
													"    pm.test(\"Compare page to expected.\", function(){",
													"        ",
													"        pm.expect(2).to.eql(rspPage);",
													"    });",
													"}",
													"",
													"comparePage();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "458ae871-085f-4289-858c-9ca5076396ab",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlZones\"));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?page=2",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "page",
													"value": "2"
												}
											]
										},
										"description": "To get all the Shipments for the Day for the given Agent."
									},
									"response": []
								},
								{
									"name": "POR-1913: Retrieve Zone: GET: Size = 5 as parameter",
									"event": [
										{
											"listen": "test",
											"script": {
												"id": "3c727fc3-8f80-4389-95dc-a2ae39237641",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonRsp = pm.response.json();",
													"var totalPages = jsonRsp.page.totalPages;",
													"var paramOne = pm.request.url.query.reference.size.value;",
													"",
													"function getCode(){",
													"    ",
													"    var arrCodes = [];",
													"    var lenOfCodes = jsonRsp._embedded.zones.length;",
													"    ",
													"    for(var base = 0; base < lenOfCodes; base++){",
													"        ",
													"        var codes = jsonRsp._embedded.zones[base].code;",
													"        arrCodes.push(codes);",
													"        ",
													"    }",
													"    ",
													"    return arrCodes;",
													"}",
													"",
													"function comparePage(){",
													"",
													"    pm.test(\"Compare page to expected.\", function(){",
													"        ",
													"        var size = parseInt(paramOne);",
													"        pm.expect(size).to.eql(getCode().length);",
													"    });",
													"}",
													"",
													"comparePage();"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"id": "458ae871-085f-4289-858c-9ca5076396ab",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlZones\"));",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?size=5",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "size",
													"value": "5"
												}
											]
										},
										"description": "To get all the Shipments for the Day for the given Agent."
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				},
				{
					"name": "POR-1889",
					"item": [
						{
							"name": "Business_Scenarios",
							"item": [
								{
									"name": "POR-2086: Retrieve List of Aircraft Types: GET: No parameter entered",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5102f138-a3c4-428e-9026-00fe2b67a926",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForAcType\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "4f33b54e-e53c-4b62-893c-83258c36fb91",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}",
											"host": [
												"{{builtUrl}}"
											]
										},
										"description": "Airport not assigned to any sales area, request parameter is countryCode"
									},
									"response": []
								},
								{
									"name": "POR-2087: Retrieve List of Aircraft Types: GET: Using code as parameter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "97001856-44ed-443a-bb34-4e76152ceeda",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForAcType\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ed22111e-b041-4d3b-98ac-cca59baa13ee",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonBody = pm.response.json();",
													"",
													"function test(){",
													"    ",
													"    var len = jsonBody._embedded.transportMeansTypes.length;",
													"    ",
													"    pm.test(\"Check that the codes in response is equal to code used in parameter\", function(){",
													"        ",
													"        var countryCodeParameter = pm.request.url.query.reference.code.value;",
													"    ",
													"        for(var baseLen = 0; baseLen < len; baseLen++){",
													"            ",
													"            var countryCode = jsonBody._embedded.transportMeansTypes[baseLen].code;",
													"            ",
													"            pm.expect(countryCodeParameter).to.eql(countryCode);",
													"            ",
													"        }",
													"    });   ",
													"    ",
													"}",
													"",
													"function sendToNextPage(nextPage){",
													"    ",
													"            pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"               console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"               var jsonData = res.json();",
													"               var lenOfAirports = jsonData._embedded.transportMeansTypes.length;",
													"               ",
													"               pm.test(\"Check the Aiports Country code is same of what is in the Parameter.\", function (){",
													"    ",
													"                    for(var baseNextPage = 0; baseNextPage < lenOfAirports; baseNextPage++){",
													"                            ",
													"                            var airportsStatusParamNextPage = pm.request.url.query.reference.code.value;",
													"                            var airportsStatusBookingsNextPage = jsonData._embedded.transportMeansTypes[baseNextPage].code;",
													"                                ",
													"                                pm.expect(airportsStatusParamNextPage).to.eql(airportsStatusBookingsNextPage);",
													"        ",
													"                        }",
													"                    ",
													"                });",
													"            }",
													"            ",
													"        });",
													"        ",
													"}",
													"",
													"function sendNextReq(){",
													"    ",
													"    var totPages = jsonBody.page.totalPages;",
													"",
													"    if(totPages > 1){",
													"        ",
													"        for(var base = 1; base < totPages; base++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + base;",
													"            ",
													"            let nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            setTimeout(function(){sendToNextPage(nextPage)}, 3000*base);",
													"        }",
													"        ",
													"    }",
													"}",
													"test();",
													"sendNextReq();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?code=747-100",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "code",
													"value": "747-100"
												}
											]
										},
										"description": "Airport not assigned to any sales area, request parameter is countryCode"
									},
									"response": []
								},
								{
									"name": "POR-2088: Retrieve List of Aircraft Types: GET: Using carrierCode as parameter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "97001856-44ed-443a-bb34-4e76152ceeda",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForAcType\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b91548ab-b1b8-4457-b187-5c7fd6fcd746",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonBody = pm.response.json();",
													"",
													"function test(){",
													"    ",
													"    var len = jsonBody._embedded.transportMeansTypes.length;",
													"    ",
													"    pm.test(\"Check that the codes in response is equal to code used in parameter\", function(){",
													"        ",
													"        var countryCodeParameter = pm.request.url.query.reference.carrierCode.value;",
													"    ",
													"        for(var baseLen = 0; baseLen < len; baseLen++){",
													"            ",
													"            var countryCode = jsonBody._embedded.transportMeansTypes[baseLen].carrier.code;",
													"            ",
													"            pm.expect(countryCodeParameter).to.eql(countryCode);",
													"            ",
													"        }",
													"    });",
													"}",
													"",
													"function sendToNextPage(nextPage){",
													"    ",
													"            pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"               console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"               var jsonData = res.json();",
													"               var lenOfAirports = jsonData._embedded.transportMeansTypes.length;",
													"               ",
													"               pm.test(\"Check the Aiports Country code is same of what is in the Parameter.\", function (){",
													"    ",
													"                    for(var baseNextPage = 0; baseNextPage < lenOfAirports; baseNextPage++){",
													"                            ",
													"                            var airportsStatusParamNextPage = pm.request.url.query.reference.carrierCode.value;",
													"                            var airportsStatusBookingsNextPage = jsonData._embedded.transportMeansTypes[baseNextPage].carrier.code;",
													"                                ",
													"                                pm.expect(airportsStatusParamNextPage).to.eql(airportsStatusBookingsNextPage);",
													"        ",
													"                        }",
													"                    ",
													"                });",
													"            }",
													"            ",
													"        });",
													"        ",
													"}",
													"",
													"function sendNextReq(){",
													"    ",
													"    var totPages = jsonBody.page.totalPages;",
													"",
													"    if(totPages > 1){",
													"        ",
													"        for(var base = 1; base < totPages; base++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + base;",
													"            ",
													"            let nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            setTimeout(function(){sendToNextPage(nextPage)}, 3000*base);",
													"        }",
													"        ",
													"    }",
													"}",
													"",
													"test();",
													"sendNextReq();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?carrierCode=JL",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "carrierCode",
													"value": "JL"
												}
											]
										},
										"description": "Airport not assigned to any sales area, request parameter is countryCode"
									},
									"response": []
								},
								{
									"name": "POR-2089: Retrieve List of Aircraft Types: GET: Using originCode as parameter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "97001856-44ed-443a-bb34-4e76152ceeda",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForAcType\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "1de69f6a-5df4-4eac-a480-cc924ca68664",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonBody = pm.response.json();",
													"",
													"function test(){",
													"    ",
													"    var len = jsonBody._embedded.transportMeansTypes.length;",
													"    ",
													"    pm.test(\"Check that the codes in response is equal to code used in parameter\", function(){",
													"        ",
													"        var countryCodeParameter = pm.request.url.query.reference.originCode.value;",
													"    ",
													"        for(var baseLen = 0; baseLen < len; baseLen++){",
													"            ",
													"            var countryCode = jsonBody._embedded.transportMeansTypes[baseLen].origin.code;",
													"            ",
													"            pm.expect(countryCodeParameter).to.eql(countryCode);",
													"            ",
													"        }",
													"    });",
													"    ",
													"}",
													"",
													"function sendToNextPage(nextPage){",
													"    ",
													"            pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"               console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"               var jsonData = res.json();",
													"               var lenOfAirports = jsonData._embedded.transportMeansTypes.length;",
													"               ",
													"               pm.test(\"Check the Aiports Country code is same of what is in the Parameter.\", function (){",
													"    ",
													"                    for(var baseNextPage = 0; baseNextPage < lenOfAirports; baseNextPage++){",
													"                            ",
													"                            var airportsStatusParamNextPage = pm.request.url.query.reference.originCode.value;",
													"                            var airportsStatusBookingsNextPage = jsonData._embedded.transportMeansTypes[baseNextPage].origin.code;",
													"                                ",
													"                                pm.expect(airportsStatusParamNextPage).to.eql(airportsStatusBookingsNextPage);",
													"        ",
													"                        }",
													"                    ",
													"                });",
													"            }",
													"            ",
													"        });",
													"        ",
													"}",
													"",
													"function sendNextReq(){",
													"    ",
													"    var totPages = jsonBody.page.totalPages;",
													"    ",
													"    if(totPages > 1){",
													"        ",
													"        for(var base = 1; base < totPages; base++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + base;",
													"            ",
													"            let nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            setTimeout(function(){sendToNextPage(nextPage)}, 3000*base);",
													"        }",
													"        ",
													"    }",
													"}",
													"",
													"test();",
													"sendNextReq();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?originCode=HND",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "originCode",
													"value": "HND"
												}
											]
										},
										"description": "Airport not assigned to any sales area, request parameter is countryCode"
									},
									"response": []
								},
								{
									"name": "POR-2090: Retrieve List of Aircraft Types: GET: Using destinationCode as parameter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "97001856-44ed-443a-bb34-4e76152ceeda",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForAcType\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7894f49a-110f-44aa-a3f7-a5e29bdbdb7b",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonBody = pm.response.json();",
													"",
													"function test(){",
													"",
													"    var len = jsonBody._embedded.transportMeansTypes.length;",
													"    ",
													"    pm.test(\"Check that the codes in response is equal to code used in parameter\", function(){",
													"        ",
													"        var countryCodeParameter = pm.request.url.query.reference.destinationCode.value;",
													"    ",
													"        for(var baseLen = 0; baseLen < len; baseLen++){",
													"            ",
													"            var countryCode = jsonBody._embedded.transportMeansTypes[baseLen].destination.code;",
													"            ",
													"            pm.expect(countryCodeParameter).to.eql(countryCode);",
													"            ",
													"        }",
													"    });",
													"",
													"}",
													"",
													"function sendToNextPage(nextPage){",
													"    ",
													"            pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"               console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"               var jsonData = res.json();",
													"               var lenOfAirports = jsonData._embedded.transportMeansTypes.length;",
													"               ",
													"               pm.test(\"Check the Aiports Country code is same of what is in the Parameter.\", function (){",
													"    ",
													"                    for(var baseNextPage = 0; baseNextPage < lenOfAirports; baseNextPage++){",
													"                            ",
													"                            var airportsStatusParamNextPage = pm.request.url.query.reference.destinationCode.value;",
													"                            var airportsStatusBookingsNextPage = jsonData._embedded.transportMeansTypes[baseNextPage].destination.code;",
													"                                ",
													"                                pm.expect(airportsStatusParamNextPage).to.eql(airportsStatusBookingsNextPage);",
													"        ",
													"                        }",
													"                    ",
													"                });",
													"            }",
													"            ",
													"        });",
													"        ",
													"}",
													"",
													"function sendNextReq(){",
													"",
													"    var totPages = jsonBody.page.totalPages;",
													"    ",
													"    if(totPages > 1){",
													"        ",
													"        for(var base = 1; base < totPages; base++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + base;",
													"            ",
													"            let nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            setTimeout(function(){sendToNextPage(nextPage)}, 3000*base);",
													"        }",
													"        ",
													"    }",
													"",
													"}",
													"",
													"test();",
													"sendNextReq();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?destinationCode=MNL",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "destinationCode",
													"value": "MNL"
												}
											]
										},
										"description": "Airport not assigned to any sales area, request parameter is countryCode"
									},
									"response": []
								},
								{
									"name": "POR-2091: Retrieve List of Aircraft Types: GET: Using registration as parameter",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "97001856-44ed-443a-bb34-4e76152ceeda",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForAcType\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a2b23e83-9838-40c4-b4af-329063c1a7ce",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonBody = pm.response.json();",
													"",
													"function test(){",
													"",
													"    var len = jsonBody._embedded.transportMeansTypes.length;",
													"    ",
													"    pm.test(\"Check that the codes in response is equal to code used in parameter\", function(){",
													"        ",
													"        var countryCodeParameter = pm.request.url.query.reference.registration.value;",
													"    ",
													"        for(var baseLen = 0; baseLen < len; baseLen++){",
													"            ",
													"            var countryCode = jsonBody._embedded.transportMeansTypes[baseLen].registration;",
													"            ",
													"            pm.expect(countryCodeParameter).to.eql(countryCode);",
													"            ",
													"        }",
													"    });",
													"",
													"}",
													"",
													"function sendToNextPage(nextPage){",
													"    ",
													"            pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"               console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"               var jsonData = res.json();",
													"               var lenOfAirports = jsonData._embedded.transportMeansTypes.length;",
													"               ",
													"               pm.test(\"Check the Aiports Country code is same of what is in the Parameter.\", function (){",
													"    ",
													"                    for(var baseNextPage = 0; baseNextPage < lenOfAirports; baseNextPage++){",
													"                            ",
													"                            var airportsStatusParamNextPage = pm.request.url.query.reference.registration.value;",
													"                            var airportsStatusBookingsNextPage = jsonData._embedded.transportMeansTypes[baseNextPage].registration;",
													"                                ",
													"                                pm.expect(airportsStatusParamNextPage).to.eql(airportsStatusBookingsNextPage);",
													"        ",
													"                        }",
													"                    ",
													"                });",
													"            }",
													"            ",
													"        });",
													"        ",
													"}",
													"",
													"function sendNextReq(){",
													"",
													"    var totPages = jsonBody.page.totalPages;",
													"    ",
													"    if(totPages > 1){",
													"        ",
													"        for(var base = 1; base < totPages; base++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + base;",
													"            ",
													"            let nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            setTimeout(function(){sendToNextPage(nextPage)}, 3000*base);",
													"        }",
													"        ",
													"    }",
													"",
													"}",
													"",
													"test();",
													"sendNextReq();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?registration=T-RUCK",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "registration",
													"value": "T-RUCK"
												}
											]
										},
										"description": "Airport not assigned to any sales area, request parameter is countryCode"
									},
									"response": []
								},
								{
									"name": "POR-2092: Retrieve List of Aircraft Types: GET: Using code and carrierCode as parameters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "97001856-44ed-443a-bb34-4e76152ceeda",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForAcType\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "bbe4eb5c-1519-4fe9-9a34-490e7041c957",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonBody = pm.response.json();",
													"",
													"function test(){",
													"    ",
													"    var len = jsonBody._embedded.transportMeansTypes.length;",
													"    ",
													"    pm.test(\"Check that the codes in response is equal to code used in parameter\", function(){",
													"        ",
													"        var firstParam = pm.request.url.query.reference.code.value;",
													"        var firstParamUpperCase = firstParam.toUpperCase();",
													"        ",
													"        var secondParam = pm.request.url.query.reference.carrierCode.value;",
													"        var secondParamUpperCase = secondParam.toUpperCase();",
													"    ",
													"        for(var baseLen = 0; baseLen < len; baseLen++){",
													"            ",
													"            var code = jsonBody._embedded.transportMeansTypes[baseLen].code;",
													"            var carrierCode = jsonBody._embedded.transportMeansTypes[baseLen].carrier.code;",
													"            ",
													"            pm.expect(firstParamUpperCase).to.eql(code);",
													"            pm.expect(secondParamUpperCase).to.eql(carrierCode);",
													"            ",
													"        }",
													"    });",
													"",
													"}",
													"",
													"function sendToNextPage(nextPage){",
													"    ",
													"            pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"               console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"               var jsonData = res.json();",
													"               var lenOfAirports = jsonData._embedded.transportMeansTypes.length;",
													"               ",
													"               pm.test(\"Check the Aiports Country code is same of what is in the Parameter.\", function (){",
													"    ",
													"                    for(var baseNextPage = 0; baseNextPage < lenOfAirports; baseNextPage++){",
													"                            ",
													"                            var firstParamNextPage = pm.request.url.query.reference.code.value;",
													"                            var firstParamUpperCaseNextPage = firstParam.toUpperCase();",
													"    ",
													"                            var secondParamNextPage = pm.request.url.query.reference.carrierCode.value;",
													"                            var secondParamUpperCaseNextPage = secondParam.toUpperCase();",
													"    ",
													"                            var codeNextPage = jsonData._embedded.transportMeansTypes[baseNextPage].code;",
													"                            var carrierCodeNextPage = jsonData._embedded.transportMeansTypes[baseNextPage].carrier.code; ",
													"                            ",
													"                                pm.expect(firstParamUpperCaseNextPage).to.eql(codeNextPage);",
													"                                pm.expect(secondParamUpperCaseNextPage).to.eql(carrierCodeNextPage);",
													"        ",
													"                        }",
													"                    ",
													"                });",
													"            }",
													"            ",
													"        });",
													"        ",
													"}",
													"",
													"function sendNextReq(){",
													"",
													"    var totPages = jsonBody.page.totalPages;",
													"    ",
													"    if(totPages > 1){",
													"        ",
													"        for(var base = 1; base < totPages; base++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + base;",
													"            ",
													"            let nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            setTimeout(function(){sendToNextPage(nextPage)}, 3000*base);",
													"        }",
													"        ",
													"    }",
													"",
													"}",
													"",
													"test();",
													"sendNextReq();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?code=rfs&carrierCode=xs",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "code",
													"value": "rfs"
												},
												{
													"key": "carrierCode",
													"value": "xs"
												}
											]
										},
										"description": "Airport not assigned to any sales area, request parameter is countryCode"
									},
									"response": []
								},
								{
									"name": "POR-2093: Retrieve List of Aircraft Types: GET: Using carrierCode and originCode parameters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "97001856-44ed-443a-bb34-4e76152ceeda",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForAcType\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "de697506-8920-4287-b04f-b76ea1816751",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonBody = pm.response.json();",
													"",
													"function test(){",
													"    ",
													"    var len = jsonBody._embedded.transportMeansTypes.length;",
													"    ",
													"    pm.test(\"Check that the codes in response is equal to code used in parameter\", function(){",
													"        ",
													"        var firstParam = pm.request.url.query.reference.originCode.value;",
													"        var firstParamUpperCase = firstParam.toUpperCase();",
													"        ",
													"        var secondParam = pm.request.url.query.reference.carrierCode.value;",
													"        var secondParamUpperCase = secondParam.toUpperCase();",
													"    ",
													"        for(var baseLen = 0; baseLen < len; baseLen++){",
													"            ",
													"            var code = jsonBody._embedded.transportMeansTypes[baseLen].origin.code;",
													"            var carrierCode = jsonBody._embedded.transportMeansTypes[baseLen].carrier.code;",
													"            ",
													"            pm.expect(firstParamUpperCase).to.eql(code);",
													"            pm.expect(secondParamUpperCase).to.eql(carrierCode);",
													"            ",
													"        }",
													"    });",
													"",
													"}",
													"",
													"function sendToNextPage(nextPage){",
													"    ",
													"            pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"               console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"               var jsonData = res.json();",
													"               var lenOfAirports = jsonData._embedded.transportMeansTypes.length;",
													"               ",
													"               pm.test(\"Check the Aiports Country code is same of what is in the Parameter.\", function (){",
													"    ",
													"                    for(var baseNextPage = 0; baseNextPage < lenOfAirports; baseNextPage++){",
													"                            ",
													"                            var firstParamNextPage = pm.request.url.query.reference.originCode.value;",
													"                            var firstParamUpperCaseNextPage = firstParam.toUpperCase();",
													"    ",
													"                            var secondParamNextPage = pm.request.url.query.reference.carrierCode.value;",
													"                            var secondParamUpperCaseNextPage = secondParam.toUpperCase();",
													"    ",
													"                            var codeNextPage = jsonData._embedded.transportMeansTypes[baseNextPage].origin.code;",
													"                            var carrierCodeNextPage = jsonData._embedded.transportMeansTypes[baseNextPage].carrier.code; ",
													"                            ",
													"                                pm.expect(firstParamUpperCaseNextPage).to.eql(codeNextPage);",
													"                                pm.expect(secondParamUpperCaseNextPage).to.eql(carrierCodeNextPage);",
													"        ",
													"                        }",
													"                    ",
													"                });",
													"            }",
													"            ",
													"        });",
													"        ",
													"}",
													"",
													"function sendNextReq(){",
													"    ",
													"    var totPages = jsonBody.page.totalPages;",
													"    ",
													"    if(totPages > 1){",
													"        ",
													"        for(var base = 1; base < totPages; base++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + base;",
													"            ",
													"            let nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            setTimeout(function(){sendToNextPage(nextPage)}, 3000*base);",
													"        }",
													"        ",
													"    }",
													"",
													"}",
													"",
													"test();",
													"sendNextReq();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?originCode=hnd&carrierCode=jl",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "originCode",
													"value": "hnd"
												},
												{
													"key": "carrierCode",
													"value": "jl"
												}
											]
										},
										"description": "Airport not assigned to any sales area, request parameter is countryCode"
									},
									"response": []
								},
								{
									"name": "POR-2094: Retrieve List of Aircraft Types: GET: Using originCode and destinationCode parameters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "97001856-44ed-443a-bb34-4e76152ceeda",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForAcType\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "e4b1b563-b982-44e1-88fe-969132553034",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonBody = pm.response.json();",
													"",
													"function test(){",
													"",
													"    var len = jsonBody._embedded.transportMeansTypes.length;",
													"    ",
													"    pm.test(\"Check that the codes in response is equal to code used in parameter\", function(){",
													"        ",
													"        var firstParam = pm.request.url.query.reference.destinationCode.value;",
													"        var firstParamUpperCase = firstParam.toUpperCase();",
													"        ",
													"        var secondParam = pm.request.url.query.reference.carrierCode.value;",
													"        var secondParamUpperCase = secondParam.toUpperCase();",
													"    ",
													"        for(var baseLen = 0; baseLen < len; baseLen++){",
													"            ",
													"            var code = jsonBody._embedded.transportMeansTypes[baseLen].destination.code;",
													"            var carrierCode = jsonBody._embedded.transportMeansTypes[baseLen].carrier.code;",
													"            ",
													"            pm.expect(firstParamUpperCase).to.eql(code);",
													"            pm.expect(secondParamUpperCase).to.eql(carrierCode);",
													"            ",
													"        }",
													"    });",
													"",
													"}",
													"",
													"function sendToNextPage(nextPage){",
													"    ",
													"            pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"               console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"               var jsonData = res.json();",
													"               var lenOfAirports = jsonData._embedded.transportMeansTypes.length;",
													"               ",
													"               pm.test(\"Check the Aiports Country code is same of what is in the Parameter.\", function (){",
													"    ",
													"                    for(var baseNextPage = 0; baseNextPage < lenOfAirports; baseNextPage++){",
													"                            ",
													"                            var firstParamNextPage = pm.request.url.query.reference.destinationCode.value;",
													"                            var firstParamUpperCaseNextPage = firstParam.toUpperCase();",
													"    ",
													"                            var secondParamNextPage = pm.request.url.query.reference.carrierCode.value;",
													"                            var secondParamUpperCaseNextPage = secondParam.toUpperCase();",
													"    ",
													"                            var codeNextPage = jsonData._embedded.transportMeansTypes[baseNextPage].destination.code;",
													"                            var carrierCodeNextPage = jsonData._embedded.transportMeansTypes[baseNextPage].carrier.code; ",
													"                            ",
													"                                pm.expect(firstParamUpperCaseNextPage).to.eql(codeNextPage);",
													"                                pm.expect(secondParamUpperCaseNextPage).to.eql(carrierCodeNextPage);",
													"        ",
													"                        }",
													"                    ",
													"                });",
													"            }",
													"            ",
													"        });",
													"        ",
													"}",
													"",
													"function sendNextReq(){",
													"    ",
													"    var totPages = jsonBody.page.totalPages;",
													"    ",
													"    if(totPages > 1){",
													"        ",
													"        for(var base = 1; base < totPages; base++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + base;",
													"            ",
													"            let nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            setTimeout(function(){sendToNextPage(nextPage)}, 3000*base);",
													"        }",
													"        ",
													"    }",
													"",
													"}",
													"",
													"test();",
													"sendNextReq();",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?destinationCode=mnl&carrierCode=xs",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "destinationCode",
													"value": "mnl"
												},
												{
													"key": "carrierCode",
													"value": "xs"
												}
											]
										},
										"description": "Airport not assigned to any sales area, request parameter is countryCode"
									},
									"response": []
								},
								{
									"name": "POR-2095: Retrieve List of Aircraft Types: GET: Using carrierCode, originCode and destinationCode parameters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "97001856-44ed-443a-bb34-4e76152ceeda",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForAcType\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "afcbd8c4-a28b-4652-b137-a041dc283d7c",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonBody = pm.response.json();",
													"",
													"function test(){",
													"    ",
													"    var len = jsonBody._embedded.transportMeansTypes.length;",
													"    ",
													"    pm.test(\"Check that the codes in response is equal to code used in parameter\", function(){",
													"        ",
													"        var firstParam = pm.request.url.query.reference.originCode.value;",
													"        var firstParamUpperCase = firstParam.toUpperCase();",
													"        ",
													"        var secondParam = pm.request.url.query.reference.destinationCode.value;",
													"        var secondParamUpperCase = secondParam.toUpperCase();",
													"        ",
													"        var thirdParam = pm.request.url.query.reference.carrierCode.value;",
													"        var thirdParamUpperCase = thirdParam.toUpperCase();",
													"    ",
													"        for(var baseLen = 0; baseLen < len; baseLen++){",
													"            ",
													"            var code = jsonBody._embedded.transportMeansTypes[baseLen].origin.code;",
													"            var destCode = jsonBody._embedded.transportMeansTypes[baseLen].destination.code;",
													"            var carrierCode = jsonBody._embedded.transportMeansTypes[baseLen].carrier.code;",
													"            ",
													"            pm.expect(firstParamUpperCase).to.eql(code);",
													"            pm.expect(secondParamUpperCase).to.eql(destCode);",
													"            pm.expect(thirdParamUpperCase).to.eql(carrierCode);",
													"            ",
													"        }",
													"    });",
													"",
													"}",
													"",
													"function sendToNextPage(nextPage){",
													"    ",
													"            pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"               console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"               var jsonData = res.json();",
													"               var lenOfAirports = jsonData._embedded.transportMeansTypes.length;",
													"               ",
													"               pm.test(\"Check the Aiports Country code is same of what is in the Parameter.\", function (){",
													"    ",
													"                    for(var baseNextPage = 0; baseNextPage < lenOfAirports; baseNextPage++){",
													"                            ",
													"                            var firstParamNextPage = pm.request.url.query.reference.originCode.value;",
													"                            var firstParamUpperCaseNextPage = firstParam.toUpperCase();",
													"    ",
													"                            var secondParamNextPage = pm.request.url.query.reference.destinationCode.value;",
													"                            var secondParamUpperCaseNextPage = secondParam.toUpperCase();",
													"                            ",
													"                            var thirdParamNextPage = pm.request.url.query.reference.carrierCode.value;",
													"                            var thirdParamUpperCaseNextPage = thirdParamNextPage.toUpperCase();",
													"    ",
													"                            var codeNextPage = jsonData._embedded.transportMeansTypes[baseNextPage].origin.code;",
													"                            var destCodeNextPage = jsonData._embedded.transportMeansTypes[baseNextPage].destination.code; ",
													"                            var carrierCodeNextPage = jsonData._embedded.transportMeansTypes[baseNextPage].carrier.code; ",
													"                            ",
													"                                pm.expect(firstParamUpperCaseNextPage).to.eql(codeNextPage);",
													"                                pm.expect(secondParamUpperCaseNextPage).to.eql(destCodeNextPage);",
													"                                pm.expect(thirdParamUpperCaseNextPage).to.eql(carrierCodeNextPage);",
													"        ",
													"                        }",
													"                    ",
													"                });",
													"            }",
													"            ",
													"        });",
													"        ",
													"}",
													"",
													"function sendNextReq(){",
													"    ",
													"    var totPages = jsonBody.page.totalPages;",
													"    ",
													"    if(totPages > 1){",
													"        ",
													"        for(var base = 1; base < totPages; base++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + base;",
													"            ",
													"            let nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            setTimeout(function(){sendToNextPage(nextPage)}, 3000*base);",
													"        }",
													"        ",
													"    }",
													"    ",
													"}",
													"",
													"test();",
													"sendNextReq();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?originCode=lax&destinationCode=mnl&carrierCode=xs",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "originCode",
													"value": "lax"
												},
												{
													"key": "destinationCode",
													"value": "mnl"
												},
												{
													"key": "carrierCode",
													"value": "xs"
												}
											]
										},
										"description": "Airport not assigned to any sales area, request parameter is countryCode"
									},
									"response": []
								},
								{
									"name": "POR-2097: Retrieve List of Aircraft Types: GET: Sorted by code DESC mode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5102f138-a3c4-428e-9026-00fe2b67a926",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForAcType\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "b85d830a-76eb-4a81-a002-afdaffbc6d99",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var rspBody = pm.response.json();",
													"var totPages = rspBody.page.totalPages;",
													"",
													"function getCodes(responseBodyCodes){",
													"    ",
													"    var arrCodes = [];",
													"    var acTypeLen = responseBodyCodes._embedded.transportMeansTypes.length;",
													"    ",
													"    for(var base = 0; base < acTypeLen; base++){",
													"        ",
													"        var code = responseBodyCodes._embedded.transportMeansTypes[base].code;",
													"        arrCodes.push(code);",
													"        ",
													"    }",
													"    ",
													"    return arrCodes;",
													"}",
													"",
													"function test(responseBodyTest){",
													"    ",
													"    var arrCodesDesc = getCodes(responseBodyTest).sort(function (a, b){",
													"    ",
													"            if (a > b) {",
													"                return -1;",
													"            }",
													"            if (b > a) {",
													"                return 1;",
													"            }",
													"            return 0;",
													"        });",
													"        ",
													"    console.log(arrCodesDesc);",
													"        ",
													"    var arrCodes = getCodes(responseBodyTest);",
													"    console.log(arrCodes);",
													"    ",
													"    var len = getCodes(responseBodyTest).length;",
													"    ",
													"    pm.test(\"Check if the list of Codes is sorted by Descending manner (for all the pages).\", function(){",
													"        ",
													"        for(var baseArr = 0; baseArr < len; baseArr++){",
													"            ",
													"            pm.expect(arrCodesDesc[baseArr]).to.eql(arrCodes[baseArr]);",
													"            ",
													"        }",
													"    });",
													"}",
													"",
													"//Succeeding Pages",
													"function sendToNextPage(nextPage){",
													"    ",
													"            pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"               console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"               var jsonData = res.json();",
													"               test(jsonData);",
													"                ",
													"            }",
													"            ",
													"        });",
													"        ",
													"}",
													"",
													"function sendForSucPages(){",
													"    ",
													"        if(totPages > 1){",
													"        ",
													"        for(var base = 1; base < totPages; base++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + base;",
													"            ",
													"            let nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'Accept' : 'application/json',",
													"                                   'Content-Type' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            setTimeout(function(){sendToNextPage(nextPage)}, 3000*base);",
													"        }",
													"    ",
													"    }",
													"}",
													"",
													"//First Page",
													"test(rspBody);",
													"sendForSucPages();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?carrierCode=xs&sort=code,desc",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "carrierCode",
													"value": "xs"
												},
												{
													"key": "sort",
													"value": "code,desc"
												}
											]
										},
										"description": "Airport not assigned to any sales area, request parameter is countryCode"
									},
									"response": []
								},
								{
									"name": "POR-2097: Retrieve List of Aircraft Types: GET: Sorted by code ASC mode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5102f138-a3c4-428e-9026-00fe2b67a926",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForAcType\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ec68e8e0-dbf4-471b-a688-077db04d8f0f",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var rspBody = pm.response.json();",
													"var totPages = rspBody.page.totalPages;",
													"",
													"function getCodes(responseBodyCodes){",
													"    ",
													"    var arrCodes = [];",
													"    var acTypeLen = responseBodyCodes._embedded.transportMeansTypes.length;",
													"    ",
													"    for(var base = 0; base < acTypeLen; base++){",
													"        ",
													"        var code = responseBodyCodes._embedded.transportMeansTypes[base].code;",
													"        arrCodes.push(code);",
													"        ",
													"    }",
													"    ",
													"    return arrCodes;",
													"}",
													"",
													"function test(responseBodyTest){",
													"    ",
													"    var arrCodesDesc = getCodes(responseBodyTest).sort();",
													"        ",
													"    console.log(arrCodesDesc);",
													"        ",
													"    var arrCodes = getCodes(responseBodyTest);",
													"    console.log(arrCodes);",
													"    ",
													"    var len = getCodes(responseBodyTest).length;",
													"    ",
													"    pm.test(\"Check if the list of Codes is sorted by Ascending manner (for all the pages).\", function(){",
													"        ",
													"        for(var baseArr = 0; baseArr < len; baseArr++){",
													"            ",
													"            pm.expect(arrCodesDesc[baseArr]).to.eql(arrCodes[baseArr]);",
													"            ",
													"        }",
													"    });",
													"}",
													"",
													"//Succeeding Pages",
													"function sendToNextPage(nextPage){",
													"    ",
													"            pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"               console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"               var jsonData = res.json();",
													"               test(jsonData);",
													"                ",
													"            }",
													"            ",
													"        });",
													"        ",
													"}",
													"",
													"function sendForSucPages(){",
													"    ",
													"        if(totPages > 1){",
													"        ",
													"        for(var base = 1; base < totPages; base++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + base;",
													"            ",
													"            let nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'Accept' : 'application/json',",
													"                                   'Content-Type' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            setTimeout(function(){sendToNextPage(nextPage)}, 3000*base);",
													"        }",
													"    ",
													"    }",
													"}",
													"",
													"//First Page",
													"test(rspBody);",
													"sendForSucPages();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?carrierCode=xs&sort=code,asc",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "carrierCode",
													"value": "xs"
												},
												{
													"key": "sort",
													"value": "code,asc"
												}
											]
										},
										"description": "Airport not assigned to any sales area, request parameter is countryCode"
									},
									"response": []
								},
								{
									"name": "POR-2098: Retrieve List of Aircraft Types: GET: Sorted by carrier.code DESC mode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5102f138-a3c4-428e-9026-00fe2b67a926",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForAcType\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "676a9967-d5ed-48bd-928c-033973fd13fe",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var rspBody = pm.response.json();",
													"var totPages = rspBody.page.totalPages;",
													"",
													"function getCarrierCodes(responseBodyCodes){",
													"    ",
													"    var arrCarCodes = [];",
													"    var acTypeLen = responseBodyCodes._embedded.transportMeansTypes.length;",
													"    ",
													"    for(var base = 0; base < acTypeLen; base++){",
													"        ",
													"        var objectNames = Object.keys(responseBodyCodes._embedded.transportMeansTypes[base]);",
													"        if(!objectNames.includes('carrier')){",
													"            ",
													"            continue;",
													"            ",
													"        }else{",
													"            ",
													"            var code = responseBodyCodes._embedded.transportMeansTypes[base].carrier.code;",
													"            arrCarCodes.push(code);  ",
													"            ",
													"        }",
													"    }",
													"    ",
													"    return arrCarCodes;",
													"}",
													"",
													"function test(responseBodyTest){",
													"    ",
													"    var arrCodesDesc = getCarrierCodes(responseBodyTest).sort(function (a, b){",
													"    ",
													"            if (a > b) {",
													"                return -1;",
													"            }",
													"            if (b > a) {",
													"                return 1;",
													"            }",
													"            return 0;",
													"        });",
													"        ",
													"    console.log(arrCodesDesc);",
													"        ",
													"    var arrCodes = getCarrierCodes(responseBodyTest);",
													"    console.log(arrCodes);",
													"    ",
													"    var len = getCarrierCodes(responseBodyTest).length;",
													"    ",
													"    pm.test(\"Check if the list of Carrier codes is sorted by Descending manner (for all the pages).\", function(){",
													"        ",
													"        for(var baseArr = 0; baseArr < len; baseArr++){",
													"            ",
													"            pm.expect(arrCodesDesc[baseArr]).to.eql(arrCodes[baseArr]);",
													"            ",
													"        }",
													"    });",
													"}",
													"",
													"//Succeeding Pages",
													"function sendToNextPage(nextPage){",
													"    ",
													"            pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"               console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"               var jsonData = res.json();",
													"               test(jsonData);",
													"                ",
													"            }",
													"            ",
													"        });",
													"        ",
													"}",
													"",
													"function sendForSucPages(){",
													"    ",
													"        if(totPages > 1){",
													"        ",
													"        for(var base = 1; base < totPages; base++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + base;",
													"            ",
													"            let nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'Accept' : 'application/json',",
													"                                   'Content-Type' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            setTimeout(function(){sendToNextPage(nextPage)}, 3000*base);",
													"        }",
													"    ",
													"    }",
													"}",
													"",
													"//First Page",
													"test(rspBody);",
													"sendForSucPages();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?sort=carrier.code,desc&code=330",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "sort",
													"value": "carrier.code,desc"
												},
												{
													"key": "code",
													"value": "330"
												}
											]
										},
										"description": "Airport not assigned to any sales area, request parameter is countryCode"
									},
									"response": []
								},
								{
									"name": "POR-2098: Retrieve List of Aircraft Types: GET: Sorted by carrier.code ASC mode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5102f138-a3c4-428e-9026-00fe2b67a926",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForAcType\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "586e6a80-9ef7-4771-a4ef-3957f4461f99",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var rspBody = pm.response.json();",
													"var totPages = rspBody.page.totalPages;",
													"",
													"function getCarrierCodes(responseBodyCodes){",
													"    ",
													"    var arrCarCodes = [];",
													"    var acTypeLen = responseBodyCodes._embedded.transportMeansTypes.length;",
													"    ",
													"    for(var base = 0; base < acTypeLen; base++){",
													"        ",
													"        var objectNames = Object.keys(responseBodyCodes._embedded.transportMeansTypes[base]);",
													"        if(!objectNames.includes('carrier')){",
													"            ",
													"            continue;",
													"            ",
													"        }else{",
													"            ",
													"            var code = responseBodyCodes._embedded.transportMeansTypes[base].carrier.code;",
													"            arrCarCodes.push(code);  ",
													"            ",
													"        }",
													"    }",
													"    ",
													"    return arrCarCodes;",
													"}",
													"",
													"function test(responseBodyTest){",
													"    ",
													"    var arrCodesDesc = getCarrierCodes(responseBodyTest).sort();",
													"        ",
													"    console.log(arrCodesDesc);",
													"        ",
													"    var arrCodes = getCarrierCodes(responseBodyTest);",
													"    console.log(arrCodes);",
													"    ",
													"    var len = getCarrierCodes(responseBodyTest).length;",
													"    ",
													"    pm.test(\"Check if the list of Carrier codes is sorted by Ascending manner (for all the pages).\", function(){",
													"        ",
													"        for(var baseArr = 0; baseArr < len; baseArr++){",
													"            ",
													"            pm.expect(arrCodesDesc[baseArr]).to.eql(arrCodes[baseArr]);",
													"            ",
													"        }",
													"    });",
													"}",
													"",
													"//Succeeding Pages",
													"function sendToNextPage(nextPage){",
													"    ",
													"            pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"               console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"               var jsonData = res.json();",
													"               test(jsonData);",
													"                ",
													"            }",
													"            ",
													"        });",
													"        ",
													"}",
													"",
													"function sendForSucPages(){",
													"    ",
													"        if(totPages > 1){",
													"        ",
													"        for(var base = 1; base < totPages; base++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + base;",
													"            ",
													"            let nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'Accept' : 'application/json',",
													"                                   'Content-Type' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            setTimeout(function(){sendToNextPage(nextPage)}, 3000*base);",
													"        }",
													"    ",
													"    }",
													"}",
													"",
													"//First Page",
													"test(rspBody);",
													"sendForSucPages();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?sort=carrier.code,asc&code=330",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "sort",
													"value": "carrier.code,asc"
												},
												{
													"key": "code",
													"value": "330"
												}
											]
										},
										"description": "Airport not assigned to any sales area, request parameter is countryCode"
									},
									"response": []
								},
								{
									"name": "POR-2099: Retrieve List of Aircraft Types: GET: Sorted by origin.code DESC mode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5102f138-a3c4-428e-9026-00fe2b67a926",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForAcType\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "63a83629-842a-446c-81b1-c7c29e0564b8",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var rspBody = pm.response.json();",
													"var totPages = rspBody.page.totalPages;",
													"",
													"function getOriginCodes(responseBodyCodes){",
													"    ",
													"    var arrCarCodes = [];",
													"    var acTypeLen = responseBodyCodes._embedded.transportMeansTypes.length;",
													"    for(var base = 0; base < acTypeLen; base++){",
													"        ",
													"        var objectNames = Object.keys(responseBodyCodes._embedded.transportMeansTypes[base]);",
													"",
													"        if(!objectNames.includes('origin')){",
													"            ",
													"            continue;",
													"            ",
													"        }else{",
													"            ",
													"            var code = responseBodyCodes._embedded.transportMeansTypes[base].origin.code;",
													"            arrCarCodes.push(code);  ",
													"            ",
													"        }",
													"    }",
													"    ",
													"    return arrCarCodes;",
													"}",
													"",
													"function test(responseBodyTest){",
													"    ",
													"    var arrCodesDesc = getOriginCodes(responseBodyTest).sort(function (a, b){",
													"    ",
													"            if (a > b) {",
													"                return -1;",
													"            }",
													"            if (b > a) {",
													"                return 1;",
													"            }",
													"            return 0;",
													"        });",
													"        ",
													"    console.log(arrCodesDesc);",
													"        ",
													"    var arrCodes = getOriginCodes(responseBodyTest);",
													"    console.log(arrCodes);",
													"    ",
													"    var len = getOriginCodes(responseBodyTest).length;",
													"    ",
													"    pm.test(\"Check if the list of Carrier codes is sorted by Descending manner (for all the pages).\", function(){",
													"        ",
													"        for(var baseArr = 0; baseArr < len; baseArr++){",
													"            ",
													"            pm.expect(arrCodesDesc[baseArr]).to.eql(arrCodes[baseArr]);",
													"            ",
													"        }",
													"    });",
													"}",
													"",
													"//Succeeding Pages",
													"function sendToNextPage(nextPage){",
													"    ",
													"            pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"               console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"               var jsonData = res.json();",
													"               test(jsonData);",
													"                ",
													"            }",
													"            ",
													"        });",
													"        ",
													"}",
													"",
													"function sendForSucPages(){",
													"    ",
													"        if(totPages > 1){",
													"        ",
													"        for(var base = 1; base < totPages; base++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + base;",
													"            ",
													"            let nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'Accept' : 'application/json',",
													"                                   'Content-Type' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            setTimeout(function(){sendToNextPage(nextPage)}, 3000*base);",
													"        }",
													"    ",
													"    }",
													"}",
													"",
													"//First Page",
													"test(rspBody);",
													"sendForSucPages();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?sort=origin.code,desc&code=330",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "sort",
													"value": "origin.code,desc"
												},
												{
													"key": "code",
													"value": "330"
												}
											]
										},
										"description": "Airport not assigned to any sales area, request parameter is countryCode"
									},
									"response": []
								},
								{
									"name": "POR-2099: Retrieve List of Aircraft Types: GET: Sorted by origin.code ASC mode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5102f138-a3c4-428e-9026-00fe2b67a926",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForAcType\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "7d66932d-97be-40cd-93c3-4b83e9ff62a1",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var rspBody = pm.response.json();",
													"var totPages = rspBody.page.totalPages;",
													"",
													"function getOriginCodes(responseBodyCodes){",
													"    ",
													"    var arrCarCodes = [];",
													"    var acTypeLen = responseBodyCodes._embedded.transportMeansTypes.length;",
													"    for(var base = 0; base < acTypeLen; base++){",
													"        ",
													"        var objectNames = Object.keys(responseBodyCodes._embedded.transportMeansTypes[base]);",
													"",
													"        if(!objectNames.includes('origin')){",
													"            ",
													"            continue;",
													"            ",
													"        }else{",
													"            ",
													"            var code = responseBodyCodes._embedded.transportMeansTypes[base].origin.code;",
													"            arrCarCodes.push(code);  ",
													"            ",
													"        }",
													"    }",
													"    ",
													"    return arrCarCodes;",
													"}",
													"",
													"function test(responseBodyTest){",
													"    ",
													"    var arrCodesDesc = getOriginCodes(responseBodyTest).sort();",
													"        ",
													"    console.log(arrCodesDesc);",
													"        ",
													"    var arrCodes = getOriginCodes(responseBodyTest);",
													"    console.log(arrCodes);",
													"    ",
													"    var len = getOriginCodes(responseBodyTest).length;",
													"    ",
													"    pm.test(\"Check if the list of Carrier codes is sorted by Ascending manner (for all the pages).\", function(){",
													"        ",
													"        for(var baseArr = 0; baseArr < len; baseArr++){",
													"            ",
													"            pm.expect(arrCodesDesc[baseArr]).to.eql(arrCodes[baseArr]);",
													"            ",
													"        }",
													"    });",
													"}",
													"",
													"//Succeeding Pages",
													"function sendToNextPage(nextPage){",
													"    ",
													"            pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"               console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"               var jsonData = res.json();",
													"               test(jsonData);",
													"                ",
													"            }",
													"            ",
													"        });",
													"        ",
													"}",
													"",
													"function sendForSucPages(){",
													"    ",
													"        if(totPages > 1){",
													"        ",
													"        for(var base = 1; base < totPages; base++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + base;",
													"            ",
													"            let nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'Accept' : 'application/json',",
													"                                   'Content-Type' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            setTimeout(function(){sendToNextPage(nextPage)}, 3000*base);",
													"        }",
													"    ",
													"    }",
													"}",
													"",
													"//First Page",
													"test(rspBody);",
													"sendForSucPages();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?sort=origin.code,asc&code=330",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "sort",
													"value": "origin.code,asc"
												},
												{
													"key": "code",
													"value": "330"
												}
											]
										},
										"description": "Airport not assigned to any sales area, request parameter is countryCode"
									},
									"response": []
								},
								{
									"name": "POR-2100: Retrieve List of Aircraft Types: GET: Sorted by destination.code DESC mode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5102f138-a3c4-428e-9026-00fe2b67a926",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForAcType\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "47c9df94-19a3-4bab-bad5-6c333e44906e",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var rspBody = pm.response.json();",
													"var totPages = rspBody.page.totalPages;",
													"",
													"function getDestCodes(responseBodyCodes){",
													"    ",
													"    var arrCarCodes = [];",
													"    var acTypeLen = responseBodyCodes._embedded.transportMeansTypes.length;",
													"    for(var base = 0; base < acTypeLen; base++){",
													"        ",
													"        var objectNames = Object.keys(responseBodyCodes._embedded.transportMeansTypes[base]);",
													"",
													"        if(!objectNames.includes('destination')){",
													"            ",
													"            continue;",
													"            ",
													"        }else{",
													"            ",
													"            var code = responseBodyCodes._embedded.transportMeansTypes[base].destination.code;",
													"            arrCarCodes.push(code);  ",
													"            ",
													"        }",
													"    }",
													"    ",
													"    return arrCarCodes;",
													"}",
													"",
													"function test(responseBodyTest){",
													"    ",
													"    var arrCodesDesc = getDestCodes(responseBodyTest).sort(function (a, b){",
													"    ",
													"            if (a > b) {",
													"                return -1;",
													"            }",
													"            if (b > a) {",
													"                return 1;",
													"            }",
													"            return 0;",
													"        });",
													"        ",
													"    console.log(arrCodesDesc);",
													"        ",
													"    var arrCodes = getDestCodes(responseBodyTest);",
													"    console.log(arrCodes);",
													"    ",
													"    var len = getDestCodes(responseBodyTest).length;",
													"    ",
													"    pm.test(\"Check if the list of Carrier codes is sorted by Descending manner (for all the pages).\", function(){",
													"        ",
													"        for(var baseArr = 0; baseArr < len; baseArr++){",
													"            ",
													"            pm.expect(arrCodesDesc[baseArr]).to.eql(arrCodes[baseArr]);",
													"            ",
													"        }",
													"    });",
													"}",
													"",
													"//Succeeding Pages",
													"function sendToNextPage(nextPage){",
													"    ",
													"            pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"               console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"               var jsonData = res.json();",
													"               test(jsonData);",
													"                ",
													"            }",
													"            ",
													"        });",
													"        ",
													"}",
													"",
													"function sendForSucPages(){",
													"    ",
													"        if(totPages > 1){",
													"        ",
													"        for(var base = 1; base < totPages; base++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + base;",
													"            ",
													"            let nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'Accept' : 'application/json',",
													"                                   'Content-Type' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            setTimeout(function(){sendToNextPage(nextPage)}, 3000*base);",
													"        }",
													"    ",
													"    }",
													"}",
													"",
													"//First Page",
													"test(rspBody);",
													"sendForSucPages();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?sort=destination.code,desc&code=330",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "sort",
													"value": "destination.code,desc"
												},
												{
													"key": "code",
													"value": "330"
												}
											]
										},
										"description": "Airport not assigned to any sales area, request parameter is countryCode"
									},
									"response": []
								},
								{
									"name": "POR-2100: Retrieve List of Aircraft Types: GET: Sorted by destination.code ASC mode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5102f138-a3c4-428e-9026-00fe2b67a926",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForAcType\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "abb0f2e0-a7c1-4404-ab2a-4358e562fe1d",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var rspBody = pm.response.json();",
													"var totPages = rspBody.page.totalPages;",
													"",
													"function getDestCodes(responseBodyCodes){",
													"    ",
													"    var arrCarCodes = [];",
													"    var acTypeLen = responseBodyCodes._embedded.transportMeansTypes.length;",
													"    for(var base = 0; base < acTypeLen; base++){",
													"        ",
													"        var objectNames = Object.keys(responseBodyCodes._embedded.transportMeansTypes[base]);",
													"",
													"        if(!objectNames.includes('destination')){",
													"            ",
													"            continue;",
													"            ",
													"        }else{",
													"            ",
													"            var code = responseBodyCodes._embedded.transportMeansTypes[base].destination.code;",
													"            arrCarCodes.push(code);  ",
													"            ",
													"        }",
													"    }",
													"    ",
													"    return arrCarCodes;",
													"}",
													"",
													"function test(responseBodyTest){",
													"    ",
													"    var arrCodesDesc = getDestCodes(responseBodyTest).sort();",
													"        ",
													"    console.log(arrCodesDesc);",
													"        ",
													"    var arrCodes = getDestCodes(responseBodyTest);",
													"    console.log(arrCodes);",
													"    ",
													"    var len = getDestCodes(responseBodyTest).length;",
													"    ",
													"    pm.test(\"Check if the list of Carrier codes is sorted by Ascending manner (for all the pages).\", function(){",
													"        ",
													"        for(var baseArr = 0; baseArr < len; baseArr++){",
													"            ",
													"            pm.expect(arrCodesDesc[baseArr]).to.eql(arrCodes[baseArr]);",
													"            ",
													"        }",
													"    });",
													"}",
													"",
													"//Succeeding Pages",
													"function sendToNextPage(nextPage){",
													"    ",
													"            pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"               console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"               var jsonData = res.json();",
													"               test(jsonData);",
													"                ",
													"            }",
													"            ",
													"        });",
													"        ",
													"}",
													"",
													"function sendForSucPages(){",
													"    ",
													"        if(totPages > 1){",
													"        ",
													"        for(var base = 1; base < totPages; base++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + base;",
													"            ",
													"            let nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'Accept' : 'application/json',",
													"                                   'Content-Type' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            setTimeout(function(){sendToNextPage(nextPage)}, 3000*base);",
													"        }",
													"    ",
													"    }",
													"}",
													"",
													"//First Page",
													"test(rspBody);",
													"sendForSucPages();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?sort=destination.code,asc&code=330",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "sort",
													"value": "destination.code,asc"
												},
												{
													"key": "code",
													"value": "330"
												}
											]
										},
										"description": "Airport not assigned to any sales area, request parameter is countryCode"
									},
									"response": []
								},
								{
									"name": "POR-2101: Retrieve List of Aircraft Types: GET: Using originCode and destinationCode parameters",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "97001856-44ed-443a-bb34-4e76152ceeda",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForAcType\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8b391a3c-eae8-4ce9-980f-c62ce5043988",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var jsonBody = pm.response.json();",
													"",
													"function test(){",
													"    ",
													"    var len = jsonBody._embedded.transportMeansTypes.length;",
													"    ",
													"    pm.test(\"Check that the codes in response is equal to code used in parameter\", function(){",
													"        ",
													"        var firstParam = pm.request.url.query.reference.originCode.value;",
													"        var firstParamUpperCase = firstParam.toUpperCase();",
													"        ",
													"        var secondParam = pm.request.url.query.reference.destinationCode.value;",
													"        var secondParamUpperCase = secondParam.toUpperCase();",
													"    ",
													"        for(var baseLen = 0; baseLen < len; baseLen++){",
													"            ",
													"            var code = jsonBody._embedded.transportMeansTypes[baseLen].origin.code;",
													"            var carrierCode = jsonBody._embedded.transportMeansTypes[baseLen].destination.code;",
													"            ",
													"            pm.expect(firstParamUpperCase).to.eql(code);",
													"            pm.expect(secondParamUpperCase).to.eql(carrierCode);",
													"            ",
													"        }",
													"    });",
													"    ",
													"}",
													"",
													"function sendToNextPage(nextPage){",
													"    ",
													"            pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"               console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"               var jsonData = res.json();",
													"               var lenOfAirports = jsonData._embedded.transportMeansTypes.length;",
													"               ",
													"               pm.test(\"Check the Aiports Country code is same of what is in the Parameter.\", function (){",
													"    ",
													"                    for(var baseNextPage = 0; baseNextPage < lenOfAirports; baseNextPage++){",
													"                            ",
													"                            var firstParamNextPage = pm.request.url.query.reference.originCode.value;",
													"                            var firstParamUpperCaseNextPage = firstParam.toUpperCase();",
													"    ",
													"                            var secondParamNextPage = pm.request.url.query.reference.destinationCode.value;",
													"                            var secondParamUpperCaseNextPage = secondParam.toUpperCase();",
													"    ",
													"                            var codeNextPage = jsonData._embedded.transportMeansTypes[baseNextPage].origin.code;",
													"                            var carrierCodeNextPage = jsonData._embedded.transportMeansTypes[baseNextPage].destination.code; ",
													"                            ",
													"                                pm.expect(firstParamUpperCaseNextPage).to.eql(codeNextPage);",
													"                                pm.expect(secondParamUpperCaseNextPage).to.eql(carrierCodeNextPage);",
													"        ",
													"                        }",
													"                    ",
													"                });",
													"            }",
													"            ",
													"        });",
													"        ",
													"}",
													"",
													"function sendNextReq(){",
													"    ",
													"    var totPages = jsonBody.page.totalPages;",
													"    ",
													"    if(totPages > 1){",
													"        ",
													"        for(var base = 1; base < totPages; base++){",
													"            ",
													"            var url = pm.request.url + \"&page=\" + base;",
													"            ",
													"            let nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'accept' : 'application/json',",
													"                                   'contentType' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            setTimeout(function(){sendToNextPage(nextPage)}, 3000*base);",
													"        }",
													"        ",
													"    }",
													"",
													"}",
													"",
													"test();",
													"sendNextReq();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											},
											{
												"key": "token",
												"value": "12345"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?originCode=lax&destinationCode=mnl",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "originCode",
													"value": "lax"
												},
												{
													"key": "destinationCode",
													"value": "mnl"
												}
											]
										},
										"description": "Airport not assigned to any sales area, request parameter is countryCode"
									},
									"response": []
								},
								{
									"name": "POR-2102: Retrieve List of Aircraft Types: GET: Sorted by name DESC mode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5102f138-a3c4-428e-9026-00fe2b67a926",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForAcType\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "8020faca-5e81-44b1-bd08-9b302f65954c",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var rspBody = pm.response.json();",
													"var totPages = rspBody.page.totalPages;",
													"",
													"function getNames(responseBodyCodes){",
													"    ",
													"    var arrCodes = [];",
													"    var acTypeLen = responseBodyCodes._embedded.transportMeansTypes.length;",
													"    ",
													"    for(var base = 0; base < acTypeLen; base++){",
													"        ",
													"        var code = responseBodyCodes._embedded.transportMeansTypes[base].name;",
													"        ",
													"        if(code == null){",
													"            continue;",
													"        }else{",
													"            arrCodes.push(code);",
													"        }",
													"    }",
													"    ",
													"    return arrCodes;",
													"}",
													"",
													"function test(responseBodyTest, url){",
													"    ",
													"    var arrCodesDesc = getNames(responseBodyTest).sort(function (a, b){",
													"    ",
													"            if (a > b) {",
													"                return -1;",
													"            }",
													"            if (b > a) {",
													"                return 1;",
													"            }",
													"            return 0;",
													"        });",
													"        ",
													"    console.log(arrCodesDesc);",
													"        ",
													"    var arrCodes = getNames(responseBodyTest);",
													"    console.log(arrCodes);",
													"    ",
													"    var len = getNames(responseBodyTest).length;",
													"    ",
													"    pm.test(\"Check if the list of Codes is sorted by Descending manner (for all the pages).\" + \" \" + url, function(){",
													"        ",
													"        for(var baseArr = 0; baseArr < len; baseArr++){",
													"            ",
													"            pm.expect(arrCodesDesc[baseArr]).to.eql(arrCodes[baseArr]);",
													"            ",
													"        }",
													"    });",
													"}",
													"",
													"//Succeeding Pages",
													"function sendToNextPage(nextPage, url){",
													"    ",
													"            pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"               console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"               var jsonData = res.json();",
													"               test(jsonData, url);",
													"                ",
													"            }",
													"            ",
													"        });",
													"        ",
													"}",
													"",
													"function sendForSucPages(){",
													"    ",
													"        if(totPages > 1){",
													"        ",
													"        for(var base = 1; base < totPages; base++){",
													"            ",
													"            let url = pm.request.url + \"&page=\" + base;",
													"            ",
													"            let nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'Accept' : 'application/json',",
													"                                   'Content-Type' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            setTimeout(function(){sendToNextPage(nextPage, url)}, 3000*base);",
													"        }",
													"    ",
													"    }",
													"}",
													"",
													"//First Page",
													"test(rspBody, pm.request.url);",
													"sendForSucPages();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?sort=name,desc",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "sort",
													"value": "name,desc"
												}
											]
										},
										"description": "Airport not assigned to any sales area, request parameter is countryCode"
									},
									"response": []
								},
								{
									"name": "POR-2102: Retrieve List of Aircraft Types: GET: Sorted by name ASC mode",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5102f138-a3c4-428e-9026-00fe2b67a926",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForAcType\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "25019d49-f604-4661-82f5-b30ae1766603",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var rspBody = pm.response.json();",
													"var totPages = rspBody.page.totalPages;",
													"",
													"function getNames(responseBodyCodes){",
													"    ",
													"    var arrCodes = [];",
													"    var acTypeLen = responseBodyCodes._embedded.transportMeansTypes.length;",
													"    ",
													"    for(var base = 0; base < acTypeLen; base++){",
													"        ",
													"        var code = responseBodyCodes._embedded.transportMeansTypes[base].name;",
													"        ",
													"        if(code == null){",
													"            continue;",
													"        }else{",
													"            arrCodes.push(code);",
													"        }",
													"    }",
													"    ",
													"    return arrCodes;",
													"}",
													"",
													"function test(responseBodyTest){",
													"    ",
													"    var arrCodesDesc = getNames(responseBodyTest).sort();",
													"        ",
													"    console.log(arrCodesDesc);",
													"        ",
													"    var arrCodes = getNames(responseBodyTest);",
													"    console.log(arrCodes);",
													"    ",
													"    var len = getNames(responseBodyTest).length;",
													"    ",
													"    pm.test(\"Check if the list of Codes is sorted by Descending manner (for all the pages).\", function(){",
													"        ",
													"        for(var baseArr = 0; baseArr < len; baseArr++){",
													"            ",
													"            pm.expect(arrCodesDesc[baseArr]).to.eql(arrCodes[baseArr]);",
													"            ",
													"        }",
													"    });",
													"}",
													"",
													"//Succeeding Pages",
													"function sendToNextPage(nextPage){",
													"    ",
													"            pm.sendRequest(nextPage, function(err, res){",
													"            ",
													"            if(err){",
													"                ",
													"               console.log(err);",
													"                ",
													"            }else{",
													"                ",
													"               var jsonData = res.json();",
													"               test(jsonData);",
													"                ",
													"            }",
													"            ",
													"        });",
													"        ",
													"}",
													"",
													"function sendForSucPages(){",
													"    ",
													"        if(totPages > 1){",
													"        ",
													"        for(var base = 1; base < totPages; base++){",
													"            ",
													"            let url = pm.request.url + \"&page=\" + base;",
													"            ",
													"            let nextPage = {url : url,",
													"                            header : {'Authorization' : 'Bearer ' + pm.environment.get('token'),",
													"                                   'Accept' : 'application/json',",
													"                                   'Content-Type' : 'application/json'",
													"                            },",
													"                         ",
													"            };",
													"            ",
													"            setTimeout(function(){sendToNextPage(nextPage, url)}, 3000*base);",
													"        }",
													"    ",
													"    }",
													"}",
													"",
													"//First Page",
													"test(rspBody, pm.request.url);",
													"sendForSucPages();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?sort=name,asc",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "sort",
													"value": "name,asc"
												}
											]
										},
										"description": "Airport not assigned to any sales area, request parameter is countryCode"
									},
									"response": []
								},
								{
									"name": "POR-2103: Retrieve List of Aircraft Types: GET: Page specific return",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5102f138-a3c4-428e-9026-00fe2b67a926",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForAcType\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "0ba9c98d-27c2-4b5f-b479-225c967822d3",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"function test(){",
													"    ",
													"    var rspBody = pm.response.json();",
													"    var pageNum = rspBody.page.number;",
													"    var pageParam = pm.request.url.query.reference.page.value;",
													"    var param = parseInt(pageParam);",
													"",
													"    pm.test(\"Check if the page number is equal with page number used as parameter\", function(){",
													"        ",
													"        pm.expect(param).to.eql(pageNum);",
													"        ",
													"    });",
													"   ",
													"}",
													"",
													"test();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?page=7",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "page",
													"value": "7"
												}
											]
										},
										"description": "Airport not assigned to any sales area, request parameter is countryCode"
									},
									"response": []
								},
								{
									"name": "POR-2104: Retrieve List of Aircraft Types: GET: Page Size return",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5102f138-a3c4-428e-9026-00fe2b67a926",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForAcType\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "ec7b6de6-e4e7-4b9a-91fd-39ab517e318b",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"var rspBody = pm.response.json();",
													"",
													"function getCodes(responseBodyCodes){",
													"    ",
													"    var arrCodes = [];",
													"    var acTypeLen = responseBodyCodes._embedded.transportMeansTypes.length;",
													"    ",
													"    for(var base = 0; base < acTypeLen; base++){",
													"        ",
													"        var code = responseBodyCodes._embedded.transportMeansTypes[base].code;",
													"        arrCodes.push(code);",
													"        ",
													"    }",
													"    ",
													"    return arrCodes;",
													"}",
													"",
													"function test(){",
													"    ",
													"    var pageParam = pm.request.url.query.reference.size.value;",
													"    var param = parseInt(pageParam);",
													"    ",
													"    var len = getCodes(rspBody).length;",
													"",
													"    pm.test(\"Check if the total elements in response body is equal to what is entered in parameter\", function(){",
													"        ",
													"        pm.expect(param).to.eql(len);",
													"        ",
													"    });",
													"   ",
													"}",
													"",
													"test();"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?size=7",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "size",
													"value": "7"
												}
											]
										},
										"description": "Airport not assigned to any sales area, request parameter is countryCode"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						},
						{
							"name": "Negative_Scenarios",
							"item": [
								{
									"name": "POR-2096: Retrieve List of Aircraft Types: GET: Using none existing carrier code",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5102f138-a3c4-428e-9026-00fe2b67a926",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForAcType\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "a6af7f8a-fb78-4f8b-a542-d257a2287976",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"pm.test(\"Check if no element displayed in response body due to none existing origin code used as parameter.\", function(){",
													"    ",
													"    var rspBody = pm.response.json();",
													"    var elements = rspBody.page.totalElements;",
													"    ",
													"    pm.expect(0).to.eql(elements);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?carrierCode=ss",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "carrierCode",
													"value": "ss"
												}
											]
										},
										"description": "Airport not assigned to any sales area, request parameter is countryCode"
									},
									"response": []
								},
								{
									"name": "POR-2096: Retrieve List of Aircraft Types: GET: Using none existing Origin code",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5102f138-a3c4-428e-9026-00fe2b67a926",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForAcType\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "737264d9-243e-4804-b010-4debb373b4cf",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"pm.test(\"Check if no element displayed in response body due to none existing origin code used as parameter.\", function(){",
													"    ",
													"    var rspBody = pm.response.json();",
													"    var elements = rspBody.page.totalElements;",
													"    ",
													"    pm.expect(0).to.eql(elements);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?originCode=xxx",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "originCode",
													"value": "xxx"
												}
											]
										},
										"description": "Airport not assigned to any sales area, request parameter is countryCode"
									},
									"response": []
								},
								{
									"name": "POR-2096: Retrieve List of Aircraft Types: GET: Using none existing Destination code",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5102f138-a3c4-428e-9026-00fe2b67a926",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForAcType\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "737264d9-243e-4804-b010-4debb373b4cf",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"pm.test(\"Check if no element displayed in response body due to none existing origin code used as parameter.\", function(){",
													"    ",
													"    var rspBody = pm.response.json();",
													"    var elements = rspBody.page.totalElements;",
													"    ",
													"    pm.expect(0).to.eql(elements);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?destinationCode=xxx",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "destinationCode",
													"value": "xxx"
												}
											]
										},
										"description": "Airport not assigned to any sales area, request parameter is countryCode"
									},
									"response": []
								},
								{
									"name": "POR-2096: Retrieve List of Aircraft Types: GET: Using none existing registration code",
									"event": [
										{
											"listen": "prerequest",
											"script": {
												"id": "5102f138-a3c4-428e-9026-00fe2b67a926",
												"exec": [
													"eval(pm.globals.get(\"buildingUrlForAcType\"));"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "test",
											"script": {
												"id": "737264d9-243e-4804-b010-4debb373b4cf",
												"exec": [
													"eval(pm.globals.get('checkGetCode'));",
													"",
													"pm.test(\"Check if no element displayed in response body due to none existing origin code used as parameter.\", function(){",
													"    ",
													"    var rspBody = pm.response.json();",
													"    var elements = rspBody.page.totalElements;",
													"    ",
													"    pm.expect(0).to.eql(elements);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"auth": {
											"type": "bearer",
											"bearer": [
												{
													"key": "token",
													"value": "{{token}}",
													"type": "string"
												}
											]
										},
										"method": "GET",
										"header": [
											{
												"key": "Accept",
												"value": "{{accept}}"
											},
											{
												"key": "Content-Type",
												"value": "{{contentType}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{builtUrl}}?registration=xxx",
											"host": [
												"{{builtUrl}}"
											],
											"query": [
												{
													"key": "registration",
													"value": "xxx"
												}
											]
										},
										"description": "Airport not assigned to any sales area, request parameter is countryCode"
									},
									"response": []
								}
							],
							"_postman_isSubFolder": true
						}
					],
					"_postman_isSubFolder": true
				}
			]
		}
	]
}